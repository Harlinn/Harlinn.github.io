<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::ListConstIterator&lt; ListT &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::ListConstIterator&lt; ListT &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;HCCList.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Common::Core::ListConstIterator&lt; ListT &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator__inherit__graph.svg" width="168" height="154"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6bc5df6b84212f258eae8edb7bd60aca" id="r_a6bc5df6b84212f258eae8edb7bd60aca"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6bc5df6b84212f258eae8edb7bd60aca">ListType</a> = ListT</td></tr>
<tr class="separator:a6bc5df6b84212f258eae8edb7bd60aca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1156b6dc4ab0d65a7e98d7c2c745e9f3" id="r_a1156b6dc4ab0d65a7e98d7c2c745e9f3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a> = typename ListType::size_type</td></tr>
<tr class="separator:a1156b6dc4ab0d65a7e98d7c2c745e9f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d9b61768d4154f53a884bfe6d2dd5fb" id="r_a9d9b61768d4154f53a884bfe6d2dd5fb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9d9b61768d4154f53a884bfe6d2dd5fb">value_type</a> = typename ListType::value_type</td></tr>
<tr class="separator:a9d9b61768d4154f53a884bfe6d2dd5fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeec644dbdb7ef66e9398c8755d3c591" id="r_adeec644dbdb7ef66e9398c8755d3c591"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adeec644dbdb7ef66e9398c8755d3c591">pointer</a> = const <a class="el" href="#a9d9b61768d4154f53a884bfe6d2dd5fb">value_type</a>*</td></tr>
<tr class="separator:adeec644dbdb7ef66e9398c8755d3c591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ab1468d95545343283f196b92b3f13b" id="r_a2ab1468d95545343283f196b92b3f13b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2ab1468d95545343283f196b92b3f13b">reference</a> = const <a class="el" href="#a9d9b61768d4154f53a884bfe6d2dd5fb">value_type</a>&amp;</td></tr>
<tr class="separator:a2ab1468d95545343283f196b92b3f13b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab288cbb46722fbe7e644383d24e9e2bf" id="r_ab288cbb46722fbe7e644383d24e9e2bf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab288cbb46722fbe7e644383d24e9e2bf">Node</a> = typename ListType::Node</td></tr>
<tr class="separator:ab288cbb46722fbe7e644383d24e9e2bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d8d32bb901b157d9262c571f060bedc" id="r_a8d8d32bb901b157d9262c571f060bedc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8d8d32bb901b157d9262c571f060bedc">iterator_concept</a> = std::forward_iterator_tag</td></tr>
<tr class="separator:a8d8d32bb901b157d9262c571f060bedc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ed556b6b960261829a06a61089a714" id="r_af8ed556b6b960261829a06a61089a714"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af8ed556b6b960261829a06a61089a714">iterator_category</a> = std::forward_iterator_tag</td></tr>
<tr class="separator:af8ed556b6b960261829a06a61089a714"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a49bd77aaa361e3c5f75c0dfde190450a" id="r_a49bd77aaa361e3c5f75c0dfde190450a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a49bd77aaa361e3c5f75c0dfde190450a">ListConstIterator</a> ()=default</td></tr>
<tr class="separator:a49bd77aaa361e3c5f75c0dfde190450a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5be5db1fef8aaa85aca0cf8c8e3720" id="r_adc5be5db1fef8aaa85aca0cf8c8e3720"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adc5be5db1fef8aaa85aca0cf8c8e3720">ListConstIterator</a> (<a class="el" href="#ab288cbb46722fbe7e644383d24e9e2bf">Node</a> *current, <a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a> index)</td></tr>
<tr class="separator:adc5be5db1fef8aaa85aca0cf8c8e3720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e25d16dede3483c3530166485a3407f" id="r_a3e25d16dede3483c3530166485a3407f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3e25d16dede3483c3530166485a3407f">operator bool</a> () const noexcept</td></tr>
<tr class="separator:a3e25d16dede3483c3530166485a3407f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaab5885d2dcc70d32695d179b5d195ed" id="r_aaab5885d2dcc70d32695d179b5d195ed"><td class="memItemLeft" align="right" valign="top">constexpr __forceinline bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaab5885d2dcc70d32695d179b5d195ed">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:aaab5885d2dcc70d32695d179b5d195ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca10a0f09fd2700f8cc1d5b1a293f856" id="r_aca10a0f09fd2700f8cc1d5b1a293f856"><td class="memItemLeft" align="right" valign="top">constexpr __forceinline bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aca10a0f09fd2700f8cc1d5b1a293f856">operator!=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:aca10a0f09fd2700f8cc1d5b1a293f856"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab275dda296fac4b5ab05bdc5f12cad82" id="r_ab275dda296fac4b5ab05bdc5f12cad82"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab275dda296fac4b5ab05bdc5f12cad82">operator==</a> (nullptr_t) const noexcept</td></tr>
<tr class="separator:ab275dda296fac4b5ab05bdc5f12cad82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c33157ca06b8db4b08de3348ed7fba4" id="r_a6c33157ca06b8db4b08de3348ed7fba4"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6c33157ca06b8db4b08de3348ed7fba4">operator!=</a> (nullptr_t) const noexcept</td></tr>
<tr class="separator:a6c33157ca06b8db4b08de3348ed7fba4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a532a987248c015565da19f15772e3da2" id="r_a532a987248c015565da19f15772e3da2"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a2ab1468d95545343283f196b92b3f13b">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a532a987248c015565da19f15772e3da2">operator*</a> () const noexcept</td></tr>
<tr class="separator:a532a987248c015565da19f15772e3da2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a878928de285a2ba0dc6d59cb22828d37" id="r_a878928de285a2ba0dc6d59cb22828d37"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#adeec644dbdb7ef66e9398c8755d3c591">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a878928de285a2ba0dc6d59cb22828d37">operator-&gt;</a> () const noexcept</td></tr>
<tr class="separator:a878928de285a2ba0dc6d59cb22828d37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae484ea26c5fb4cadac0052d7cdc0d802" id="r_ae484ea26c5fb4cadac0052d7cdc0d802"><td class="memItemLeft" align="right" valign="top">constexpr __forceinline <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae484ea26c5fb4cadac0052d7cdc0d802">operator++</a> () noexcept</td></tr>
<tr class="separator:ae484ea26c5fb4cadac0052d7cdc0d802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85a1f7d5b94c826aa57f0047170966e3" id="r_a85a1f7d5b94c826aa57f0047170966e3"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a85a1f7d5b94c826aa57f0047170966e3">operator++</a> (int) noexcept</td></tr>
<tr class="separator:a85a1f7d5b94c826aa57f0047170966e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c01510fb80d06e33e84a27a71dab4b2" id="r_a5c01510fb80d06e33e84a27a71dab4b2"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5c01510fb80d06e33e84a27a71dab4b2">swap</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a> &amp;other) noexcept</td></tr>
<tr class="separator:a5c01510fb80d06e33e84a27a71dab4b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:ae448548d080f7adc83f8a5c35d3d4174" id="r_ae448548d080f7adc83f8a5c35d3d4174"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae448548d080f7adc83f8a5c35d3d4174">NodeSize</a> = ListType::NodeSize</td></tr>
<tr class="separator:ae448548d080f7adc83f8a5c35d3d4174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27d3ae7c420c5b1ff08069829c71e494" id="r_a27d3ae7c420c5b1ff08069829c71e494"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a27d3ae7c420c5b1ff08069829c71e494">NodeSizeM1</a> = <a class="el" href="#ae448548d080f7adc83f8a5c35d3d4174">NodeSize</a> - 1</td></tr>
<tr class="separator:a27d3ae7c420c5b1ff08069829c71e494"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a0459dbd592b74969f811c28c9080e0f5" id="r_a0459dbd592b74969f811c28c9080e0f5"><td class="memItemLeft" align="right" valign="top">constexpr __forceinline void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0459dbd592b74969f811c28c9080e0f5">Advance</a> () noexcept</td></tr>
<tr class="separator:a0459dbd592b74969f811c28c9080e0f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:af556496a1e6c80ebd04bfeafaf6c3107" id="r_af556496a1e6c80ebd04bfeafaf6c3107"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#ab288cbb46722fbe7e644383d24e9e2bf">Node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af556496a1e6c80ebd04bfeafaf6c3107">current_</a> = nullptr</td></tr>
<tr class="separator:af556496a1e6c80ebd04bfeafaf6c3107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a737ecddef0fe263ec1c4f3f6a8e3b79f" id="r_a737ecddef0fe263ec1c4f3f6a8e3b79f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a737ecddef0fe263ec1c4f3f6a8e3b79f">index_</a> = 0</td></tr>
<tr class="separator:a737ecddef0fe263ec1c4f3f6a8e3b79f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="af8ed556b6b960261829a06a61089a714" name="af8ed556b6b960261829a06a61089a714"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8ed556b6b960261829a06a61089a714">&#9670;&#160;</a></span>iterator_category</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::iterator_category = std::forward_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8d8d32bb901b157d9262c571f060bedc" name="a8d8d32bb901b157d9262c571f060bedc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d8d32bb901b157d9262c571f060bedc">&#9670;&#160;</a></span>iterator_concept</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::iterator_concept = std::forward_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6bc5df6b84212f258eae8edb7bd60aca" name="a6bc5df6b84212f258eae8edb7bd60aca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bc5df6b84212f258eae8edb7bd60aca">&#9670;&#160;</a></span>ListType</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::ListType = ListT</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab288cbb46722fbe7e644383d24e9e2bf" name="ab288cbb46722fbe7e644383d24e9e2bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab288cbb46722fbe7e644383d24e9e2bf">&#9670;&#160;</a></span>Node</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::Node = typename ListType::Node</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adeec644dbdb7ef66e9398c8755d3c591" name="adeec644dbdb7ef66e9398c8755d3c591"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adeec644dbdb7ef66e9398c8755d3c591">&#9670;&#160;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::pointer = const <a class="el" href="#a9d9b61768d4154f53a884bfe6d2dd5fb">value_type</a>*</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2ab1468d95545343283f196b92b3f13b" name="a2ab1468d95545343283f196b92b3f13b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ab1468d95545343283f196b92b3f13b">&#9670;&#160;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::reference = const <a class="el" href="#a9d9b61768d4154f53a884bfe6d2dd5fb">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1156b6dc4ab0d65a7e98d7c2c745e9f3" name="a1156b6dc4ab0d65a7e98d7c2c745e9f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">&#9670;&#160;</a></span>size_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::size_type = typename ListType::size_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9d9b61768d4154f53a884bfe6d2dd5fb" name="a9d9b61768d4154f53a884bfe6d2dd5fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d9b61768d4154f53a884bfe6d2dd5fb">&#9670;&#160;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::value_type = typename ListType::value_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a49bd77aaa361e3c5f75c0dfde190450a" name="a49bd77aaa361e3c5f75c0dfde190450a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49bd77aaa361e3c5f75c0dfde190450a">&#9670;&#160;</a></span>ListConstIterator() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::ListConstIterator </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adc5be5db1fef8aaa85aca0cf8c8e3720" name="adc5be5db1fef8aaa85aca0cf8c8e3720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5be5db1fef8aaa85aca0cf8c8e3720">&#9670;&#160;</a></span>ListConstIterator() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::ListConstIterator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ab288cbb46722fbe7e644383d24e9e2bf">Node</a> *</td>          <td class="paramname"><span class="paramname"><em>current</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a></td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0459dbd592b74969f811c28c9080e0f5" name="a0459dbd592b74969f811c28c9080e0f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0459dbd592b74969f811c28c9080e0f5">&#9670;&#160;</a></span>Advance()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">__forceinline void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::Advance </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3e25d16dede3483c3530166485a3407f" name="a3e25d16dede3483c3530166485a3407f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e25d16dede3483c3530166485a3407f">&#9670;&#160;</a></span>operator bool()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator bool </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aca10a0f09fd2700f8cc1d5b1a293f856" name="aca10a0f09fd2700f8cc1d5b1a293f856"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca10a0f09fd2700f8cc1d5b1a293f856">&#9670;&#160;</a></span>operator!=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">__forceinline bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a>&lt; ListT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6c33157ca06b8db4b08de3348ed7fba4" name="a6c33157ca06b8db4b08de3348ed7fba4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c33157ca06b8db4b08de3348ed7fba4">&#9670;&#160;</a></span>operator!=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">nullptr_t</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a532a987248c015565da19f15772e3da2" name="a532a987248c015565da19f15772e3da2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a532a987248c015565da19f15772e3da2">&#9670;&#160;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a2ab1468d95545343283f196b92b3f13b">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae484ea26c5fb4cadac0052d7cdc0d802" name="ae484ea26c5fb4cadac0052d7cdc0d802"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae484ea26c5fb4cadac0052d7cdc0d802">&#9670;&#160;</a></span>operator++() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">__forceinline <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator++ </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a85a1f7d5b94c826aa57f0047170966e3" name="a85a1f7d5b94c826aa57f0047170966e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85a1f7d5b94c826aa57f0047170966e3">&#9670;&#160;</a></span>operator++() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator++ </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a878928de285a2ba0dc6d59cb22828d37" name="a878928de285a2ba0dc6d59cb22828d37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a878928de285a2ba0dc6d59cb22828d37">&#9670;&#160;</a></span>operator-&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#adeec644dbdb7ef66e9398c8755d3c591">pointer</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aaab5885d2dcc70d32695d179b5d195ed" name="aaab5885d2dcc70d32695d179b5d195ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaab5885d2dcc70d32695d179b5d195ed">&#9670;&#160;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">__forceinline bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a>&lt; ListT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab275dda296fac4b5ab05bdc5f12cad82" name="ab275dda296fac4b5ab05bdc5f12cad82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab275dda296fac4b5ab05bdc5f12cad82">&#9670;&#160;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">nullptr_t</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c01510fb80d06e33e84a27a71dab4b2" name="a5c01510fb80d06e33e84a27a71dab4b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c01510fb80d06e33e84a27a71dab4b2">&#9670;&#160;</a></span>swap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a>&lt; ListT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="af556496a1e6c80ebd04bfeafaf6c3107" name="af556496a1e6c80ebd04bfeafaf6c3107"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af556496a1e6c80ebd04bfeafaf6c3107">&#9670;&#160;</a></span>current_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ab288cbb46722fbe7e644383d24e9e2bf">Node</a>* <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::current_ = nullptr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a737ecddef0fe263ec1c4f3f6a8e3b79f" name="a737ecddef0fe263ec1c4f3f6a8e3b79f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a737ecddef0fe263ec1c4f3f6a8e3b79f">&#9670;&#160;</a></span>index_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::index_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae448548d080f7adc83f8a5c35d3d4174" name="ae448548d080f7adc83f8a5c35d3d4174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae448548d080f7adc83f8a5c35d3d4174">&#9670;&#160;</a></span>NodeSize</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::NodeSize = ListType::NodeSize</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a27d3ae7c420c5b1ff08069829c71e494" name="a27d3ae7c420c5b1ff08069829c71e494"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27d3ae7c420c5b1ff08069829c71e494">&#9670;&#160;</a></span>NodeSizeM1</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ListT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a1156b6dc4ab0d65a7e98d7c2c745e9f3">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">Harlinn::Common::Core::ListConstIterator</a>&lt; ListT &gt;::NodeSizeM1 = <a class="el" href="#ae448548d080f7adc83f8a5c35d3d4174">NodeSize</a> - 1</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_c_c_list_8h.xhtml">HCCList.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_list_const_iterator.xhtml">ListConstIterator</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

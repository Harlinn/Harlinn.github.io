<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::IO::Request Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::IO::Request Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Base class for all asynchronous requests.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;HCCIORequest.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Common::Core::IO::Request:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request__inherit__graph.svg" width="1118" height="2094"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Harlinn::Common::Core::IO::Request:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request__coll__graph.svg" width="2040" height="407"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aee64a539a2652d2270b43392f7b710a6" id="r_aee64a539a2652d2270b43392f7b710a6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aee64a539a2652d2270b43392f7b710a6">Base</a> = OVERLAPPED</td></tr>
<tr class="separator:aee64a539a2652d2270b43392f7b710a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a89924349a0e6954759a3773b72fba184" id="r_a89924349a0e6954759a3773b72fba184"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a89924349a0e6954759a3773b72fba184">Request</a> ()</td></tr>
<tr class="separator:a89924349a0e6954759a3773b72fba184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c7bfa8209a335a90c1faa3cb22422e" id="r_ad7c7bfa8209a335a90c1faa3cb22422e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad7c7bfa8209a335a90c1faa3cb22422e">Request</a> (HANDLE handle)</td></tr>
<tr class="separator:ad7c7bfa8209a335a90c1faa3cb22422e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8070d15bce13b049b69d5382b3ee617b" id="r_a8070d15bce13b049b69d5382b3ee617b"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8070d15bce13b049b69d5382b3ee617b">Request</a> (HANDLE handle, HANDLE manualResetEvent, bool ownsEvent)</td></tr>
<tr class="separator:a8070d15bce13b049b69d5382b3ee617b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b55220a3256be87fdaccd63a860082c" id="r_a4b55220a3256be87fdaccd63a860082c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4b55220a3256be87fdaccd63a860082c">Request</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;other)=delete</td></tr>
<tr class="separator:a4b55220a3256be87fdaccd63a860082c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb79a39b72b18c4610ef6f3fc97538d1" id="r_adb79a39b72b18c4610ef6f3fc97538d1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adb79a39b72b18c4610ef6f3fc97538d1">Request</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;&amp;other)=delete</td></tr>
<tr class="separator:adb79a39b72b18c4610ef6f3fc97538d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6341a259e8c0c9d51036a005d565caa1" id="r_a6341a259e8c0c9d51036a005d565caa1"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6341a259e8c0c9d51036a005d565caa1">~Request</a> () noexcept</td></tr>
<tr class="separator:a6341a259e8c0c9d51036a005d565caa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c11e4fa89bd54d85c3dd13ad0fb64c9" id="r_a6c11e4fa89bd54d85c3dd13ad0fb64c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6c11e4fa89bd54d85c3dd13ad0fb64c9">operator=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;other)=delete</td></tr>
<tr class="separator:a6c11e4fa89bd54d85c3dd13ad0fb64c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc6bc5d12a0f46b5ff638fb8daedbb6e" id="r_acc6bc5d12a0f46b5ff638fb8daedbb6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acc6bc5d12a0f46b5ff638fb8daedbb6e">operator=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;&amp;other)=delete</td></tr>
<tr class="separator:acc6bc5d12a0f46b5ff638fb8daedbb6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb72ff63e0bf2b9c1d2618c0180cbfa3" id="r_abb72ff63e0bf2b9c1d2618c0180cbfa3"><td class="memItemLeft" align="right" valign="top">constexpr ULONG_PTR&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abb72ff63e0bf2b9c1d2618c0180cbfa3">Status</a> () const noexcept</td></tr>
<tr class="memdesc:abb72ff63e0bf2b9c1d2618c0180cbfa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the status code for the I/O request. Will return STATUS_PENDING to indicate that the operation has not yet completed, and for operations that has completed it will return the status code for the completed request.  <br /></td></tr>
<tr class="separator:abb72ff63e0bf2b9c1d2618c0180cbfa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d9497bb448be3b44a485f10a2ddb815" id="r_a7d9497bb448be3b44a485f10a2ddb815"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7d9497bb448be3b44a485f10a2ddb815">SetResult</a> (<a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7db81262edfb59ceb8618fa43cc28a88">WinError</a> ioResult, <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a47d821532420478a9043d9f71d0735d8">UInt64</a> numberOfBytesTransferred) noexcept</td></tr>
<tr class="memdesc:a7d9497bb448be3b44a485f10a2ddb815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the status code and number of bytes transferred for this request.  <br /></td></tr>
<tr class="separator:a7d9497bb448be3b44a485f10a2ddb815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacf3c14c025bd46cb577b8f0395e44dd" id="r_aacf3c14c025bd46cb577b8f0395e44dd"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aacf3c14c025bd46cb577b8f0395e44dd">SetResult</a> (<a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7db81262edfb59ceb8618fa43cc28a88">WinError</a> ioResult) noexcept</td></tr>
<tr class="memdesc:aacf3c14c025bd46cb577b8f0395e44dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the status code for this request.  <br /></td></tr>
<tr class="separator:aacf3c14c025bd46cb577b8f0395e44dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67ccd8ebb045f3d6fe49b59117224456" id="r_a67ccd8ebb045f3d6fe49b59117224456"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7db81262edfb59ceb8618fa43cc28a88">WinError</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a67ccd8ebb045f3d6fe49b59117224456">IoResult</a> () const noexcept</td></tr>
<tr class="memdesc:a67ccd8ebb045f3d6fe49b59117224456"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the status code for the I/O request as an unsigned 32-bit integer. Will return STATUS_PENDING to indicate that the operation has not yet completed, and for operations that has completed it will return the status code for the completed request.  <br /></td></tr>
<tr class="separator:a67ccd8ebb045f3d6fe49b59117224456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1270b0dbe284c602df2f55b5194aadb8" id="r_a1270b0dbe284c602df2f55b5194aadb8"><td class="memItemLeft" align="right" valign="top">constexpr ULONG_PTR&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1270b0dbe284c602df2f55b5194aadb8">NumberOfBytesTransferred</a> () const noexcept</td></tr>
<tr class="memdesc:a1270b0dbe284c602df2f55b5194aadb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the number of bytes transferred for the I/O request. The result is only valid if the request is completed without errors.  <br /></td></tr>
<tr class="separator:a1270b0dbe284c602df2f55b5194aadb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ab9610b15f942150f87faebd57f23b7" id="r_a6ab9610b15f942150f87faebd57f23b7"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6ab9610b15f942150f87faebd57f23b7">Position</a> () const noexcept</td></tr>
<tr class="memdesc:a6ab9610b15f942150f87faebd57f23b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the file position at which to start the I/O request.  <br /></td></tr>
<tr class="separator:a6ab9610b15f942150f87faebd57f23b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58ad8e64ccaf18a73f41ff71bd983157" id="r_a58ad8e64ccaf18a73f41ff71bd983157"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a58ad8e64ccaf18a73f41ff71bd983157">SetPosition</a> (size_t position) noexcept</td></tr>
<tr class="memdesc:a58ad8e64ccaf18a73f41ff71bd983157"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the file position at which to start the I/O request.  <br /></td></tr>
<tr class="separator:a58ad8e64ccaf18a73f41ff71bd983157"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a601a1fac1d039990bf3afb6ef0f20888" id="r_a601a1fac1d039990bf3afb6ef0f20888"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a601a1fac1d039990bf3afb6ef0f20888">Clear</a> () noexcept</td></tr>
<tr class="memdesc:a601a1fac1d039990bf3afb6ef0f20888"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the OVERLAPPED for reuse <br  />
  <br /></td></tr>
<tr class="separator:a601a1fac1d039990bf3afb6ef0f20888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74ebe68b7c80ebd06078930fd4277711" id="r_a74ebe68b7c80ebd06078930fd4277711"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a74ebe68b7c80ebd06078930fd4277711">Reset</a> ()</td></tr>
<tr class="memdesc:a74ebe68b7c80ebd06078930fd4277711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the request for reuse <br  />
  <br /></td></tr>
<tr class="separator:a74ebe68b7c80ebd06078930fd4277711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3ac5d6ddbb8acda075ef825eb95b94c" id="r_ad3ac5d6ddbb8acda075ef825eb95b94c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad3ac5d6ddbb8acda075ef825eb95b94c">Reset</a> (HANDLE handle)</td></tr>
<tr class="memdesc:ad3ac5d6ddbb8acda075ef825eb95b94c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the request for reuse <br  />
  <br /></td></tr>
<tr class="separator:ad3ac5d6ddbb8acda075ef825eb95b94c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09da3c980b9473bea03e6157020b4e37" id="r_a09da3c980b9473bea03e6157020b4e37"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a09da3c980b9473bea03e6157020b4e37">Reset</a> (HANDLE handle, HANDLE manualResetEvent, bool ownsEvent)</td></tr>
<tr class="memdesc:a09da3c980b9473bea03e6157020b4e37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the request for reuse <br  />
  <br /></td></tr>
<tr class="separator:a09da3c980b9473bea03e6157020b4e37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3d01eca5fbb58f7a7229dc19a624d95" id="r_af3d01eca5fbb58f7a7229dc19a624d95"><td class="memItemLeft" align="right" valign="top">constexpr HANDLE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af3d01eca5fbb58f7a7229dc19a624d95">Handle</a> () const noexcept</td></tr>
<tr class="memdesc:af3d01eca5fbb58f7a7229dc19a624d95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the handle that this asynchronous operates on.  <br /></td></tr>
<tr class="separator:af3d01eca5fbb58f7a7229dc19a624d95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9e21f4213643e3ee4c948194f58765" id="r_a5f9e21f4213643e3ee4c948194f58765"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5f9e21f4213643e3ee4c948194f58765">SetHandle</a> (HANDLE handle)</td></tr>
<tr class="memdesc:a5f9e21f4213643e3ee4c948194f58765"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the handle that this asynchronous operates on.  <br /></td></tr>
<tr class="separator:a5f9e21f4213643e3ee4c948194f58765"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af09de1ddd9f42aad2409961fb142f63b" id="r_af09de1ddd9f42aad2409961fb142f63b"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">IO::Context</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af09de1ddd9f42aad2409961fb142f63b">Context</a> () const noexcept</td></tr>
<tr class="memdesc:af09de1ddd9f42aad2409961fb142f63b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves a pointer to the <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a> that the handle this <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml" title="Base class for all asynchronous requests.">Request</a> operates on is bound to.  <br /></td></tr>
<tr class="separator:af09de1ddd9f42aad2409961fb142f63b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0211cb0f6d0439c92fae174a45c096b" id="r_af0211cb0f6d0439c92fae174a45c096b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af0211cb0f6d0439c92fae174a45c096b">SetContext</a> (std::shared_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">IO::Context</a> &gt; &amp;context)</td></tr>
<tr class="memdesc:af0211cb0f6d0439c92fae174a45c096b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the pointer to the <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a> that the handle this <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml" title="Base class for all asynchronous requests.">Request</a> operates on is bound to.  <br /></td></tr>
<tr class="separator:af0211cb0f6d0439c92fae174a45c096b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a713bdc21518a5c2225b5fbab0b8e9575" id="r_a713bdc21518a5c2225b5fbab0b8e9575"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a713bdc21518a5c2225b5fbab0b8e9575">SetContext</a> (std::weak_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">IO::Context</a> &gt; &amp;context)</td></tr>
<tr class="separator:a713bdc21518a5c2225b5fbab0b8e9575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf5e0951f4f11cf54e45e9f821bfe2f5" id="r_adf5e0951f4f11cf54e45e9f821bfe2f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adf5e0951f4f11cf54e45e9f821bfe2f5">IoCompleted</a> () const</td></tr>
<tr class="memdesc:adf5e0951f4f11cf54e45e9f821bfe2f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">A high performance test operation that can be used to poll for the completion of an outstanding I/O request.  <br /></td></tr>
<tr class="separator:adf5e0951f4f11cf54e45e9f821bfe2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade1e2e3da770332eabb1a5516d77d8b1" id="r_ade1e2e3da770332eabb1a5516d77d8b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml#a35e9effb171a9d3efbd0b0fe56a30596">RequestWaitResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ade1e2e3da770332eabb1a5516d77d8b1">Wait</a> (<a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> *numberOfBytesTransferred, <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> timeoutInMilliseconds, bool alertableWait) const</td></tr>
<tr class="memdesc:ade1e2e3da770332eabb1a5516d77d8b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the completion of this asynchronous request.  <br /></td></tr>
<tr class="separator:ade1e2e3da770332eabb1a5516d77d8b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a812131aeed21753c0589a17c228b44b4" id="r_a812131aeed21753c0589a17c228b44b4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a812131aeed21753c0589a17c228b44b4">Wait</a> (<a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> *numberOfBytesTransferred, <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> timeoutInMilliseconds=INFINITE) const</td></tr>
<tr class="memdesc:a812131aeed21753c0589a17c228b44b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the completion of this asynchronous request.  <br /></td></tr>
<tr class="separator:a812131aeed21753c0589a17c228b44b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a477652f9be29fa79cd0afc77f5e177d8" id="r_a477652f9be29fa79cd0afc77f5e177d8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a477652f9be29fa79cd0afc77f5e177d8">Wait</a> (<a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> timeoutInMilliseconds=INFINITE) const</td></tr>
<tr class="memdesc:a477652f9be29fa79cd0afc77f5e177d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the completion of this asynchronous request.  <br /></td></tr>
<tr class="separator:a477652f9be29fa79cd0afc77f5e177d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cefcc22aff05079044b7934aa1edd63" id="r_a4cefcc22aff05079044b7934aa1edd63"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4cefcc22aff05079044b7934aa1edd63">Cancel</a> () const</td></tr>
<tr class="memdesc:a4cefcc22aff05079044b7934aa1edd63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cancels the outstanding I/O operation.  <br /></td></tr>
<tr class="separator:a4cefcc22aff05079044b7934aa1edd63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacc02d9fb10afe66eeb0a55cca0d4ce8" id="r_aacc02d9fb10afe66eeb0a55cca0d4ce8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aacc02d9fb10afe66eeb0a55cca0d4ce8">SetEvent</a> () const</td></tr>
<tr class="memdesc:aacc02d9fb10afe66eeb0a55cca0d4ce8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the event object to the signaled state.  <br /></td></tr>
<tr class="separator:aacc02d9fb10afe66eeb0a55cca0d4ce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbb5d0c55dc11b3a219837a32163212d" id="r_abbb5d0c55dc11b3a219837a32163212d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abbb5d0c55dc11b3a219837a32163212d">Signal</a> () const</td></tr>
<tr class="memdesc:abbb5d0c55dc11b3a219837a32163212d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the event object to the signaled state.  <br /></td></tr>
<tr class="separator:abbb5d0c55dc11b3a219837a32163212d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324c7df3654101366cc51a4205fcac13" id="r_a324c7df3654101366cc51a4205fcac13"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a324c7df3654101366cc51a4205fcac13">ResetEvent</a> () const</td></tr>
<tr class="memdesc:a324c7df3654101366cc51a4205fcac13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the event object to the non-signaled state.  <br /></td></tr>
<tr class="separator:a324c7df3654101366cc51a4205fcac13"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-static-methods" name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:a0bb8b6c1f6ecbea6880598523074439f" id="r_a0bb8b6c1f6ecbea6880598523074439f"><td class="memItemLeft" align="right" valign="top">static HANDLE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0bb8b6c1f6ecbea6880598523074439f">CreateManualResetEvent</a> ()</td></tr>
<tr class="separator:a0bb8b6c1f6ecbea6880598523074439f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a1795dcff3d06e4b61578dc7fce4fb477" id="r_a1795dcff3d06e4b61578dc7fce4fb477"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1795dcff3d06e4b61578dc7fce4fb477">ownsEvent_</a></td></tr>
<tr class="separator:a1795dcff3d06e4b61578dc7fce4fb477"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a0095780adbbf1df1c7910566c5482f" id="r_a8a0095780adbbf1df1c7910566c5482f"><td class="memItemLeft" align="right" valign="top">HANDLE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8a0095780adbbf1df1c7910566c5482f">handle_</a></td></tr>
<tr class="separator:a8a0095780adbbf1df1c7910566c5482f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45262b7780b4d5d18392751b86993876" id="r_a45262b7780b4d5d18392751b86993876"><td class="memItemLeft" align="right" valign="top">std::weak_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">Context</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a45262b7780b4d5d18392751b86993876">context_</a></td></tr>
<tr class="separator:a45262b7780b4d5d18392751b86993876"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base class for all asynchronous requests. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="aee64a539a2652d2270b43392f7b710a6" name="aee64a539a2652d2270b43392f7b710a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee64a539a2652d2270b43392f7b710a6">&#9670;&#160;</a></span>Base</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#aee64a539a2652d2270b43392f7b710a6">Harlinn::Common::Core::IO::Request::Base</a> = OVERLAPPED</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a89924349a0e6954759a3773b72fba184" name="a89924349a0e6954759a3773b72fba184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89924349a0e6954759a3773b72fba184">&#9670;&#160;</a></span>Request() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::IO::Request::Request </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad7c7bfa8209a335a90c1faa3cb22422e" name="ad7c7bfa8209a335a90c1faa3cb22422e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7c7bfa8209a335a90c1faa3cb22422e">&#9670;&#160;</a></span>Request() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::IO::Request::Request </td>
          <td>(</td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>handle</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8070d15bce13b049b69d5382b3ee617b" name="a8070d15bce13b049b69d5382b3ee617b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8070d15bce13b049b69d5382b3ee617b">&#9670;&#160;</a></span>Request() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::IO::Request::Request </td>
          <td>(</td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>handle</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>manualResetEvent</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>ownsEvent</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4b55220a3256be87fdaccd63a860082c" name="a4b55220a3256be87fdaccd63a860082c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b55220a3256be87fdaccd63a860082c">&#9670;&#160;</a></span>Request() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::IO::Request::Request </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adb79a39b72b18c4610ef6f3fc97538d1" name="adb79a39b72b18c4610ef6f3fc97538d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb79a39b72b18c4610ef6f3fc97538d1">&#9670;&#160;</a></span>Request() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::IO::Request::Request </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6341a259e8c0c9d51036a005d565caa1" name="a6341a259e8c0c9d51036a005d565caa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6341a259e8c0c9d51036a005d565caa1">&#9670;&#160;</a></span>~Request()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Harlinn::Common::Core::IO::Request::~Request </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4cefcc22aff05079044b7934aa1edd63" name="a4cefcc22aff05079044b7934aa1edd63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cefcc22aff05079044b7934aa1edd63">&#9670;&#160;</a></span>Cancel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::IO::Request::Cancel </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Cancels the outstanding I/O operation. </p>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>
<em>true</em> if the outstanding operation was cancelled. </li>
<li>
<em>false</em> if the system was unable to locate the request. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="a601a1fac1d039990bf3afb6ef0f20888" name="a601a1fac1d039990bf3afb6ef0f20888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a601a1fac1d039990bf3afb6ef0f20888">&#9670;&#160;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::Clear </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the OVERLAPPED for reuse <br  />
 </p>

</div>
</div>
<a id="af09de1ddd9f42aad2409961fb142f63b" name="af09de1ddd9f42aad2409961fb142f63b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af09de1ddd9f42aad2409961fb142f63b">&#9670;&#160;</a></span>Context()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">IO::Context</a> &gt; Harlinn::Common::Core::IO::Request::Context </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves a pointer to the <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a> that the handle this <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml" title="Base class for all asynchronous requests.">Request</a> operates on is bound to. </p>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a> that the handle this <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml" title="Base class for all asynchronous requests.">Request</a> operates on is bound to. </dd></dl>

</div>
</div>
<a id="a0bb8b6c1f6ecbea6880598523074439f" name="a0bb8b6c1f6ecbea6880598523074439f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bb8b6c1f6ecbea6880598523074439f">&#9670;&#160;</a></span>CreateManualResetEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static HANDLE Harlinn::Common::Core::IO::Request::CreateManualResetEvent </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af3d01eca5fbb58f7a7229dc19a624d95" name="af3d01eca5fbb58f7a7229dc19a624d95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3d01eca5fbb58f7a7229dc19a624d95">&#9670;&#160;</a></span>Handle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">HANDLE Harlinn::Common::Core::IO::Request::Handle </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the handle that this asynchronous operates on. </p>
<dl class="section return"><dt>Returns</dt><dd>The handle that this asynchronous operates on.</dd></dl>

</div>
</div>
<a id="adf5e0951f4f11cf54e45e9f821bfe2f5" name="adf5e0951f4f11cf54e45e9f821bfe2f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf5e0951f4f11cf54e45e9f821bfe2f5">&#9670;&#160;</a></span>IoCompleted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::IO::Request::IoCompleted </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A high performance test operation that can be used to poll for the completion of an outstanding I/O request. </p>
<p>Do not call this member function unless this request has been successfully queued to the <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the request has completed, otherwise false. </dd></dl>

</div>
</div>
<a id="a67ccd8ebb045f3d6fe49b59117224456" name="a67ccd8ebb045f3d6fe49b59117224456"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67ccd8ebb045f3d6fe49b59117224456">&#9670;&#160;</a></span>IoResult()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7db81262edfb59ceb8618fa43cc28a88">WinError</a> Harlinn::Common::Core::IO::Request::IoResult </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the status code for the I/O request as an unsigned 32-bit integer. Will return STATUS_PENDING to indicate that the operation has not yet completed, and for operations that has completed it will return the status code for the completed request. </p>
<dl class="section return"><dt>Returns</dt><dd>The status code for the request as an unsigned 32-bit integer.</dd></dl>

</div>
</div>
<a id="a1270b0dbe284c602df2f55b5194aadb8" name="a1270b0dbe284c602df2f55b5194aadb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1270b0dbe284c602df2f55b5194aadb8">&#9670;&#160;</a></span>NumberOfBytesTransferred()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ULONG_PTR Harlinn::Common::Core::IO::Request::NumberOfBytesTransferred </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the number of bytes transferred for the I/O request. The result is only valid if the request is completed without errors. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of bytes transferred.</dd></dl>

</div>
</div>
<a id="a6c11e4fa89bd54d85c3dd13ad0fb64c9" name="a6c11e4fa89bd54d85c3dd13ad0fb64c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c11e4fa89bd54d85c3dd13ad0fb64c9">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp; Harlinn::Common::Core::IO::Request::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acc6bc5d12a0f46b5ff638fb8daedbb6e" name="acc6bc5d12a0f46b5ff638fb8daedbb6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc6bc5d12a0f46b5ff638fb8daedbb6e">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp; Harlinn::Common::Core::IO::Request::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a> &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6ab9610b15f942150f87faebd57f23b7" name="a6ab9610b15f942150f87faebd57f23b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ab9610b15f942150f87faebd57f23b7">&#9670;&#160;</a></span>Position()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t Harlinn::Common::Core::IO::Request::Position </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the file position at which to start the I/O request. </p>
<p>Only use this when performing I/O requests on a seeking device that supports the concept of an offset, such as a file. </p>
<dl class="section return"><dt>Returns</dt><dd>The file position at which to start the I/O request.</dd></dl>

</div>
</div>
<a id="a74ebe68b7c80ebd06078930fd4277711" name="a74ebe68b7c80ebd06078930fd4277711"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74ebe68b7c80ebd06078930fd4277711">&#9670;&#160;</a></span>Reset() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::Reset </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the request for reuse <br  />
 </p>

</div>
</div>
<a id="ad3ac5d6ddbb8acda075ef825eb95b94c" name="ad3ac5d6ddbb8acda075ef825eb95b94c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3ac5d6ddbb8acda075ef825eb95b94c">&#9670;&#160;</a></span>Reset() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::Reset </td>
          <td>(</td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>handle</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the request for reuse <br  />
 </p>

</div>
</div>
<a id="a09da3c980b9473bea03e6157020b4e37" name="a09da3c980b9473bea03e6157020b4e37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09da3c980b9473bea03e6157020b4e37">&#9670;&#160;</a></span>Reset() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::Reset </td>
          <td>(</td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>handle</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>manualResetEvent</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>ownsEvent</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the request for reuse <br  />
 </p>

</div>
</div>
<a id="a324c7df3654101366cc51a4205fcac13" name="a324c7df3654101366cc51a4205fcac13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a324c7df3654101366cc51a4205fcac13">&#9670;&#160;</a></span>ResetEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::ResetEvent </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the event object to the non-signaled state. </p>

</div>
</div>
<a id="af0211cb0f6d0439c92fae174a45c096b" name="af0211cb0f6d0439c92fae174a45c096b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0211cb0f6d0439c92fae174a45c096b">&#9670;&#160;</a></span>SetContext() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetContext </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">IO::Context</a> &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>context</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the pointer to the <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a> that the handle this <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml" title="Base class for all asynchronous requests.">Request</a> operates on is bound to. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">context</td><td>Pointer to an <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml" title="Context is an I/O completion port with an attached thread-pool that services I/O completion notificat...">IO::Context</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a713bdc21518a5c2225b5fbab0b8e9575" name="a713bdc21518a5c2225b5fbab0b8e9575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a713bdc21518a5c2225b5fbab0b8e9575">&#9670;&#160;</a></span>SetContext() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetContext </td>
          <td>(</td>
          <td class="paramtype">std::weak_ptr&lt; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">IO::Context</a> &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>context</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aacc02d9fb10afe66eeb0a55cca0d4ce8" name="aacc02d9fb10afe66eeb0a55cca0d4ce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacc02d9fb10afe66eeb0a55cca0d4ce8">&#9670;&#160;</a></span>SetEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetEvent </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the event object to the signaled state. </p>

</div>
</div>
<a id="a5f9e21f4213643e3ee4c948194f58765" name="a5f9e21f4213643e3ee4c948194f58765"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f9e21f4213643e3ee4c948194f58765">&#9670;&#160;</a></span>SetHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetHandle </td>
          <td>(</td>
          <td class="paramtype">HANDLE</td>          <td class="paramname"><span class="paramname"><em>handle</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the handle that this asynchronous operates on. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>The handle that this asynchronous operates on. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a58ad8e64ccaf18a73f41ff71bd983157" name="a58ad8e64ccaf18a73f41ff71bd983157"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58ad8e64ccaf18a73f41ff71bd983157">&#9670;&#160;</a></span>SetPosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetPosition </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>position</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the file position at which to start the I/O request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>The file position at which to start the I/O request. </td></tr>
  </table>
  </dd>
</dl>
<p>Only use this when performing I/O requests on a seeking device that supports the concept of an offset, such as a file. </p>

</div>
</div>
<a id="aacf3c14c025bd46cb577b8f0395e44dd" name="aacf3c14c025bd46cb577b8f0395e44dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacf3c14c025bd46cb577b8f0395e44dd">&#9670;&#160;</a></span>SetResult() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetResult </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7db81262edfb59ceb8618fa43cc28a88">WinError</a></td>          <td class="paramname"><span class="paramname"><em>ioResult</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the status code for this request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ioResult</td><td>The status code. </td></tr>
  </table>
  </dd>
</dl>
<p>Sometimes an asynchronous request will complete synchronously. The library then uses this function to update the status code for the request before calling the handler implementation. </p>

</div>
</div>
<a id="a7d9497bb448be3b44a485f10a2ddb815" name="a7d9497bb448be3b44a485f10a2ddb815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d9497bb448be3b44a485f10a2ddb815">&#9670;&#160;</a></span>SetResult() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::SetResult </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7db81262edfb59ceb8618fa43cc28a88">WinError</a></td>          <td class="paramname"><span class="paramname"><em>ioResult</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a47d821532420478a9043d9f71d0735d8">UInt64</a></td>          <td class="paramname"><span class="paramname"><em>numberOfBytesTransferred</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the status code and number of bytes transferred for this request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ioResult</td><td>The status code. </td></tr>
    <tr><td class="paramname">numberOfBytesTransferred</td><td>The number of bytes transferred, </td></tr>
  </table>
  </dd>
</dl>
<p>Sometimes an asynchronous request will complete synchronously. The library then uses this function to update the status code and number of bytes transferred for the request before calling the handler implementation. </p>

</div>
</div>
<a id="abbb5d0c55dc11b3a219837a32163212d" name="abbb5d0c55dc11b3a219837a32163212d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbb5d0c55dc11b3a219837a32163212d">&#9670;&#160;</a></span>Signal()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Common::Core::IO::Request::Signal </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the event object to the signaled state. </p>

</div>
</div>
<a id="abb72ff63e0bf2b9c1d2618c0180cbfa3" name="abb72ff63e0bf2b9c1d2618c0180cbfa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb72ff63e0bf2b9c1d2618c0180cbfa3">&#9670;&#160;</a></span>Status()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ULONG_PTR Harlinn::Common::Core::IO::Request::Status </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the status code for the I/O request. Will return STATUS_PENDING to indicate that the operation has not yet completed, and for operations that has completed it will return the status code for the completed request. </p>
<dl class="section return"><dt>Returns</dt><dd>The status code for the request.</dd></dl>

</div>
</div>
<a id="ade1e2e3da770332eabb1a5516d77d8b1" name="ade1e2e3da770332eabb1a5516d77d8b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade1e2e3da770332eabb1a5516d77d8b1">&#9670;&#160;</a></span>Wait() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml#a35e9effb171a9d3efbd0b0fe56a30596">RequestWaitResult</a> Harlinn::Common::Core::IO::Request::Wait </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> *</td>          <td class="paramname"><span class="paramname"><em>numberOfBytesTransferred</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a></td>          <td class="paramname"><span class="paramname"><em>timeoutInMilliseconds</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>alertableWait</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wait for the completion of this asynchronous request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">numberOfBytesTransferred</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>A pointer to a variable that receives the number of bytes that were actually transferred by a read or write operation. </p>
<p>For a TransactNamedPipe operation, this is the number of bytes that were read from the pipe. For a DeviceIoControl operation, this is the number of bytes of output data returned by the device driver. For a ConnectNamedPipe or WaitCommEvent operation, this value is undefined. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeoutInMilliseconds</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>The time-out interval, in milliseconds. </p>
<p>The function returns <a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml#a35e9effb171a9d3efbd0b0fe56a30596a505a83f220c02df2f85c3810cd9ceb38" title="Indicates that the wait succeeded.">RequestWaitResult::Success</a> if it successfully waits for the request to complete. </p>
<p>If timeoutInMilliseconds is zero and the operation is still in progress, the function returns immediately with the return value set to <a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml#a35e9effb171a9d3efbd0b0fe56a30596a4307e7e7986aa21a4b7c3ef2b5e948f6" title="timeoutInMilliseconds was set to zero and the operation is still in progress.">RequestWaitResult::Incomplete</a>. </p>
<p>The function returns <a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml#a35e9effb171a9d3efbd0b0fe56a30596ac85a251cc457840f1e032f1b733e9398" title="Indicates that the timeout interval elapsed.">RequestWaitResult::Timeout</a> if the timeoutInMilliseconds interval elapses before returning. </p>
<p>The function returns <a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml#a35e9effb171a9d3efbd0b0fe56a30596a004bf12711c355f9f61e09f12466c416" title="The wait was interrupted by an I/O completion routine or APC.">RequestWaitResult::IoCompletion</a> if the wait was interrupted by an I/O completion routine or APC. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">alertableWait</td><td>If this parameter is true and the calling thread is in the waiting state, the function returns when the system queues an I/O completion routine or APC. The calling thread then runs the routine or function. Otherwise, the function does not return, and the completion routine or APC function is not executed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The result of the wait operation. </dd></dl>

</div>
</div>
<a id="a812131aeed21753c0589a17c228b44b4" name="a812131aeed21753c0589a17c228b44b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a812131aeed21753c0589a17c228b44b4">&#9670;&#160;</a></span>Wait() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::IO::Request::Wait </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a> *</td>          <td class="paramname"><span class="paramname"><em>numberOfBytesTransferred</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a></td>          <td class="paramname"><span class="paramname"><em>timeoutInMilliseconds</em></span><span class="paramdefsep"> = </span><span class="paramdefval">INFINITE</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wait for the completion of this asynchronous request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">numberOfBytesTransferred</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>A pointer to a variable that receives the number of bytes that were actually transferred by a read or write operation. </p>
<p>For a TransactNamedPipe operation, this is the number of bytes that were read from the pipe. For a DeviceIoControl operation, this is the number of bytes of output data returned by the device driver. For a ConnectNamedPipe or WaitCommEvent operation, this value is undefined. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeoutInMilliseconds</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>The time-out interval, in milliseconds. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the wait succeeded, otherwise false. </dd></dl>

</div>
</div>
<a id="a477652f9be29fa79cd0afc77f5e177d8" name="a477652f9be29fa79cd0afc77f5e177d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a477652f9be29fa79cd0afc77f5e177d8">&#9670;&#160;</a></span>Wait() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::IO::Request::Wait </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a9633dfa5c015d8773e20d1aa6035a966">UInt32</a></td>          <td class="paramname"><span class="paramname"><em>timeoutInMilliseconds</em></span><span class="paramdefsep"> = </span><span class="paramdefval">INFINITE</span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wait for the completion of this asynchronous request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeoutInMilliseconds</td><td></td></tr>
  </table>
  </dd>
</dl>
<p>The time-out interval, in milliseconds. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the wait succeeded, otherwise false. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a45262b7780b4d5d18392751b86993876" name="a45262b7780b4d5d18392751b86993876"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45262b7780b4d5d18392751b86993876">&#9670;&#160;</a></span>context_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::weak_ptr&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_context.xhtml">Context</a>&gt; Harlinn::Common::Core::IO::Request::context_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a0095780adbbf1df1c7910566c5482f" name="a8a0095780adbbf1df1c7910566c5482f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a0095780adbbf1df1c7910566c5482f">&#9670;&#160;</a></span>handle_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">HANDLE Harlinn::Common::Core::IO::Request::handle_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1795dcff3d06e4b61578dc7fce4fb477" name="a1795dcff3d06e4b61578dc7fce4fb477"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1795dcff3d06e4b61578dc7fce4fb477">&#9670;&#160;</a></span>ownsEvent_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::IO::Request::ownsEvent_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_c_c_i_o_request_8h.xhtml">HCCIORequest.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_i_o.xhtml">IO</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_i_o_1_1_request.xhtml">Request</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

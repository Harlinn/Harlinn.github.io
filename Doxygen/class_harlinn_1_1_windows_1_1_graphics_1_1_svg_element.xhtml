<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Windows::Graphics::SvgElement Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Windows::Graphics::SvgElement Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;HWGraphics.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Windows::Graphics::SvgElement:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element__inherit__graph.svg" width="194" height="227"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Harlinn::Windows::Graphics::SvgElement:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element__coll__graph.svg" width="194" height="227"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9b8180f509fc49eb0bade0939b0b00ce" id="r_a9b8180f509fc49eb0bade0939b0b00ce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9b8180f509fc49eb0bade0939b0b00ce">GetDocument</a> (ID2D1SvgDocument **document) const</td></tr>
<tr class="memdesc:a9b8180f509fc49eb0bade0939b0b00ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the document that contains this element. Returns null if the element has been removed from the tree.  <br /></td></tr>
<tr class="separator:a9b8180f509fc49eb0bade0939b0b00ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03c74db44e3dffb67e78ea0bdd9299de" id="r_a03c74db44e3dffb67e78ea0bdd9299de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_document.xhtml">SvgDocument</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a03c74db44e3dffb67e78ea0bdd9299de">GetDocument</a> () const</td></tr>
<tr class="separator:a03c74db44e3dffb67e78ea0bdd9299de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53ab212dafe89a6b910587769766e993" id="r_a53ab212dafe89a6b910587769766e993"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a53ab212dafe89a6b910587769766e993">GetTagName</a> (PWSTR name, UINT32 nameCount) const</td></tr>
<tr class="memdesc:a53ab212dafe89a6b910587769766e993"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the tag name.  <br /></td></tr>
<tr class="separator:a53ab212dafe89a6b910587769766e993"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030d02db464f5b3313844a8c6dc221f3" id="r_a030d02db464f5b3313844a8c6dc221f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a030d02db464f5b3313844a8c6dc221f3">GetTagName</a> () const</td></tr>
<tr class="separator:a030d02db464f5b3313844a8c6dc221f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae83ac66d56abf8555c663007f65c6fca" id="r_ae83ac66d56abf8555c663007f65c6fca"><td class="memItemLeft" align="right" valign="top">UINT32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae83ac66d56abf8555c663007f65c6fca">GetTagNameLength</a> () const</td></tr>
<tr class="memdesc:ae83ac66d56abf8555c663007f65c6fca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the string length of the tag name. The returned string length does not include room for the null terminator.  <br /></td></tr>
<tr class="separator:ae83ac66d56abf8555c663007f65c6fca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24b0fb33c7a52c2dc21152ee7c391c2d" id="r_a24b0fb33c7a52c2dc21152ee7c391c2d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a24b0fb33c7a52c2dc21152ee7c391c2d">IsTextContent</a> () const</td></tr>
<tr class="memdesc:a24b0fb33c7a52c2dc21152ee7c391c2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns TRUE if this element represents text content, e.g. the content of a 'title' or 'desc' element. Text content does not have a tag name.  <br /></td></tr>
<tr class="separator:a24b0fb33c7a52c2dc21152ee7c391c2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb19aa05a8c49756c550aa886c396c0" id="r_abeb19aa05a8c49756c550aa886c396c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abeb19aa05a8c49756c550aa886c396c0">GetParent</a> (ID2D1SvgElement **parent) const</td></tr>
<tr class="memdesc:abeb19aa05a8c49756c550aa886c396c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the parent element.  <br /></td></tr>
<tr class="separator:abeb19aa05a8c49756c550aa886c396c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addee42cf07fc655f16d4e43e85f9f4f5" id="r_addee42cf07fc655f16d4e43e85f9f4f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#addee42cf07fc655f16d4e43e85f9f4f5">GetParent</a> () const</td></tr>
<tr class="separator:addee42cf07fc655f16d4e43e85f9f4f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e503529940f60cd3397af1ea8090520" id="r_a0e503529940f60cd3397af1ea8090520"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0e503529940f60cd3397af1ea8090520">HasChildren</a> () const</td></tr>
<tr class="memdesc:a0e503529940f60cd3397af1ea8090520"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this element has children.  <br /></td></tr>
<tr class="separator:a0e503529940f60cd3397af1ea8090520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8957adebe48f7c8dbcf61db805a174e5" id="r_a8957adebe48f7c8dbcf61db805a174e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8957adebe48f7c8dbcf61db805a174e5">GetFirstChild</a> (ID2D1SvgElement **child) const</td></tr>
<tr class="memdesc:a8957adebe48f7c8dbcf61db805a174e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the first child of this element.  <br /></td></tr>
<tr class="separator:a8957adebe48f7c8dbcf61db805a174e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab37e750bf5caec294614e579b93cbe61" id="r_ab37e750bf5caec294614e579b93cbe61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab37e750bf5caec294614e579b93cbe61">GetFirstChild</a> () const</td></tr>
<tr class="separator:ab37e750bf5caec294614e579b93cbe61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ebec440ba13474924077e2338b2f0c2" id="r_a0ebec440ba13474924077e2338b2f0c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0ebec440ba13474924077e2338b2f0c2">GetLastChild</a> (ID2D1SvgElement **child) const</td></tr>
<tr class="memdesc:a0ebec440ba13474924077e2338b2f0c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the last child of this element.  <br /></td></tr>
<tr class="separator:a0ebec440ba13474924077e2338b2f0c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab37c7bd2c4652ad861c8ce99f89c563" id="r_aab37c7bd2c4652ad861c8ce99f89c563"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aab37c7bd2c4652ad861c8ce99f89c563">GetLastChild</a> () const</td></tr>
<tr class="separator:aab37c7bd2c4652ad861c8ce99f89c563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432acdc2e093550fc8c100707307233c" id="r_a432acdc2e093550fc8c100707307233c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a432acdc2e093550fc8c100707307233c">GetPreviousChild</a> (_In_ ID2D1SvgElement *referenceChild, ID2D1SvgElement **previousChild) const</td></tr>
<tr class="memdesc:a432acdc2e093550fc8c100707307233c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the previous sibling of the referenceChild element.  <br /></td></tr>
<tr class="separator:a432acdc2e093550fc8c100707307233c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7b62a57148d3d3380cd91a917bbba34" id="r_ad7b62a57148d3d3380cd91a917bbba34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad7b62a57148d3d3380cd91a917bbba34">GetPreviousChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;referenceChild, ID2D1SvgElement **previousChild) const</td></tr>
<tr class="separator:ad7b62a57148d3d3380cd91a917bbba34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ff13375fb29dbc350f1e22329cfaeb" id="r_ac6ff13375fb29dbc350f1e22329cfaeb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac6ff13375fb29dbc350f1e22329cfaeb">GetPreviousChild</a> (_In_ ID2D1SvgElement *referenceChild) const</td></tr>
<tr class="separator:ac6ff13375fb29dbc350f1e22329cfaeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae4a64cf15fb169ff06a491769a1c9bb" id="r_aae4a64cf15fb169ff06a491769a1c9bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aae4a64cf15fb169ff06a491769a1c9bb">GetPreviousChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;referenceChild) const</td></tr>
<tr class="separator:aae4a64cf15fb169ff06a491769a1c9bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5509c04cd40455d5be4f7d300426f7" id="r_acc5509c04cd40455d5be4f7d300426f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acc5509c04cd40455d5be4f7d300426f7">GetNextChild</a> (_In_ ID2D1SvgElement *referenceChild, ID2D1SvgElement **nextChild) const</td></tr>
<tr class="memdesc:acc5509c04cd40455d5be4f7d300426f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the next sibling of the referenceChild element.  <br /></td></tr>
<tr class="separator:acc5509c04cd40455d5be4f7d300426f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cd0cd30a1e0378658973aa78fa05dac" id="r_a6cd0cd30a1e0378658973aa78fa05dac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6cd0cd30a1e0378658973aa78fa05dac">GetNextChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;referenceChild, ID2D1SvgElement **nextChild) const</td></tr>
<tr class="separator:a6cd0cd30a1e0378658973aa78fa05dac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94891607fc3f9c902f34147ea7effe9a" id="r_a94891607fc3f9c902f34147ea7effe9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a94891607fc3f9c902f34147ea7effe9a">GetNextChild</a> (_In_ ID2D1SvgElement *referenceChild) const</td></tr>
<tr class="separator:a94891607fc3f9c902f34147ea7effe9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669a1594766cdee9767d2528d042e933" id="r_a669a1594766cdee9767d2528d042e933"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a669a1594766cdee9767d2528d042e933">GetNextChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;referenceChild) const</td></tr>
<tr class="separator:a669a1594766cdee9767d2528d042e933"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7a6f0ad2de67a599503e47355ef68c1" id="r_ac7a6f0ad2de67a599503e47355ef68c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac7a6f0ad2de67a599503e47355ef68c1">InsertChildBefore</a> (_In_ ID2D1SvgElement *newChild, _In_opt_ ID2D1SvgElement *referenceChild=nullptr) const</td></tr>
<tr class="memdesc:ac7a6f0ad2de67a599503e47355ef68c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts newChild as a child of this element, before the referenceChild element. If the newChild element already has a parent, it is removed from this parent as part of the insertion. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element.  <br /></td></tr>
<tr class="separator:ac7a6f0ad2de67a599503e47355ef68c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb2e07114b91b7e1284baf34eee3267" id="r_a5fb2e07114b91b7e1284baf34eee3267"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5fb2e07114b91b7e1284baf34eee3267">InsertChildBefore</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;newChild, _In_opt_ ID2D1SvgElement *referenceChild=nullptr) const</td></tr>
<tr class="separator:a5fb2e07114b91b7e1284baf34eee3267"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a717ca017a411f8dac0712de7aff332c4" id="r_a717ca017a411f8dac0712de7aff332c4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a717ca017a411f8dac0712de7aff332c4">InsertChildBefore</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;newChild, const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;referenceChild) const</td></tr>
<tr class="separator:a717ca017a411f8dac0712de7aff332c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04a07411e90fce85d5e8755f85bbbad8" id="r_a04a07411e90fce85d5e8755f85bbbad8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a04a07411e90fce85d5e8755f85bbbad8">AppendChild</a> (_In_ ID2D1SvgElement *newChild) const</td></tr>
<tr class="memdesc:a04a07411e90fce85d5e8755f85bbbad8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends newChild to the list of children. If the newChild element already has a parent, it is removed from this parent as part of the append operation. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element.  <br /></td></tr>
<tr class="separator:a04a07411e90fce85d5e8755f85bbbad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add9c1786bfe6687b2d928faa04b4e802" id="r_add9c1786bfe6687b2d928faa04b4e802"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#add9c1786bfe6687b2d928faa04b4e802">AppendChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;newChild) const</td></tr>
<tr class="separator:add9c1786bfe6687b2d928faa04b4e802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68df915bad49318a715d368a2392c5cc" id="r_a68df915bad49318a715d368a2392c5cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a68df915bad49318a715d368a2392c5cc">ReplaceChild</a> (_In_ ID2D1SvgElement *newChild, _In_ ID2D1SvgElement *oldChild) const</td></tr>
<tr class="memdesc:a68df915bad49318a715d368a2392c5cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the oldChild element with the newChild. This operation removes the oldChild from the tree. If the newChild element already has a parent, it is removed from this parent as part of the replace operation. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element.  <br /></td></tr>
<tr class="separator:a68df915bad49318a715d368a2392c5cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335dd62e76b29e174c53c529360a49e9" id="r_a335dd62e76b29e174c53c529360a49e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a335dd62e76b29e174c53c529360a49e9">ReplaceChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;newChild, _In_ ID2D1SvgElement *oldChild) const</td></tr>
<tr class="separator:a335dd62e76b29e174c53c529360a49e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75a40c0bb662ecd2757b510c725c0618" id="r_a75a40c0bb662ecd2757b510c725c0618"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a75a40c0bb662ecd2757b510c725c0618">ReplaceChild</a> (_In_ ID2D1SvgElement *newChild, const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;oldChild) const</td></tr>
<tr class="separator:a75a40c0bb662ecd2757b510c725c0618"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab722467dbc3575776375faa163fc0aa3" id="r_ab722467dbc3575776375faa163fc0aa3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab722467dbc3575776375faa163fc0aa3">ReplaceChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;newChild, const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;oldChild) const</td></tr>
<tr class="separator:ab722467dbc3575776375faa163fc0aa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cb0b0ab32ca0c705a8c3327744c8ca4" id="r_a8cb0b0ab32ca0c705a8c3327744c8ca4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8cb0b0ab32ca0c705a8c3327744c8ca4">RemoveChild</a> (_In_ ID2D1SvgElement *oldChild) const</td></tr>
<tr class="memdesc:a8cb0b0ab32ca0c705a8c3327744c8ca4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the oldChild from the tree. Children of oldChild remain children of oldChild.  <br /></td></tr>
<tr class="separator:a8cb0b0ab32ca0c705a8c3327744c8ca4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac97d4a96ad8d05c09dd04ceb84a586e0" id="r_ac97d4a96ad8d05c09dd04ceb84a586e0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac97d4a96ad8d05c09dd04ceb84a586e0">RemoveChild</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;oldChild) const</td></tr>
<tr class="separator:ac97d4a96ad8d05c09dd04ceb84a586e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1af59fd27559f0f7fffb2ede044d3296" id="r_a1af59fd27559f0f7fffb2ede044d3296"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1af59fd27559f0f7fffb2ede044d3296">CreateChild</a> (_In_ PCWSTR tagName, ID2D1SvgElement **newChild) const</td></tr>
<tr class="memdesc:a1af59fd27559f0f7fffb2ede044d3296"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an element from a tag name. The element is appended to the list of children. Returns an error if this element cannot accept children of the specified type.  <br /></td></tr>
<tr class="separator:a1af59fd27559f0f7fffb2ede044d3296"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a9931eb030859801471a20e7d14de6c" id="r_a2a9931eb030859801471a20e7d14de6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2a9931eb030859801471a20e7d14de6c">CreateChild</a> (_In_ PCWSTR tagName) const</td></tr>
<tr class="separator:a2a9931eb030859801471a20e7d14de6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5daaebfc8a12160e8f75ccee9d6468a6" id="r_a5daaebfc8a12160e8f75ccee9d6468a6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5daaebfc8a12160e8f75ccee9d6468a6">IsAttributeSpecified</a> (_In_ PCWSTR name, <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *inherited=NULL) const</td></tr>
<tr class="memdesc:a5daaebfc8a12160e8f75ccee9d6468a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the attribute is explicitly set on the element or if it is present within an inline style. Returns FALSE if the attribute is not a valid attribute on this element.  <br /></td></tr>
<tr class="separator:a5daaebfc8a12160e8f75ccee9d6468a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcc9323942f0383a13c162d44c2ae83c" id="r_afcc9323942f0383a13c162d44c2ae83c"><td class="memItemLeft" align="right" valign="top">UINT32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afcc9323942f0383a13c162d44c2ae83c">GetSpecifiedAttributeCount</a> () const</td></tr>
<tr class="memdesc:afcc9323942f0383a13c162d44c2ae83c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of specified attributes on this element. Attributes are only considered specified if they are explicitly set on the element or present within an inline style. <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_properties.xhtml" title="Represents a set of run-time bindable and discoverable properties that allow a data-driven applicatio...">Properties</a> that receive their value through CSS inheritance are not considered specified. An attribute can become specified if it is set through a method call. It can become unspecified if it is removed via RemoveAttribute.  <br /></td></tr>
<tr class="separator:afcc9323942f0383a13c162d44c2ae83c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad81d5c27daa529df12d5481d3450f076" id="r_ad81d5c27daa529df12d5481d3450f076"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad81d5c27daa529df12d5481d3450f076">GetSpecifiedAttributeName</a> (UINT32 index, PWSTR name, UINT32 nameCount, _Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *inherited=nullptr) const</td></tr>
<tr class="memdesc:ad81d5c27daa529df12d5481d3450f076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the name of the specified attribute at the given index.  <br /></td></tr>
<tr class="separator:ad81d5c27daa529df12d5481d3450f076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bf27ee81c5922ff45c2db26c64ddb68" id="r_a2bf27ee81c5922ff45c2db26c64ddb68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2bf27ee81c5922ff45c2db26c64ddb68">GetSpecifiedAttributeName</a> (UINT32 index, _Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *inherited=nullptr) const</td></tr>
<tr class="separator:a2bf27ee81c5922ff45c2db26c64ddb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c4c62386380805b97435f169c6337fc" id="r_a8c4c62386380805b97435f169c6337fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8c4c62386380805b97435f169c6337fc">GetSpecifiedAttributeNameLength</a> (UINT32 index, _Out_ UINT32 *nameLength, _Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *inherited=nullptr) const</td></tr>
<tr class="memdesc:a8c4c62386380805b97435f169c6337fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the string length of the name of the specified attribute at the given index. The output string length does not include room for the null terminator.  <br /></td></tr>
<tr class="separator:a8c4c62386380805b97435f169c6337fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d08fd41ce854cdb5e4ba45c3502aa4" id="r_a24d08fd41ce854cdb5e4ba45c3502aa4"><td class="memItemLeft" align="right" valign="top">UINT32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a24d08fd41ce854cdb5e4ba45c3502aa4">GetSpecifiedAttributeNameLength</a> (UINT32 index, _Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *inherited=nullptr) const</td></tr>
<tr class="separator:a24d08fd41ce854cdb5e4ba45c3502aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a4a224c7ef2b3137916fbf97dccae82" id="r_a8a4a224c7ef2b3137916fbf97dccae82"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8a4a224c7ef2b3137916fbf97dccae82">RemoveAttribute</a> (_In_ PCWSTR name) const</td></tr>
<tr class="memdesc:a8a4a224c7ef2b3137916fbf97dccae82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the attribute from this element. Also removes this attribute from within an inline style if present. Returns an error if the attribute name is not valid on this element.  <br /></td></tr>
<tr class="separator:a8a4a224c7ef2b3137916fbf97dccae82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4856b6ea2b749d293fd3f2dba717dd6e" id="r_a4856b6ea2b749d293fd3f2dba717dd6e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4856b6ea2b749d293fd3f2dba717dd6e">SetTextValue</a> (const WCHAR *value, UINT32 valueCount) const</td></tr>
<tr class="memdesc:a4856b6ea2b749d293fd3f2dba717dd6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the value of a text content element.  <br /></td></tr>
<tr class="separator:a4856b6ea2b749d293fd3f2dba717dd6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5b71bf05cdbcd4b29998d88f924d5bd" id="r_ac5b71bf05cdbcd4b29998d88f924d5bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac5b71bf05cdbcd4b29998d88f924d5bd">SetTextValue</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> &amp;value) const</td></tr>
<tr class="separator:ac5b71bf05cdbcd4b29998d88f924d5bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bdf272b294af5dc773014e6eb8d676f" id="r_a8bdf272b294af5dc773014e6eb8d676f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8bdf272b294af5dc773014e6eb8d676f">SetTextValue</a> (const std::wstring_view &amp;value) const</td></tr>
<tr class="separator:a8bdf272b294af5dc773014e6eb8d676f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2acd198860a9889f158c25a4bf0dcbd" id="r_af2acd198860a9889f158c25a4bf0dcbd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af2acd198860a9889f158c25a4bf0dcbd">GetTextValue</a> (PWSTR value, UINT32 valueCount) const</td></tr>
<tr class="memdesc:af2acd198860a9889f158c25a4bf0dcbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the value of a text content element.  <br /></td></tr>
<tr class="separator:af2acd198860a9889f158c25a4bf0dcbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e8dece9505751dd184e94fe55a873e" id="r_a38e8dece9505751dd184e94fe55a873e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a38e8dece9505751dd184e94fe55a873e">GetTextValue</a> () const</td></tr>
<tr class="separator:a38e8dece9505751dd184e94fe55a873e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83ff04cf68a52c360b3b8e833afefe24" id="r_a83ff04cf68a52c360b3b8e833afefe24"><td class="memItemLeft" align="right" valign="top">UINT32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a83ff04cf68a52c360b3b8e833afefe24">GetTextValueLength</a> () const</td></tr>
<tr class="memdesc:a83ff04cf68a52c360b3b8e833afefe24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the length of the text content value. The returned string length does not include room for the null terminator.  <br /></td></tr>
<tr class="separator:a83ff04cf68a52c360b3b8e833afefe24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1cb542f86ac2ea7dd80c38019cdc7f8" id="r_ad1cb542f86ac2ea7dd80c38019cdc7f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad1cb542f86ac2ea7dd80c38019cdc7f8">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, _In_ PCWSTR value) const</td></tr>
<tr class="memdesc:ad1cb542f86ac2ea7dd80c38019cdc7f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element using a string. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified type.  <br /></td></tr>
<tr class="separator:ad1cb542f86ac2ea7dd80c38019cdc7f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af92f54a870f8b23900b77aa3acd9e621" id="r_af92f54a870f8b23900b77aa3acd9e621"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af92f54a870f8b23900b77aa3acd9e621">GetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, PWSTR value, UINT32 valueCount) const</td></tr>
<tr class="memdesc:af92f54a870f8b23900b77aa3acd9e621"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a string. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified string type.  <br /></td></tr>
<tr class="separator:af92f54a870f8b23900b77aa3acd9e621"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d273cf53257a43d7b8308d9045a70c8" id="r_a4d273cf53257a43d7b8308d9045a70c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4d273cf53257a43d7b8308d9045a70c8">GetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type=D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG) const</td></tr>
<tr class="separator:a4d273cf53257a43d7b8308d9045a70c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65f170a9a82163e5530311fa6947b6a1" id="r_a65f170a9a82163e5530311fa6947b6a1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a65f170a9a82163e5530311fa6947b6a1">GetAttributeValueLength</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, _Out_ UINT32 *valueLength) const</td></tr>
<tr class="memdesc:a65f170a9a82163e5530311fa6947b6a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the string length of an attribute of this element. The returned string length does not include room for the null terminator. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified string type.  <br /></td></tr>
<tr class="separator:a65f170a9a82163e5530311fa6947b6a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a197903bde6d9f5710aaabe8e7bbc7952" id="r_a197903bde6d9f5710aaabe8e7bbc7952"><td class="memItemLeft" align="right" valign="top">UINT32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a197903bde6d9f5710aaabe8e7bbc7952">GetAttributeValueLength</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type) const</td></tr>
<tr class="separator:a197903bde6d9f5710aaabe8e7bbc7952"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac50437be2096f7b7818ac2cba742afa9" id="r_ac50437be2096f7b7818ac2cba742afa9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac50437be2096f7b7818ac2cba742afa9">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_POD_TYPE type, const void *value, UINT32 valueSizeInBytes) const</td></tr>
<tr class="memdesc:ac50437be2096f7b7818ac2cba742afa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element using a POD type. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified type.  <br /></td></tr>
<tr class="separator:ac50437be2096f7b7818ac2cba742afa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeff537d5bfdde664fcfee82b5f28ed3b" id="r_aeff537d5bfdde664fcfee82b5f28ed3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aeff537d5bfdde664fcfee82b5f28ed3b">GetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_ATTRIBUTE_POD_TYPE type, void *value, UINT32 valueSizeInBytes) const</td></tr>
<tr class="memdesc:aeff537d5bfdde664fcfee82b5f28ed3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a POD type. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified POD type.  <br /></td></tr>
<tr class="separator:aeff537d5bfdde664fcfee82b5f28ed3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea57d74a7f1ef6818e120b77a95382b6" id="r_aea57d74a7f1ef6818e120b77a95382b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aea57d74a7f1ef6818e120b77a95382b6">SetAttributeValue</a> (_In_ PCWSTR name, _In_ ID2D1SvgAttribute *value) const</td></tr>
<tr class="memdesc:aea57d74a7f1ef6818e120b77a95382b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element using an interface. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified interface type. Returns an error if the attribute object is already set on an element. A given attribute object may only be set on one element in one attribute location at a time.  <br /></td></tr>
<tr class="separator:aea57d74a7f1ef6818e120b77a95382b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09fa03efd84199711bc260fe23eee2d6" id="r_a09fa03efd84199711bc260fe23eee2d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a09fa03efd84199711bc260fe23eee2d6">GetAttributeValue</a> (_In_ PCWSTR name, _In_ REFIID riid, void **value) const</td></tr>
<tr class="memdesc:a09fa03efd84199711bc260fe23eee2d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as an interface type. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified interface type.  <br /></td></tr>
<tr class="separator:a09fa03efd84199711bc260fe23eee2d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fc0b8614b2b4ad4f8844661600600b1" id="r_a9fc0b8614b2b4ad4f8844661600600b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9fc0b8614b2b4ad4f8844661600600b1">SetAttributeValue</a> (_In_ PCWSTR name, FLOAT value) const</td></tr>
<tr class="memdesc:a9fc0b8614b2b4ad4f8844661600600b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element using a float.  <br /></td></tr>
<tr class="separator:a9fc0b8614b2b4ad4f8844661600600b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a606ae4f65755dcdbfe93b55070e9d728" id="r_a606ae4f65755dcdbfe93b55070e9d728"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a606ae4f65755dcdbfe93b55070e9d728">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ FLOAT *value) const</td></tr>
<tr class="memdesc:a606ae4f65755dcdbfe93b55070e9d728"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a float.  <br /></td></tr>
<tr class="separator:a606ae4f65755dcdbfe93b55070e9d728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a850f6eb5fc8b8107c1fed2fbbb295f00" id="r_a850f6eb5fc8b8107c1fed2fbbb295f00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a850f6eb5fc8b8107c1fed2fbbb295f00">SetAttributeValue</a> (_In_ PCWSTR name, CONST D2D1_COLOR_F &amp;value) const</td></tr>
<tr class="memdesc:a850f6eb5fc8b8107c1fed2fbbb295f00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a color.  <br /></td></tr>
<tr class="separator:a850f6eb5fc8b8107c1fed2fbbb295f00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeab0e91bdc9050cc476696f2b746c052" id="r_aeab0e91bdc9050cc476696f2b746c052"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aeab0e91bdc9050cc476696f2b746c052">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_COLOR_F *value) const</td></tr>
<tr class="memdesc:aeab0e91bdc9050cc476696f2b746c052"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a color.  <br /></td></tr>
<tr class="separator:aeab0e91bdc9050cc476696f2b746c052"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a7d68de2c455ca0a6855f0ba0fcd54b" id="r_a3a7d68de2c455ca0a6855f0ba0fcd54b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3a7d68de2c455ca0a6855f0ba0fcd54b">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_FILL_MODE value) const</td></tr>
<tr class="memdesc:a3a7d68de2c455ca0a6855f0ba0fcd54b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a fill mode. This method can be used to set the value of the 'fill-rule' or 'clip-rule' properties.  <br /></td></tr>
<tr class="separator:a3a7d68de2c455ca0a6855f0ba0fcd54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d45d75c4abf436c10e8ccdd0e6d28a5" id="r_a8d45d75c4abf436c10e8ccdd0e6d28a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8d45d75c4abf436c10e8ccdd0e6d28a5">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_FILL_MODE *value) const</td></tr>
<tr class="memdesc:a8d45d75c4abf436c10e8ccdd0e6d28a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a fill mode. This method can be used to get the value of the 'fill-rule' or 'clip-rule' properties.  <br /></td></tr>
<tr class="separator:a8d45d75c4abf436c10e8ccdd0e6d28a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaa83c8dab82a25d9e74ede31b6abeb9" id="r_adaa83c8dab82a25d9e74ede31b6abeb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adaa83c8dab82a25d9e74ede31b6abeb9">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_DISPLAY value) const</td></tr>
<tr class="memdesc:adaa83c8dab82a25d9e74ede31b6abeb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a display value. This method can be used to set the value of the 'display' property.  <br /></td></tr>
<tr class="separator:adaa83c8dab82a25d9e74ede31b6abeb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f49688b5430237530087325532e8fd0" id="r_a7f49688b5430237530087325532e8fd0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f49688b5430237530087325532e8fd0">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_DISPLAY *value) const</td></tr>
<tr class="memdesc:a7f49688b5430237530087325532e8fd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a display value. This method can be used to get the value of the 'display' property.  <br /></td></tr>
<tr class="separator:a7f49688b5430237530087325532e8fd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb434f148d295bf1fa5b9ce517aeac1e" id="r_afb434f148d295bf1fa5b9ce517aeac1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afb434f148d295bf1fa5b9ce517aeac1e">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_OVERFLOW value) const</td></tr>
<tr class="memdesc:afb434f148d295bf1fa5b9ce517aeac1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as an overflow value. This method can be used to set the value of the 'overflow' property.  <br /></td></tr>
<tr class="separator:afb434f148d295bf1fa5b9ce517aeac1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a410de2798c874decacb5361b653c3b3c" id="r_a410de2798c874decacb5361b653c3b3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a410de2798c874decacb5361b653c3b3c">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_OVERFLOW *value) const</td></tr>
<tr class="memdesc:a410de2798c874decacb5361b653c3b3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as an overflow value. This method can be used to get the value of the 'overflow' property.  <br /></td></tr>
<tr class="separator:a410de2798c874decacb5361b653c3b3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8c8a8d4e40d848186ee015e567faaea" id="r_ad8c8a8d4e40d848186ee015e567faaea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad8c8a8d4e40d848186ee015e567faaea">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_LINE_JOIN value) const</td></tr>
<tr class="memdesc:ad8c8a8d4e40d848186ee015e567faaea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a line join value. This method can be used to set the value of the 'stroke-linejoin' property.  <br /></td></tr>
<tr class="separator:ad8c8a8d4e40d848186ee015e567faaea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0939d8e9cac4f7c6b4740b4d4ef3612a" id="r_a0939d8e9cac4f7c6b4740b4d4ef3612a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0939d8e9cac4f7c6b4740b4d4ef3612a">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_LINE_JOIN *value) const</td></tr>
<tr class="memdesc:a0939d8e9cac4f7c6b4740b4d4ef3612a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a line join value. This method can be used to get the value of the 'stroke-linejoin' property.  <br /></td></tr>
<tr class="separator:a0939d8e9cac4f7c6b4740b4d4ef3612a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9769e622e8feeaf08eb9b7b47d3b6a34" id="r_a9769e622e8feeaf08eb9b7b47d3b6a34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9769e622e8feeaf08eb9b7b47d3b6a34">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_LINE_CAP value) const</td></tr>
<tr class="memdesc:a9769e622e8feeaf08eb9b7b47d3b6a34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a line cap value. This method can be used to set the value of the 'stroke-linecap' property.  <br /></td></tr>
<tr class="separator:a9769e622e8feeaf08eb9b7b47d3b6a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c681162a4f04a04ea3eb6092d2408c1" id="r_a5c681162a4f04a04ea3eb6092d2408c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5c681162a4f04a04ea3eb6092d2408c1">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_LINE_CAP *value) const</td></tr>
<tr class="memdesc:a5c681162a4f04a04ea3eb6092d2408c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a line cap value. This method can be used to get the value of the 'stroke-linecap' property.  <br /></td></tr>
<tr class="separator:a5c681162a4f04a04ea3eb6092d2408c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb729dc6994da20b4daeb7a4e45a5c5a" id="r_acb729dc6994da20b4daeb7a4e45a5c5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acb729dc6994da20b4daeb7a4e45a5c5a">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_VISIBILITY value) const</td></tr>
<tr class="memdesc:acb729dc6994da20b4daeb7a4e45a5c5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a visibility value. This method can be used to set the value of the 'visibility' property.  <br /></td></tr>
<tr class="separator:acb729dc6994da20b4daeb7a4e45a5c5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26f0e4448a3054d4fe20205a89bae5ea" id="r_a26f0e4448a3054d4fe20205a89bae5ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a26f0e4448a3054d4fe20205a89bae5ea">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_VISIBILITY *value) const</td></tr>
<tr class="memdesc:a26f0e4448a3054d4fe20205a89bae5ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a visibility value. This method can be used to get the value of the 'visibility' property.  <br /></td></tr>
<tr class="separator:a26f0e4448a3054d4fe20205a89bae5ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c530a006d790e3bd2884f6649529200" id="r_a1c530a006d790e3bd2884f6649529200"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1c530a006d790e3bd2884f6649529200">SetAttributeValue</a> (_In_ PCWSTR name, const D2D1_MATRIX_3X2_F &amp;value)</td></tr>
<tr class="memdesc:a1c530a006d790e3bd2884f6649529200"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a matrix value. This method can be used to set the value of a 'transform' or 'gradientTransform' attribute.  <br /></td></tr>
<tr class="separator:a1c530a006d790e3bd2884f6649529200"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfbb5b66f02b4c57023643587625b03c" id="r_abfbb5b66f02b4c57023643587625b03c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abfbb5b66f02b4c57023643587625b03c">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_MATRIX_3X2_F *value) const</td></tr>
<tr class="memdesc:abfbb5b66f02b4c57023643587625b03c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a matrix value. This method can be used to get the value of a 'transform' or 'gradientTransform' attribute.  <br /></td></tr>
<tr class="separator:abfbb5b66f02b4c57023643587625b03c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23894082a65981e049b9ef208dc9b818" id="r_a23894082a65981e049b9ef208dc9b818"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a23894082a65981e049b9ef208dc9b818">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_SVG_UNIT_TYPE value) const</td></tr>
<tr class="memdesc:a23894082a65981e049b9ef208dc9b818"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a unit type value. This method can be used to set the value of a 'gradientUnits' or 'clipPathUnits' attribute.  <br /></td></tr>
<tr class="separator:a23894082a65981e049b9ef208dc9b818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e8ef2cd387cbf366f54e0580f11b86b" id="r_a3e8ef2cd387cbf366f54e0580f11b86b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3e8ef2cd387cbf366f54e0580f11b86b">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_UNIT_TYPE *value) const</td></tr>
<tr class="memdesc:a3e8ef2cd387cbf366f54e0580f11b86b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a unit type value. This method can be used to get the value of a 'gradientUnits' or 'clipPathUnits' attribute.  <br /></td></tr>
<tr class="separator:a3e8ef2cd387cbf366f54e0580f11b86b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb0b41f58347c98d5c6bdb162e977022" id="r_acb0b41f58347c98d5c6bdb162e977022"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acb0b41f58347c98d5c6bdb162e977022">SetAttributeValue</a> (_In_ PCWSTR name, D2D1_EXTEND_MODE value) const</td></tr>
<tr class="memdesc:acb0b41f58347c98d5c6bdb162e977022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as an extend mode value. This method can be used to set the value of a 'spreadMethod' attribute.  <br /></td></tr>
<tr class="separator:acb0b41f58347c98d5c6bdb162e977022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b68dcc581676b18c0df7a472675f58" id="r_a07b68dcc581676b18c0df7a472675f58"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a07b68dcc581676b18c0df7a472675f58">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_EXTEND_MODE *value) const</td></tr>
<tr class="memdesc:a07b68dcc581676b18c0df7a472675f58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a extend mode value. This method can be used to get the value of a 'spreadMethod' attribute.  <br /></td></tr>
<tr class="separator:a07b68dcc581676b18c0df7a472675f58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87f6b1e42b5b0688cc2226919b8ec1df" id="r_a87f6b1e42b5b0688cc2226919b8ec1df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a87f6b1e42b5b0688cc2226919b8ec1df">SetAttributeValue</a> (_In_ PCWSTR name, CONST D2D1_SVG_PRESERVE_ASPECT_RATIO &amp;value) const</td></tr>
<tr class="memdesc:a87f6b1e42b5b0688cc2226919b8ec1df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a preserve aspect ratio value. This method can be used to set the value of a 'preserveAspectRatio' attribute.  <br /></td></tr>
<tr class="separator:a87f6b1e42b5b0688cc2226919b8ec1df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38b157e395d10cd0c1ffdbd47ff0bf9e" id="r_a38b157e395d10cd0c1ffdbd47ff0bf9e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a38b157e395d10cd0c1ffdbd47ff0bf9e">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_PRESERVE_ASPECT_RATIO *value) const</td></tr>
<tr class="memdesc:a38b157e395d10cd0c1ffdbd47ff0bf9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a preserve aspect ratio value. This method can be used to get the value of a 'preserveAspectRatio' attribute.  <br /></td></tr>
<tr class="separator:a38b157e395d10cd0c1ffdbd47ff0bf9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a622337f08bbef01c3f0355eb5cfcc6" id="r_a4a622337f08bbef01c3f0355eb5cfcc6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4a622337f08bbef01c3f0355eb5cfcc6">SetAttributeValue</a> (_In_ PCWSTR name, const D2D1_SVG_LENGTH &amp;value) const</td></tr>
<tr class="memdesc:a4a622337f08bbef01c3f0355eb5cfcc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an attribute of this element as a length value.  <br /></td></tr>
<tr class="separator:a4a622337f08bbef01c3f0355eb5cfcc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14eb333be2395e462ff1c9c547a6875c" id="r_a14eb333be2395e462ff1c9c547a6875c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a14eb333be2395e462ff1c9c547a6875c">GetAttributeValue</a> (_In_ PCWSTR name, _Out_ D2D1_SVG_LENGTH *value) const</td></tr>
<tr class="memdesc:a14eb333be2395e462ff1c9c547a6875c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as length value.  <br /></td></tr>
<tr class="separator:a14eb333be2395e462ff1c9c547a6875c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad66301b79cf180454f5fe4f93f14c628" id="r_ad66301b79cf180454f5fe4f93f14c628"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad66301b79cf180454f5fe4f93f14c628">GetAttributeValue</a> (_In_ PCWSTR name, ID2D1SvgAttribute **value) const</td></tr>
<tr class="memdesc:ad66301b79cf180454f5fe4f93f14c628"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element.  <br /></td></tr>
<tr class="separator:ad66301b79cf180454f5fe4f93f14c628"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bdc8fae0a1284768ce09f31ccc1c822" id="r_a2bdc8fae0a1284768ce09f31ccc1c822"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2bdc8fae0a1284768ce09f31ccc1c822">GetAttributeValue</a> (_In_ PCWSTR name, ID2D1SvgPaint **value) const</td></tr>
<tr class="memdesc:a2bdc8fae0a1284768ce09f31ccc1c822"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a paint. This method can be used to get the value of the 'fill' or 'stroke' properties.  <br /></td></tr>
<tr class="separator:a2bdc8fae0a1284768ce09f31ccc1c822"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2d444017c1f6990e85e5da92de401e4" id="r_ac2d444017c1f6990e85e5da92de401e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac2d444017c1f6990e85e5da92de401e4">GetAttributeValue</a> (_In_ PCWSTR name, ID2D1SvgStrokeDashArray **value) const</td></tr>
<tr class="memdesc:ac2d444017c1f6990e85e5da92de401e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as a stroke dash array. This method can be used to get the value of the 'stroke-dasharray' property.  <br /></td></tr>
<tr class="separator:ac2d444017c1f6990e85e5da92de401e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a989c671d3d8fb79e1988dc3d4e78ddd3" id="r_a989c671d3d8fb79e1988dc3d4e78ddd3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a989c671d3d8fb79e1988dc3d4e78ddd3">GetAttributeValue</a> (_In_ PCWSTR name, ID2D1SvgPointCollection **value) const</td></tr>
<tr class="memdesc:a989c671d3d8fb79e1988dc3d4e78ddd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as points. This method can be used to get the value of the 'points' attribute on a 'polygon' or 'polyline' element.  <br /></td></tr>
<tr class="separator:a989c671d3d8fb79e1988dc3d4e78ddd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc04fc95cfe52edcce7f84ce4a36c079" id="r_adc04fc95cfe52edcce7f84ce4a36c079"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adc04fc95cfe52edcce7f84ce4a36c079">GetAttributeValue</a> (_In_ PCWSTR name, ID2D1SvgPathData **value) const</td></tr>
<tr class="memdesc:adc04fc95cfe52edcce7f84ce4a36c079"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an attribute of this element as path data. This method can be used to get the value of the 'd' attribute on a 'path' element.  <br /></td></tr>
<tr class="separator:adc04fc95cfe52edcce7f84ce4a36c079"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_harlinn_1_1_windows_1_1_graphics_1_1_resource"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_class_harlinn_1_1_windows_1_1_graphics_1_1_resource')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_resource.xhtml">Harlinn::Windows::Graphics::Resource</a></td></tr>
<tr class="memitem:acf999fe81e3e6291b80ab7bc75f610d1 inherit pub_methods_class_harlinn_1_1_windows_1_1_graphics_1_1_resource" id="r_acf999fe81e3e6291b80ab7bc75f610d1"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ae78a358018b23c0b19e707c580404bcdab9ece18c950afbfa6b0fdbfa4ff731d3">T</a>  = Factory&gt; <br />
requires std::is_base_of_v&lt; <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_factory.xhtml">Factory</a>, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ae78a358018b23c0b19e707c580404bcdab9ece18c950afbfa6b0fdbfa4ff731d3">T</a>&gt;</td></tr>
<tr class="memitem:acf999fe81e3e6291b80ab7bc75f610d1 inherit pub_methods_class_harlinn_1_1_windows_1_1_graphics_1_1_resource"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#ae78a358018b23c0b19e707c580404bcdab9ece18c950afbfa6b0fdbfa4ff731d3">T</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_resource.xhtml#acf999fe81e3e6291b80ab7bc75f610d1">GetFactory</a> ()</td></tr>
<tr class="separator:acf999fe81e3e6291b80ab7bc75f610d1 inherit pub_methods_class_harlinn_1_1_windows_1_1_graphics_1_1_resource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:a78d4334dbb99c84ee4954abdb6d81aac inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a78d4334dbb99c84ee4954abdb6d81aac"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a78d4334dbb99c84ee4954abdb6d81aac">Unknown</a> () noexcept</td></tr>
<tr class="separator:a78d4334dbb99c84ee4954abdb6d81aac inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69f5ff7035196e173687a01e4888796b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a69f5ff7035196e173687a01e4888796b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a69f5ff7035196e173687a01e4888796b">Unknown</a> (IUnknown *unknown, bool addref=false) noexcept</td></tr>
<tr class="separator:a69f5ff7035196e173687a01e4888796b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa320e15ec964b306c01f06c65f991687 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aa320e15ec964b306c01f06c65f991687"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aa320e15ec964b306c01f06c65f991687">Unknown</a> (REFIID iid, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;unknown, bool throwIfNoInterface=true)</td></tr>
<tr class="separator:aa320e15ec964b306c01f06c65f991687 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8f6ba8af5c4e29bdc1a31df670749db inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ae8f6ba8af5c4e29bdc1a31df670749db"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ae8f6ba8af5c4e29bdc1a31df670749db">Unknown</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) noexcept</td></tr>
<tr class="separator:ae8f6ba8af5c4e29bdc1a31df670749db inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa34bfd7783fe6f4b538c0bc2cf255da inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aaa34bfd7783fe6f4b538c0bc2cf255da"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aaa34bfd7783fe6f4b538c0bc2cf255da">Unknown</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:aaa34bfd7783fe6f4b538c0bc2cf255da inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0340a6160ee8df2afb43636ea3c2cc96 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a0340a6160ee8df2afb43636ea3c2cc96"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a0340a6160ee8df2afb43636ea3c2cc96">~Unknown</a> () noexcept</td></tr>
<tr class="separator:a0340a6160ee8df2afb43636ea3c2cc96 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea7776e184fcacef15f15492989bad20 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aea7776e184fcacef15f15492989bad20"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aea7776e184fcacef15f15492989bad20">operator bool</a> () const noexcept</td></tr>
<tr class="separator:aea7776e184fcacef15f15492989bad20 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac6386bbbc56d38a37341426fb2d0ebb inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aac6386bbbc56d38a37341426fb2d0ebb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aac6386bbbc56d38a37341426fb2d0ebb">operator=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) noexcept</td></tr>
<tr class="separator:aac6386bbbc56d38a37341426fb2d0ebb inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c193e8294db3a000d989810705ffae inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a68c193e8294db3a000d989810705ffae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a68c193e8294db3a000d989810705ffae">operator=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:a68c193e8294db3a000d989810705ffae inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa13c9df3b6057efc9f641ba7b25e802 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_afa13c9df3b6057efc9f641ba7b25e802"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#afa13c9df3b6057efc9f641ba7b25e802">swap</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) noexcept</td></tr>
<tr class="separator:afa13c9df3b6057efc9f641ba7b25e802 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96ec3ddd5df9f671a8841e44ea4d9e36 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a96ec3ddd5df9f671a8841e44ea4d9e36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a96ec3ddd5df9f671a8841e44ea4d9e36">ResetPtr</a> (IUnknown *other=nullptr, bool addRef=false) noexcept</td></tr>
<tr class="separator:a96ec3ddd5df9f671a8841e44ea4d9e36 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6adcf32990746f7310545d358aabca3 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ab6adcf32990746f7310545d358aabca3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ab6adcf32990746f7310545d358aabca3">operator=</a> (nullptr_t)</td></tr>
<tr class="separator:ab6adcf32990746f7310545d358aabca3 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6cdb2a4774d98a5df8c20ff00e7cc09 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ae6cdb2a4774d98a5df8c20ff00e7cc09"><td class="memItemLeft" align="right" valign="top">IUnknown *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ae6cdb2a4774d98a5df8c20ff00e7cc09">Detach</a> ()</td></tr>
<tr class="separator:ae6cdb2a4774d98a5df8c20ff00e7cc09 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6772461121e3555b96aa27b64ed98c8 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_af6772461121e3555b96aa27b64ed98c8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T &gt;</td></tr>
<tr class="memitem:af6772461121e3555b96aa27b64ed98c8 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#af6772461121e3555b96aa27b64ed98c8">As</a> () const</td></tr>
<tr class="separator:af6772461121e3555b96aa27b64ed98c8 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533ecb31b6dc440f37be17d984a46f9b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a533ecb31b6dc440f37be17d984a46f9b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a533ecb31b6dc440f37be17d984a46f9b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a533ecb31b6dc440f37be17d984a46f9b">Is</a> () const noexcept</td></tr>
<tr class="separator:a533ecb31b6dc440f37be17d984a46f9b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4937fd8f5f7f2936ca5d615a9b564c76 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a4937fd8f5f7f2936ca5d615a9b564c76"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;IUnknown, T&gt;</td></tr>
<tr class="memitem:a4937fd8f5f7f2936ca5d615a9b564c76 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown_ptr.xhtml">UnknownPtr</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a4937fd8f5f7f2936ca5d615a9b564c76">As</a> () const</td></tr>
<tr class="separator:a4937fd8f5f7f2936ca5d615a9b564c76 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a63fe5f2f8ff88fa57f1f6f28a25c3434"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;IUnknown, T&gt;</td></tr>
<tr class="memitem:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a63fe5f2f8ff88fa57f1f6f28a25c3434">Is</a> () const noexcept</td></tr>
<tr class="memdesc:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function can be used to detect if an object supports a particular COM interface derived from IUnknown.  <br /></td></tr>
<tr class="separator:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7be8f6723282945fd05ba1192f31c655 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a7be8f6723282945fd05ba1192f31c655"><td class="memTemplParams" colspan="2">template&lt;typename T  = IUnknown&gt; </td></tr>
<tr class="memitem:a7be8f6723282945fd05ba1192f31c655 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a7be8f6723282945fd05ba1192f31c655">GetInterfacePointer</a> () const noexcept</td></tr>
<tr class="separator:a7be8f6723282945fd05ba1192f31c655 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae99f7606e4d988d7e42823011cc1d582 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ae99f7606e4d988d7e42823011cc1d582"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ae99f7606e4d988d7e42823011cc1d582">QueryInterface</a> (REFIID riid, void **itf) const</td></tr>
<tr class="memdesc:ae99f7606e4d988d7e42823011cc1d582 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries a COM object for a pointer to one of its interface; identifying the interface by a reference to its interface identifier (IID). If the COM object implements the interface, then it returns a pointer to that interface after calling IUnknown::AddRef on it.  <br /></td></tr>
<tr class="separator:ae99f7606e4d988d7e42823011cc1d582 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c4e069cda382fce78ae58cb6da46714 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a8c4e069cda382fce78ae58cb6da46714"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;IUnknown, T&gt;</td></tr>
<tr class="memitem:a8c4e069cda382fce78ae58cb6da46714 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a8c4e069cda382fce78ae58cb6da46714">QueryInterface</a> (T **itf) const</td></tr>
<tr class="separator:a8c4e069cda382fce78ae58cb6da46714 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e4b0e32a3c8ccb4761874eb894e6a23 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a2e4b0e32a3c8ccb4761874eb894e6a23"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a2e4b0e32a3c8ccb4761874eb894e6a23">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a2e4b0e32a3c8ccb4761874eb894e6a23 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a767edfb442d605bef709a7ae919d3ddd inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a767edfb442d605bef709a7ae919d3ddd"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a767edfb442d605bef709a7ae919d3ddd">operator!=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a767edfb442d605bef709a7ae919d3ddd inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d105bec2461e4604138e28bb50666a0 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a2d105bec2461e4604138e28bb50666a0"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a2d105bec2461e4604138e28bb50666a0">operator==</a> (const IUnknown *other) const noexcept</td></tr>
<tr class="separator:a2d105bec2461e4604138e28bb50666a0 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8551309727841a5f812a239e1e53e1a inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ad8551309727841a5f812a239e1e53e1a"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ad8551309727841a5f812a239e1e53e1a">operator!=</a> (const IUnknown *other) const noexcept</td></tr>
<tr class="separator:ad8551309727841a5f812a239e1e53e1a inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:aa59c0cdea0194ce66f73d477126e40bc inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aa59c0cdea0194ce66f73d477126e40bc"><td class="memItemLeft" align="right" valign="top">typedef IUnknown&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aa59c0cdea0194ce66f73d477126e40bc">InterfaceType</a></td></tr>
<tr class="separator:aa59c0cdea0194ce66f73d477126e40bc inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:a53934808e8bc16aae6c312e16200f38c inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a53934808e8bc16aae6c312e16200f38c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a53934808e8bc16aae6c312e16200f38c inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a53934808e8bc16aae6c312e16200f38c">CoCreateInstanceFromClassId</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aeda58257f3f008fc31abc56e9c8635feacd880fe2ccbc139f0c0780f873ad5b3d">CLSID</a> &amp;clsid, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a53934808e8bc16aae6c312e16200f38c inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a04fc32e5cb30da5304d5ba698ffcd2 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a2a04fc32e5cb30da5304d5ba698ffcd2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a2a04fc32e5cb30da5304d5ba698ffcd2 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a2a04fc32e5cb30da5304d5ba698ffcd2">CoCreateInstanceFromClassId</a> (const wchar_t *clsid, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a2a04fc32e5cb30da5304d5ba698ffcd2 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd974cb14b75e77172186c55df46a6c4 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_acd974cb14b75e77172186c55df46a6c4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:acd974cb14b75e77172186c55df46a6c4 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#acd974cb14b75e77172186c55df46a6c4">CoCreateInstanceFromClassId</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> &amp;clsid, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:acd974cb14b75e77172186c55df46a6c4 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40f9f85791fedb8b6c441ed11cd89d6a inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a40f9f85791fedb8b6c441ed11cd89d6a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a40f9f85791fedb8b6c441ed11cd89d6a inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a40f9f85791fedb8b6c441ed11cd89d6a">CoCreateInstanceFromProgId</a> (const wchar_t *progId, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a40f9f85791fedb8b6c441ed11cd89d6a inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a846f601b5b267cbc515797fdbc11718b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a846f601b5b267cbc515797fdbc11718b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a846f601b5b267cbc515797fdbc11718b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a846f601b5b267cbc515797fdbc11718b">CoCreateInstanceFromProgId</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> &amp;progId, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a846f601b5b267cbc515797fdbc11718b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee525bdbb1fd840a8645b8f81fdbe947 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aee525bdbb1fd840a8645b8f81fdbe947"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:aee525bdbb1fd840a8645b8f81fdbe947 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aee525bdbb1fd840a8645b8f81fdbe947">CoCreateInstanceFromDll</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_module_handle.xhtml">ModuleHandle</a> &amp;dll, const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aeda58257f3f008fc31abc56e9c8635feacd880fe2ccbc139f0c0780f873ad5b3d">CLSID</a> &amp;clsid)</td></tr>
<tr class="separator:aee525bdbb1fd840a8645b8f81fdbe947 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:a5dc7a66bd9d439796518ca9cd60643d4 inherit pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a5dc7a66bd9d439796518ca9cd60643d4"><td class="memItemLeft" align="right" valign="top">IUnknown *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a5dc7a66bd9d439796518ca9cd60643d4">unknown_</a></td></tr>
<tr class="separator:a5dc7a66bd9d439796518ca9cd60643d4 inherit pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a04a07411e90fce85d5e8755f85bbbad8" name="a04a07411e90fce85d5e8755f85bbbad8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04a07411e90fce85d5e8755f85bbbad8">&#9670;&#160;</a></span>AppendChild() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::AppendChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Appends newChild to the list of children. If the newChild element already has a parent, it is removed from this parent as part of the append operation. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">newChild</td><td>The element to be appended.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="add9c1786bfe6687b2d928faa04b4e802" name="add9c1786bfe6687b2d928faa04b4e802"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add9c1786bfe6687b2d928faa04b4e802">&#9670;&#160;</a></span>AppendChild() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::AppendChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2a9931eb030859801471a20e7d14de6c" name="a2a9931eb030859801471a20e7d14de6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a9931eb030859801471a20e7d14de6c">&#9670;&#160;</a></span>CreateChild() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::CreateChild </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>tagName</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1af59fd27559f0f7fffb2ede044d3296" name="a1af59fd27559f0f7fffb2ede044d3296"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1af59fd27559f0f7fffb2ede044d3296">&#9670;&#160;</a></span>CreateChild() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::CreateChild </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>tagName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an element from a tag name. The element is appended to the list of children. Returns an error if this element cannot accept children of the specified type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tagName</td><td>The tag name of the new child. An empty string is interpreted to be a text content element.</td></tr>
    <tr><td class="paramname">newChild</td><td>The new child element.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a09fa03efd84199711bc260fe23eee2d6" name="a09fa03efd84199711bc260fe23eee2d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09fa03efd84199711bc260fe23eee2d6">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[1/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_ REFIID</td>          <td class="paramname"><span class="paramname"><em>riid</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as an interface type. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified interface type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">riid</td><td>The interface ID of the attribute value.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aeab0e91bdc9050cc476696f2b746c052" name="aeab0e91bdc9050cc476696f2b746c052"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeab0e91bdc9050cc476696f2b746c052">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[2/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_COLOR_F *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a color. </p>

</div>
</div>
<a id="a07b68dcc581676b18c0df7a472675f58" name="a07b68dcc581676b18c0df7a472675f58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07b68dcc581676b18c0df7a472675f58">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[3/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_EXTEND_MODE *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a extend mode value. This method can be used to get the value of a 'spreadMethod' attribute. </p>

</div>
</div>
<a id="a8d45d75c4abf436c10e8ccdd0e6d28a5" name="a8d45d75c4abf436c10e8ccdd0e6d28a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d45d75c4abf436c10e8ccdd0e6d28a5">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[4/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_FILL_MODE *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a fill mode. This method can be used to get the value of the 'fill-rule' or 'clip-rule' properties. </p>

</div>
</div>
<a id="abfbb5b66f02b4c57023643587625b03c" name="abfbb5b66f02b4c57023643587625b03c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfbb5b66f02b4c57023643587625b03c">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[5/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_MATRIX_3X2_F *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a matrix value. This method can be used to get the value of a 'transform' or 'gradientTransform' attribute. </p>

</div>
</div>
<a id="a7f49688b5430237530087325532e8fd0" name="a7f49688b5430237530087325532e8fd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f49688b5430237530087325532e8fd0">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[6/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_DISPLAY *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a display value. This method can be used to get the value of the 'display' property. </p>

</div>
</div>
<a id="a14eb333be2395e462ff1c9c547a6875c" name="a14eb333be2395e462ff1c9c547a6875c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14eb333be2395e462ff1c9c547a6875c">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[7/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_LENGTH *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as length value. </p>

</div>
</div>
<a id="a5c681162a4f04a04ea3eb6092d2408c1" name="a5c681162a4f04a04ea3eb6092d2408c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c681162a4f04a04ea3eb6092d2408c1">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[8/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_LINE_CAP *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a line cap value. This method can be used to get the value of the 'stroke-linecap' property. </p>

</div>
</div>
<a id="a0939d8e9cac4f7c6b4740b4d4ef3612a" name="a0939d8e9cac4f7c6b4740b4d4ef3612a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0939d8e9cac4f7c6b4740b4d4ef3612a">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[9/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_LINE_JOIN *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a line join value. This method can be used to get the value of the 'stroke-linejoin' property. </p>

</div>
</div>
<a id="a410de2798c874decacb5361b653c3b3c" name="a410de2798c874decacb5361b653c3b3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a410de2798c874decacb5361b653c3b3c">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[10/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_OVERFLOW *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as an overflow value. This method can be used to get the value of the 'overflow' property. </p>

</div>
</div>
<a id="a38b157e395d10cd0c1ffdbd47ff0bf9e" name="a38b157e395d10cd0c1ffdbd47ff0bf9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38b157e395d10cd0c1ffdbd47ff0bf9e">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[11/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_PRESERVE_ASPECT_RATIO *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a preserve aspect ratio value. This method can be used to get the value of a 'preserveAspectRatio' attribute. </p>

</div>
</div>
<a id="a3e8ef2cd387cbf366f54e0580f11b86b" name="a3e8ef2cd387cbf366f54e0580f11b86b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e8ef2cd387cbf366f54e0580f11b86b">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[12/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_UNIT_TYPE *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a unit type value. This method can be used to get the value of a 'gradientUnits' or 'clipPathUnits' attribute. </p>

</div>
</div>
<a id="a26f0e4448a3054d4fe20205a89bae5ea" name="a26f0e4448a3054d4fe20205a89bae5ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26f0e4448a3054d4fe20205a89bae5ea">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[13/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ D2D1_SVG_VISIBILITY *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a visibility value. This method can be used to get the value of the 'visibility' property. </p>

</div>
</div>
<a id="a606ae4f65755dcdbfe93b55070e9d728" name="a606ae4f65755dcdbfe93b55070e9d728"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a606ae4f65755dcdbfe93b55070e9d728">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[14/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ FLOAT *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a float. </p>

</div>
</div>
<a id="aeff537d5bfdde664fcfee82b5f28ed3b" name="aeff537d5bfdde664fcfee82b5f28ed3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeff537d5bfdde664fcfee82b5f28ed3b">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[15/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_POD_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>valueSizeInBytes</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a POD type. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified POD type. </p>

</div>
</div>
<a id="af92f54a870f8b23900b77aa3acd9e621" name="af92f54a870f8b23900b77aa3acd9e621"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af92f54a870f8b23900b77aa3acd9e621">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[16/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_STRING_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PWSTR</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>valueCount</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a string. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified string type. </p>

</div>
</div>
<a id="a4d273cf53257a43d7b8308d9045a70c8" name="a4d273cf53257a43d7b8308d9045a70c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d273cf53257a43d7b8308d9045a70c8">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[17/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_STRING_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span><span class="paramdefsep"> = </span><span class="paramdefval">D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad66301b79cf180454f5fe4f93f14c628" name="ad66301b79cf180454f5fe4f93f14c628"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad66301b79cf180454f5fe4f93f14c628">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[18/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgAttribute **</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element. </p>

</div>
</div>
<a id="a2bdc8fae0a1284768ce09f31ccc1c822" name="a2bdc8fae0a1284768ce09f31ccc1c822"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bdc8fae0a1284768ce09f31ccc1c822">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[19/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgPaint **</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a paint. This method can be used to get the value of the 'fill' or 'stroke' properties. </p>

</div>
</div>
<a id="adc04fc95cfe52edcce7f84ce4a36c079" name="adc04fc95cfe52edcce7f84ce4a36c079"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc04fc95cfe52edcce7f84ce4a36c079">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[20/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgPathData **</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as path data. This method can be used to get the value of the 'd' attribute on a 'path' element. </p>

</div>
</div>
<a id="a989c671d3d8fb79e1988dc3d4e78ddd3" name="a989c671d3d8fb79e1988dc3d4e78ddd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a989c671d3d8fb79e1988dc3d4e78ddd3">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[21/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgPointCollection **</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as points. This method can be used to get the value of the 'points' attribute on a 'polygon' or 'polyline' element. </p>

</div>
</div>
<a id="ac2d444017c1f6990e85e5da92de401e4" name="ac2d444017c1f6990e85e5da92de401e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2d444017c1f6990e85e5da92de401e4">&#9670;&#160;</a></span>GetAttributeValue() <span class="overload">[22/22]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgStrokeDashArray **</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an attribute of this element as a stroke dash array. This method can be used to get the value of the 'stroke-dasharray' property. </p>

</div>
</div>
<a id="a197903bde6d9f5710aaabe8e7bbc7952" name="a197903bde6d9f5710aaabe8e7bbc7952"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a197903bde6d9f5710aaabe8e7bbc7952">&#9670;&#160;</a></span>GetAttributeValueLength() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UINT32 Harlinn::Windows::Graphics::SvgElement::GetAttributeValueLength </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_STRING_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a65f170a9a82163e5530311fa6947b6a1" name="a65f170a9a82163e5530311fa6947b6a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65f170a9a82163e5530311fa6947b6a1">&#9670;&#160;</a></span>GetAttributeValueLength() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetAttributeValueLength </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_STRING_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ UINT32 *</td>          <td class="paramname"><span class="paramname"><em>valueLength</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the string length of an attribute of this element. The returned string length does not include room for the null terminator. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified string type. </p>

</div>
</div>
<a id="a03c74db44e3dffb67e78ea0bdd9299de" name="a03c74db44e3dffb67e78ea0bdd9299de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03c74db44e3dffb67e78ea0bdd9299de">&#9670;&#160;</a></span>GetDocument() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_document.xhtml">SvgDocument</a> Harlinn::Windows::Graphics::SvgElement::GetDocument </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9b8180f509fc49eb0bade0939b0b00ce" name="a9b8180f509fc49eb0bade0939b0b00ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b8180f509fc49eb0bade0939b0b00ce">&#9670;&#160;</a></span>GetDocument() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetDocument </td>
          <td>(</td>
          <td class="paramtype">ID2D1SvgDocument **</td>          <td class="paramname"><span class="paramname"><em>document</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the document that contains this element. Returns null if the element has been removed from the tree. </p>

</div>
</div>
<a id="ab37e750bf5caec294614e579b93cbe61" name="ab37e750bf5caec294614e579b93cbe61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab37e750bf5caec294614e579b93cbe61">&#9670;&#160;</a></span>GetFirstChild() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetFirstChild </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8957adebe48f7c8dbcf61db805a174e5" name="a8957adebe48f7c8dbcf61db805a174e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8957adebe48f7c8dbcf61db805a174e5">&#9670;&#160;</a></span>GetFirstChild() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetFirstChild </td>
          <td>(</td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>child</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the first child of this element. </p>

</div>
</div>
<a id="aab37c7bd2c4652ad861c8ce99f89c563" name="aab37c7bd2c4652ad861c8ce99f89c563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab37c7bd2c4652ad861c8ce99f89c563">&#9670;&#160;</a></span>GetLastChild() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetLastChild </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0ebec440ba13474924077e2338b2f0c2" name="a0ebec440ba13474924077e2338b2f0c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ebec440ba13474924077e2338b2f0c2">&#9670;&#160;</a></span>GetLastChild() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetLastChild </td>
          <td>(</td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>child</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the last child of this element. </p>

</div>
</div>
<a id="a94891607fc3f9c902f34147ea7effe9a" name="a94891607fc3f9c902f34147ea7effe9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94891607fc3f9c902f34147ea7effe9a">&#9670;&#160;</a></span>GetNextChild() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetNextChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acc5509c04cd40455d5be4f7d300426f7" name="acc5509c04cd40455d5be4f7d300426f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc5509c04cd40455d5be4f7d300426f7">&#9670;&#160;</a></span>GetNextChild() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetNextChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>nextChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the next sibling of the referenceChild element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">referenceChild</td><td>The referenceChild must be an immediate child of this element.</td></tr>
    <tr><td class="paramname">nextChild</td><td>The output nextChild element will be non-null if the referenceChild has a next sibling. If the referenceChild is the last child, the output is null.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a669a1594766cdee9767d2528d042e933" name="a669a1594766cdee9767d2528d042e933"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a669a1594766cdee9767d2528d042e933">&#9670;&#160;</a></span>GetNextChild() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetNextChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6cd0cd30a1e0378658973aa78fa05dac" name="a6cd0cd30a1e0378658973aa78fa05dac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cd0cd30a1e0378658973aa78fa05dac">&#9670;&#160;</a></span>GetNextChild() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetNextChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>nextChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="addee42cf07fc655f16d4e43e85f9f4f5" name="addee42cf07fc655f16d4e43e85f9f4f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addee42cf07fc655f16d4e43e85f9f4f5">&#9670;&#160;</a></span>GetParent() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetParent </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abeb19aa05a8c49756c550aa886c396c0" name="abeb19aa05a8c49756c550aa886c396c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeb19aa05a8c49756c550aa886c396c0">&#9670;&#160;</a></span>GetParent() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetParent </td>
          <td>(</td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>parent</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the parent element. </p>

</div>
</div>
<a id="ac6ff13375fb29dbc350f1e22329cfaeb" name="ac6ff13375fb29dbc350f1e22329cfaeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6ff13375fb29dbc350f1e22329cfaeb">&#9670;&#160;</a></span>GetPreviousChild() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetPreviousChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a432acdc2e093550fc8c100707307233c" name="a432acdc2e093550fc8c100707307233c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a432acdc2e093550fc8c100707307233c">&#9670;&#160;</a></span>GetPreviousChild() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetPreviousChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>previousChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the previous sibling of the referenceChild element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">referenceChild</td><td>The referenceChild must be an immediate child of this element.</td></tr>
    <tr><td class="paramname">previousChild</td><td>The output previousChild element will be non-null if the referenceChild has a previous sibling. If the referenceChild is the first child, the output is null.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aae4a64cf15fb169ff06a491769a1c9bb" name="aae4a64cf15fb169ff06a491769a1c9bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae4a64cf15fb169ff06a491769a1c9bb">&#9670;&#160;</a></span>GetPreviousChild() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> Harlinn::Windows::Graphics::SvgElement::GetPreviousChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad7b62a57148d3d3380cd91a917bbba34" name="ad7b62a57148d3d3380cd91a917bbba34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7b62a57148d3d3380cd91a917bbba34">&#9670;&#160;</a></span>GetPreviousChild() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetPreviousChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ID2D1SvgElement **</td>          <td class="paramname"><span class="paramname"><em>previousChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afcc9323942f0383a13c162d44c2ae83c" name="afcc9323942f0383a13c162d44c2ae83c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcc9323942f0383a13c162d44c2ae83c">&#9670;&#160;</a></span>GetSpecifiedAttributeCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UINT32 Harlinn::Windows::Graphics::SvgElement::GetSpecifiedAttributeCount </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of specified attributes on this element. Attributes are only considered specified if they are explicitly set on the element or present within an inline style. <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_properties.xhtml" title="Represents a set of run-time bindable and discoverable properties that allow a data-driven applicatio...">Properties</a> that receive their value through CSS inheritance are not considered specified. An attribute can become specified if it is set through a method call. It can become unspecified if it is removed via RemoveAttribute. </p>

</div>
</div>
<a id="a2bf27ee81c5922ff45c2db26c64ddb68" name="a2bf27ee81c5922ff45c2db26c64ddb68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bf27ee81c5922ff45c2db26c64ddb68">&#9670;&#160;</a></span>GetSpecifiedAttributeName() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Windows::Graphics::SvgElement::GetSpecifiedAttributeName </td>
          <td>(</td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *</td>          <td class="paramname"><span class="paramname"><em>inherited</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad81d5c27daa529df12d5481d3450f076" name="ad81d5c27daa529df12d5481d3450f076"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad81d5c27daa529df12d5481d3450f076">&#9670;&#160;</a></span>GetSpecifiedAttributeName() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetSpecifiedAttributeName </td>
          <td>(</td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>nameCount</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *</td>          <td class="paramname"><span class="paramname"><em>inherited</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the name of the specified attribute at the given index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The specified index of the attribute.</td></tr>
    <tr><td class="paramname">name</td><td>Outputs the name of the attribute.</td></tr>
    <tr><td class="paramname">inherited</td><td>Outputs whether the attribute is set to the 'inherit' value.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8c4c62386380805b97435f169c6337fc" name="a8c4c62386380805b97435f169c6337fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c4c62386380805b97435f169c6337fc">&#9670;&#160;</a></span>GetSpecifiedAttributeNameLength() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetSpecifiedAttributeNameLength </td>
          <td>(</td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_ UINT32 *</td>          <td class="paramname"><span class="paramname"><em>nameLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *</td>          <td class="paramname"><span class="paramname"><em>inherited</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the string length of the name of the specified attribute at the given index. The output string length does not include room for the null terminator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The specified index of the attribute.</td></tr>
    <tr><td class="paramname">nameLength</td><td>Outputs the string length of the name of the specified attribute.</td></tr>
    <tr><td class="paramname">inherited</td><td>Outputs whether the attribute is set to the 'inherit' value.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a24d08fd41ce854cdb5e4ba45c3502aa4" name="a24d08fd41ce854cdb5e4ba45c3502aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24d08fd41ce854cdb5e4ba45c3502aa4">&#9670;&#160;</a></span>GetSpecifiedAttributeNameLength() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UINT32 Harlinn::Windows::Graphics::SvgElement::GetSpecifiedAttributeNameLength </td>
          <td>(</td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Out_opt_ <a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *</td>          <td class="paramname"><span class="paramname"><em>inherited</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a030d02db464f5b3313844a8c6dc221f3" name="a030d02db464f5b3313844a8c6dc221f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030d02db464f5b3313844a8c6dc221f3">&#9670;&#160;</a></span>GetTagName() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Windows::Graphics::SvgElement::GetTagName </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a53ab212dafe89a6b910587769766e993" name="a53ab212dafe89a6b910587769766e993"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53ab212dafe89a6b910587769766e993">&#9670;&#160;</a></span>GetTagName() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetTagName </td>
          <td>(</td>
          <td class="paramtype">PWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>nameCount</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the tag name. </p>

</div>
</div>
<a id="ae83ac66d56abf8555c663007f65c6fca" name="ae83ac66d56abf8555c663007f65c6fca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae83ac66d56abf8555c663007f65c6fca">&#9670;&#160;</a></span>GetTagNameLength()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UINT32 Harlinn::Windows::Graphics::SvgElement::GetTagNameLength </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the string length of the tag name. The returned string length does not include room for the null terminator. </p>

</div>
</div>
<a id="a38e8dece9505751dd184e94fe55a873e" name="a38e8dece9505751dd184e94fe55a873e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38e8dece9505751dd184e94fe55a873e">&#9670;&#160;</a></span>GetTextValue() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Windows::Graphics::SvgElement::GetTextValue </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af2acd198860a9889f158c25a4bf0dcbd" name="af2acd198860a9889f158c25a4bf0dcbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2acd198860a9889f158c25a4bf0dcbd">&#9670;&#160;</a></span>GetTextValue() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::GetTextValue </td>
          <td>(</td>
          <td class="paramtype">PWSTR</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>valueCount</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the value of a text content element. </p>

</div>
</div>
<a id="a83ff04cf68a52c360b3b8e833afefe24" name="a83ff04cf68a52c360b3b8e833afefe24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83ff04cf68a52c360b3b8e833afefe24">&#9670;&#160;</a></span>GetTextValueLength()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UINT32 Harlinn::Windows::Graphics::SvgElement::GetTextValueLength </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the length of the text content value. The returned string length does not include room for the null terminator. </p>

</div>
</div>
<a id="a0e503529940f60cd3397af1ea8090520" name="a0e503529940f60cd3397af1ea8090520"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e503529940f60cd3397af1ea8090520">&#9670;&#160;</a></span>HasChildren()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::Graphics::SvgElement::HasChildren </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether this element has children. </p>

</div>
</div>
<a id="ac7a6f0ad2de67a599503e47355ef68c1" name="ac7a6f0ad2de67a599503e47355ef68c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7a6f0ad2de67a599503e47355ef68c1">&#9670;&#160;</a></span>InsertChildBefore() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::InsertChildBefore </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_opt_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts newChild as a child of this element, before the referenceChild element. If the newChild element already has a parent, it is removed from this parent as part of the insertion. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">newChild</td><td>The element to be inserted.</td></tr>
    <tr><td class="paramname">referenceChild</td><td>The element that the child should be inserted before. If referenceChild is null, the newChild is placed as the last child. If referenceChild is non-null, it must be an immediate child of this element. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5fb2e07114b91b7e1284baf34eee3267" name="a5fb2e07114b91b7e1284baf34eee3267"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb2e07114b91b7e1284baf34eee3267">&#9670;&#160;</a></span>InsertChildBefore() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::InsertChildBefore </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_opt_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a717ca017a411f8dac0712de7aff332c4" name="a717ca017a411f8dac0712de7aff332c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a717ca017a411f8dac0712de7aff332c4">&#9670;&#160;</a></span>InsertChildBefore() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::InsertChildBefore </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>referenceChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5daaebfc8a12160e8f75ccee9d6468a6" name="a5daaebfc8a12160e8f75ccee9d6468a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5daaebfc8a12160e8f75ccee9d6468a6">&#9670;&#160;</a></span>IsAttributeSpecified()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::Graphics::SvgElement::IsAttributeSpecified </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="_h_c_c_date_time_8cpp.xhtml#a8663a698628cc67791708eda36b484a7">BOOL</a> *</td>          <td class="paramname"><span class="paramname"><em>inherited</em></span><span class="paramdefsep"> = </span><span class="paramdefval">NULL</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the attribute is explicitly set on the element or if it is present within an inline style. Returns FALSE if the attribute is not a valid attribute on this element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name of the attribute.</td></tr>
    <tr><td class="paramname">inherited</td><td>Outputs whether the attribute is set to the 'inherit' value.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a24b0fb33c7a52c2dc21152ee7c391c2d" name="a24b0fb33c7a52c2dc21152ee7c391c2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24b0fb33c7a52c2dc21152ee7c391c2d">&#9670;&#160;</a></span>IsTextContent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::Graphics::SvgElement::IsTextContent </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns TRUE if this element represents text content, e.g. the content of a 'title' or 'desc' element. Text content does not have a tag name. </p>

</div>
</div>
<a id="a8a4a224c7ef2b3137916fbf97dccae82" name="a8a4a224c7ef2b3137916fbf97dccae82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a4a224c7ef2b3137916fbf97dccae82">&#9670;&#160;</a></span>RemoveAttribute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::RemoveAttribute </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the attribute from this element. Also removes this attribute from within an inline style if present. Returns an error if the attribute name is not valid on this element. </p>

</div>
</div>
<a id="a8cb0b0ab32ca0c705a8c3327744c8ca4" name="a8cb0b0ab32ca0c705a8c3327744c8ca4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cb0b0ab32ca0c705a8c3327744c8ca4">&#9670;&#160;</a></span>RemoveChild() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::RemoveChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>oldChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the oldChild from the tree. Children of oldChild remain children of oldChild. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">oldChild</td><td>The child element to be removed. The oldChild element must be an immediate child of this element.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac97d4a96ad8d05c09dd04ceb84a586e0" name="ac97d4a96ad8d05c09dd04ceb84a586e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac97d4a96ad8d05c09dd04ceb84a586e0">&#9670;&#160;</a></span>RemoveChild() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::RemoveChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>oldChild</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a68df915bad49318a715d368a2392c5cc" name="a68df915bad49318a715d368a2392c5cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68df915bad49318a715d368a2392c5cc">&#9670;&#160;</a></span>ReplaceChild() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::ReplaceChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>oldChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replaces the oldChild element with the newChild. This operation removes the oldChild from the tree. If the newChild element already has a parent, it is removed from this parent as part of the replace operation. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">newChild</td><td>The element to be inserted.</td></tr>
    <tr><td class="paramname">oldChild</td><td>The child element to be replaced. The oldChild element must be an immediate child of this element.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a75a40c0bb662ecd2757b510c725c0618" name="a75a40c0bb662ecd2757b510c725c0618"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75a40c0bb662ecd2757b510c725c0618">&#9670;&#160;</a></span>ReplaceChild() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::ReplaceChild </td>
          <td>(</td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>oldChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a335dd62e76b29e174c53c529360a49e9" name="a335dd62e76b29e174c53c529360a49e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a335dd62e76b29e174c53c529360a49e9">&#9670;&#160;</a></span>ReplaceChild() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::ReplaceChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_ ID2D1SvgElement *</td>          <td class="paramname"><span class="paramname"><em>oldChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab722467dbc3575776375faa163fc0aa3" name="ab722467dbc3575776375faa163fc0aa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab722467dbc3575776375faa163fc0aa3">&#9670;&#160;</a></span>ReplaceChild() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::ReplaceChild </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>newChild</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>oldChild</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aea57d74a7f1ef6818e120b77a95382b6" name="aea57d74a7f1ef6818e120b77a95382b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea57d74a7f1ef6818e120b77a95382b6">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[1/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_ ID2D1SvgAttribute *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element using an interface. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified interface type. Returns an error if the attribute object is already set on an element. A given attribute object may only be set on one element in one attribute location at a time. </p>

</div>
</div>
<a id="a850f6eb5fc8b8107c1fed2fbbb295f00" name="a850f6eb5fc8b8107c1fed2fbbb295f00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a850f6eb5fc8b8107c1fed2fbbb295f00">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[2/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CONST D2D1_COLOR_F &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a color. </p>

</div>
</div>
<a id="a1c530a006d790e3bd2884f6649529200" name="a1c530a006d790e3bd2884f6649529200"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c530a006d790e3bd2884f6649529200">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[3/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const D2D1_MATRIX_3X2_F &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a matrix value. This method can be used to set the value of a 'transform' or 'gradientTransform' attribute. </p>

</div>
</div>
<a id="a4a622337f08bbef01c3f0355eb5cfcc6" name="a4a622337f08bbef01c3f0355eb5cfcc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a622337f08bbef01c3f0355eb5cfcc6">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[4/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const D2D1_SVG_LENGTH &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a length value. </p>

</div>
</div>
<a id="a87f6b1e42b5b0688cc2226919b8ec1df" name="a87f6b1e42b5b0688cc2226919b8ec1df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87f6b1e42b5b0688cc2226919b8ec1df">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[5/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CONST D2D1_SVG_PRESERVE_ASPECT_RATIO &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a preserve aspect ratio value. This method can be used to set the value of a 'preserveAspectRatio' attribute. </p>

</div>
</div>
<a id="acb0b41f58347c98d5c6bdb162e977022" name="acb0b41f58347c98d5c6bdb162e977022"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb0b41f58347c98d5c6bdb162e977022">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[6/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_EXTEND_MODE</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as an extend mode value. This method can be used to set the value of a 'spreadMethod' attribute. </p>

</div>
</div>
<a id="a3a7d68de2c455ca0a6855f0ba0fcd54b" name="a3a7d68de2c455ca0a6855f0ba0fcd54b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a7d68de2c455ca0a6855f0ba0fcd54b">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[7/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_FILL_MODE</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a fill mode. This method can be used to set the value of the 'fill-rule' or 'clip-rule' properties. </p>

</div>
</div>
<a id="ac50437be2096f7b7818ac2cba742afa9" name="ac50437be2096f7b7818ac2cba742afa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac50437be2096f7b7818ac2cba742afa9">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[8/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_POD_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>valueSizeInBytes</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element using a POD type. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified type. </p>

</div>
</div>
<a id="ad1cb542f86ac2ea7dd80c38019cdc7f8" name="ad1cb542f86ac2ea7dd80c38019cdc7f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1cb542f86ac2ea7dd80c38019cdc7f8">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[9/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_ATTRIBUTE_STRING_TYPE</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element using a string. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified type. </p>

</div>
</div>
<a id="adaa83c8dab82a25d9e74ede31b6abeb9" name="adaa83c8dab82a25d9e74ede31b6abeb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaa83c8dab82a25d9e74ede31b6abeb9">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[10/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_DISPLAY</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a display value. This method can be used to set the value of the 'display' property. </p>

</div>
</div>
<a id="a9769e622e8feeaf08eb9b7b47d3b6a34" name="a9769e622e8feeaf08eb9b7b47d3b6a34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9769e622e8feeaf08eb9b7b47d3b6a34">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[11/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_LINE_CAP</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a line cap value. This method can be used to set the value of the 'stroke-linecap' property. </p>

</div>
</div>
<a id="ad8c8a8d4e40d848186ee015e567faaea" name="ad8c8a8d4e40d848186ee015e567faaea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8c8a8d4e40d848186ee015e567faaea">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[12/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_LINE_JOIN</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a line join value. This method can be used to set the value of the 'stroke-linejoin' property. </p>

</div>
</div>
<a id="afb434f148d295bf1fa5b9ce517aeac1e" name="afb434f148d295bf1fa5b9ce517aeac1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb434f148d295bf1fa5b9ce517aeac1e">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[13/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_OVERFLOW</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as an overflow value. This method can be used to set the value of the 'overflow' property. </p>

</div>
</div>
<a id="a23894082a65981e049b9ef208dc9b818" name="a23894082a65981e049b9ef208dc9b818"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23894082a65981e049b9ef208dc9b818">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[14/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_UNIT_TYPE</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a unit type value. This method can be used to set the value of a 'gradientUnits' or 'clipPathUnits' attribute. </p>

</div>
</div>
<a id="acb729dc6994da20b4daeb7a4e45a5c5a" name="acb729dc6994da20b4daeb7a4e45a5c5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb729dc6994da20b4daeb7a4e45a5c5a">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[15/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D2D1_SVG_VISIBILITY</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element as a visibility value. This method can be used to set the value of the 'visibility' property. </p>

</div>
</div>
<a id="a9fc0b8614b2b4ad4f8844661600600b1" name="a9fc0b8614b2b4ad4f8844661600600b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fc0b8614b2b4ad4f8844661600600b1">&#9670;&#160;</a></span>SetAttributeValue() <span class="overload">[16/16]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetAttributeValue </td>
          <td>(</td>
          <td class="paramtype">_In_ PCWSTR</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FLOAT</td>          <td class="paramname"><span class="paramname"><em>value</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an attribute of this element using a float. </p>

</div>
</div>
<a id="a8bdf272b294af5dc773014e6eb8d676f" name="a8bdf272b294af5dc773014e6eb8d676f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bdf272b294af5dc773014e6eb8d676f">&#9670;&#160;</a></span>SetTextValue() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetTextValue </td>
          <td>(</td>
          <td class="paramtype">const std::wstring_view &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4856b6ea2b749d293fd3f2dba717dd6e" name="a4856b6ea2b749d293fd3f2dba717dd6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4856b6ea2b749d293fd3f2dba717dd6e">&#9670;&#160;</a></span>SetTextValue() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetTextValue </td>
          <td>(</td>
          <td class="paramtype">const WCHAR *</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UINT32</td>          <td class="paramname"><span class="paramname"><em>valueCount</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the value of a text content element. </p>

</div>
</div>
<a id="ac5b71bf05cdbcd4b29998d88f924d5bd" name="ac5b71bf05cdbcd4b29998d88f924d5bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5b71bf05cdbcd4b29998d88f924d5bd">&#9670;&#160;</a></span>SetTextValue() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::Graphics::SvgElement::SetTextValue </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_w_graphics_8h.xhtml">HWGraphics.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_windows.xhtml">Windows</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_windows_1_1_graphics.xhtml">Graphics</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_windows_1_1_graphics_1_1_svg_element.xhtml">SvgElement</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

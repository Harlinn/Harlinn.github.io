<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Windows::MediaObject Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_windows_1_1_media_object.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_harlinn_1_1_windows_1_1_media_object-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Windows::MediaObject Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="class_harlinn_1_1_windows_1_1_media_object.xhtml" title="The MediaObject class provides functions for manipulating a Microsoft DirectX Media Object.">MediaObject</a> class provides functions for manipulating a Microsoft DirectX Media Object.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;HWMediaObj.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Windows::MediaObject:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_windows_1_1_media_object__inherit__graph.svg" width="215" height="124"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Harlinn::Windows::MediaObject:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_windows_1_1_media_object__coll__graph.svg" width="215" height="124"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_windows_1_1_media_object_1_1_media_type.xhtml">MediaType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_harlinn_1_1_windows_1_1_media_object_1_1_stream_count.xhtml">StreamCount</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae822fd24d8bf35ed37d62250c3197bc2" id="r_ae822fd24d8bf35ed37d62250c3197bc2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae822fd24d8bf35ed37d62250c3197bc2">GetStreamCount</a> (DWORD *numberOfInputStreams, DWORD *numberOfOutputStreams) const</td></tr>
<tr class="memdesc:ae822fd24d8bf35ed37d62250c3197bc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the number of input and output streams.  <br /></td></tr>
<tr class="separator:ae822fd24d8bf35ed37d62250c3197bc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41bcf6e835fb26c2241fde64dca1efac" id="r_a41bcf6e835fb26c2241fde64dca1efac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_harlinn_1_1_windows_1_1_media_object_1_1_stream_count.xhtml">StreamCount</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a41bcf6e835fb26c2241fde64dca1efac">GetStreamCount</a> () const</td></tr>
<tr class="separator:a41bcf6e835fb26c2241fde64dca1efac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8bfcf7e3c9233d79b5154905a239402" id="r_ad8bfcf7e3c9233d79b5154905a239402"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad8bfcf7e3c9233d79b5154905a239402">GetInputStreamInfo</a> (DWORD inputStreamIndex, DWORD *flags) const</td></tr>
<tr class="memdesc:ad8bfcf7e3c9233d79b5154905a239402"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves information about an input stream, such as any restrictions on the number of samples per buffer, and whether the stream performs lookahead on the input data. This information never changes.  <br /></td></tr>
<tr class="separator:ad8bfcf7e3c9233d79b5154905a239402"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab64ad62d9873295dcc48c6c685b00f7b" id="r_ab64ad62d9873295dcc48c6c685b00f7b"><td class="memItemLeft" align="right" valign="top">DWORD&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab64ad62d9873295dcc48c6c685b00f7b">GetInputStreamInfo</a> (DWORD inputStreamIndex) const</td></tr>
<tr class="separator:ab64ad62d9873295dcc48c6c685b00f7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad536db3e6121d2a1b7251ab8ba7fc663" id="r_ad536db3e6121d2a1b7251ab8ba7fc663"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad536db3e6121d2a1b7251ab8ba7fc663">GetOutputStreamInfo</a> (DWORD outputStreamIndex, DWORD *flags) const</td></tr>
<tr class="memdesc:ad536db3e6121d2a1b7251ab8ba7fc663"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves information about an output stream; for example, whether the stream is discardable, and whether it uses a fixed sample size. This information never changes.  <br /></td></tr>
<tr class="separator:ad536db3e6121d2a1b7251ab8ba7fc663"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0745733142b20882bbc7020fff8f9d30" id="r_a0745733142b20882bbc7020fff8f9d30"><td class="memItemLeft" align="right" valign="top">DWORD&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0745733142b20882bbc7020fff8f9d30">GetOutputStreamInfo</a> (DWORD outputStreamIndex) const</td></tr>
<tr class="separator:a0745733142b20882bbc7020fff8f9d30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade27f8a4202d89571d154db78ee55728" id="r_ade27f8a4202d89571d154db78ee55728"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ade27f8a4202d89571d154db78ee55728">GetInputType</a> (DWORD inputStreamIndex, DWORD typeIndex, DMO_MEDIA_TYPE *mediaType) const</td></tr>
<tr class="memdesc:ade27f8a4202d89571d154db78ee55728"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves a preferred media type for a specified input stream.  <br /></td></tr>
<tr class="separator:ade27f8a4202d89571d154db78ee55728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d189ffa2aeba5ed2dd39dd816161a1" id="r_a24d189ffa2aeba5ed2dd39dd816161a1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a24d189ffa2aeba5ed2dd39dd816161a1">GetOutputType</a> (DWORD outputStreamIndex, DWORD typeIndex, DMO_MEDIA_TYPE *mediaType) const</td></tr>
<tr class="memdesc:a24d189ffa2aeba5ed2dd39dd816161a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves a preferred media type for a specified output stream.  <br /></td></tr>
<tr class="separator:a24d189ffa2aeba5ed2dd39dd816161a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f8d6381d70a1829e80e6a4d477a0df4" id="r_a7f8d6381d70a1829e80e6a4d477a0df4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f8d6381d70a1829e80e6a4d477a0df4">SetInputType</a> (DWORD inputStreamIndex, const DMO_MEDIA_TYPE *mediaType, DWORD flags=0) const</td></tr>
<tr class="memdesc:a7f8d6381d70a1829e80e6a4d477a0df4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the media type on an input stream, or tests whether a media type is acceptable.  <br /></td></tr>
<tr class="separator:a7f8d6381d70a1829e80e6a4d477a0df4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2dbb45aac641d580f9ee742a75c8218" id="r_ab2dbb45aac641d580f9ee742a75c8218"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab2dbb45aac641d580f9ee742a75c8218">IsValidInputType</a> (DWORD inputStreamIndex, const DMO_MEDIA_TYPE *mediaType)</td></tr>
<tr class="separator:ab2dbb45aac641d580f9ee742a75c8218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50233609ed86540d2f839a09804cf8d5" id="r_a50233609ed86540d2f839a09804cf8d5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a50233609ed86540d2f839a09804cf8d5">ClearInputType</a> (DWORD inputStreamIndex)</td></tr>
<tr class="separator:a50233609ed86540d2f839a09804cf8d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf271f2f8dcaf6a8d2a84a89f05dd578" id="r_aaf271f2f8dcaf6a8d2a84a89f05dd578"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaf271f2f8dcaf6a8d2a84a89f05dd578">SetOutputType</a> (DWORD outputStreamIndex, const DMO_MEDIA_TYPE *mediaType, DWORD flags) const</td></tr>
<tr class="memdesc:aaf271f2f8dcaf6a8d2a84a89f05dd578"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the media type on an output stream, or tests whether a media type is acceptable.  <br /></td></tr>
<tr class="separator:aaf271f2f8dcaf6a8d2a84a89f05dd578"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f21c96e411ac56cedc1d4920c5d969" id="r_a59f21c96e411ac56cedc1d4920c5d969"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a59f21c96e411ac56cedc1d4920c5d969">IsValidOutputType</a> (DWORD outputStreamIndex, const DMO_MEDIA_TYPE *mediaType)</td></tr>
<tr class="separator:a59f21c96e411ac56cedc1d4920c5d969"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fad08790ae0bc53d40f8c9d24d0ed42" id="r_a2fad08790ae0bc53d40f8c9d24d0ed42"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2fad08790ae0bc53d40f8c9d24d0ed42">ClearOutputType</a> (DWORD outputStreamIndex)</td></tr>
<tr class="separator:a2fad08790ae0bc53d40f8c9d24d0ed42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13c647e115336445516c95eb8092ff53" id="r_a13c647e115336445516c95eb8092ff53"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a13c647e115336445516c95eb8092ff53">GetInputCurrentType</a> (DWORD inputStreamIndex, DMO_MEDIA_TYPE *mediaType) const</td></tr>
<tr class="memdesc:a13c647e115336445516c95eb8092ff53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the media type that was set for an input stream, if any.  <br /></td></tr>
<tr class="separator:a13c647e115336445516c95eb8092ff53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae57f47987643e8930bc09bd4c0573489" id="r_ae57f47987643e8930bc09bd4c0573489"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae57f47987643e8930bc09bd4c0573489">GetOutputCurrentType</a> (DWORD outputStreamIndex, DMO_MEDIA_TYPE *mediaType) const</td></tr>
<tr class="separator:ae57f47987643e8930bc09bd4c0573489"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a716108963cd63b22e2a295585fbec899" id="r_a716108963cd63b22e2a295585fbec899"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a716108963cd63b22e2a295585fbec899">GetInputSizeInfo</a> (DWORD iputStreamIndex, DWORD *size, DWORD *maxLookahead, DWORD *alignment) const</td></tr>
<tr class="separator:a716108963cd63b22e2a295585fbec899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d061c7f8837c4b617e385f97c88b39" id="r_a99d061c7f8837c4b617e385f97c88b39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a99d061c7f8837c4b617e385f97c88b39">GetOutputSizeInfo</a> (DWORD outputStreamIndex, DWORD *size, DWORD *alignment) const</td></tr>
<tr class="separator:a99d061c7f8837c4b617e385f97c88b39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d804f06b2df33bd883cd8e6d33a7be3" id="r_a6d804f06b2df33bd883cd8e6d33a7be3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6d804f06b2df33bd883cd8e6d33a7be3">GetInputMaxLatency</a> (DWORD inputStreamIndex, REFERENCE_TIME *maxLatency) const</td></tr>
<tr class="separator:a6d804f06b2df33bd883cd8e6d33a7be3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3930b0b9832a68bf7f549ea6a480cab3" id="r_a3930b0b9832a68bf7f549ea6a480cab3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3930b0b9832a68bf7f549ea6a480cab3">SetInputMaxLatency</a> (DWORD inputStreamIndex, REFERENCE_TIME maxLatency) const</td></tr>
<tr class="separator:a3930b0b9832a68bf7f549ea6a480cab3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214d097ec0367ecec33fa45f039bca88" id="r_a214d097ec0367ecec33fa45f039bca88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a214d097ec0367ecec33fa45f039bca88">Flush</a> () const</td></tr>
<tr class="separator:a214d097ec0367ecec33fa45f039bca88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34e27a78d6583b43492fabc462d7a33" id="r_ad34e27a78d6583b43492fabc462d7a33"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad34e27a78d6583b43492fabc462d7a33">Discontinuity</a> (DWORD inputStreamIndex) const</td></tr>
<tr class="separator:ad34e27a78d6583b43492fabc462d7a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af40e769ca71357af15f423e0e4f29f12" id="r_af40e769ca71357af15f423e0e4f29f12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af40e769ca71357af15f423e0e4f29f12">AllocateStreamingResources</a> () const</td></tr>
<tr class="separator:af40e769ca71357af15f423e0e4f29f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd95b66327ea2700e403360265488ead" id="r_acd95b66327ea2700e403360265488ead"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acd95b66327ea2700e403360265488ead">FreeStreamingResources</a> () const</td></tr>
<tr class="separator:acd95b66327ea2700e403360265488ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a742293200e305f0942d42077a78ed652" id="r_a742293200e305f0942d42077a78ed652"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a742293200e305f0942d42077a78ed652">GetInputStatus</a> (DWORD inputStreamIndex, DWORD *flags) const</td></tr>
<tr class="separator:a742293200e305f0942d42077a78ed652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada2b1d47c41849a31dc196763c61e224" id="r_ada2b1d47c41849a31dc196763c61e224"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ada2b1d47c41849a31dc196763c61e224">ProcessInput</a> (DWORD inputStreamIndex, IMediaBuffer *buffer, DWORD flags, REFERENCE_TIME timestamp, REFERENCE_TIME timelength) const</td></tr>
<tr class="separator:ada2b1d47c41849a31dc196763c61e224"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad40baebcc94abe9fae3c4313eb82abad" id="r_ad40baebcc94abe9fae3c4313eb82abad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad40baebcc94abe9fae3c4313eb82abad">ProcessOutput</a> (DWORD flags, DWORD outputBufferCount, DMO_OUTPUT_DATA_BUFFER *outputBuffers, DWORD *status) const</td></tr>
<tr class="separator:ad40baebcc94abe9fae3c4313eb82abad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8dda94c31f690f8e93c107ba9732c8b" id="r_aa8dda94c31f690f8e93c107ba9732c8b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa8dda94c31f690f8e93c107ba9732c8b">Lock</a> (LONG lock) const</td></tr>
<tr class="separator:aa8dda94c31f690f8e93c107ba9732c8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:a78d4334dbb99c84ee4954abdb6d81aac inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a78d4334dbb99c84ee4954abdb6d81aac"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a78d4334dbb99c84ee4954abdb6d81aac">Unknown</a> () noexcept</td></tr>
<tr class="separator:a78d4334dbb99c84ee4954abdb6d81aac inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69f5ff7035196e173687a01e4888796b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a69f5ff7035196e173687a01e4888796b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a69f5ff7035196e173687a01e4888796b">Unknown</a> (IUnknown *unknown, bool addref=false) noexcept</td></tr>
<tr class="separator:a69f5ff7035196e173687a01e4888796b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa320e15ec964b306c01f06c65f991687 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aa320e15ec964b306c01f06c65f991687"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aa320e15ec964b306c01f06c65f991687">Unknown</a> (REFIID iid, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;unknown, bool throwIfNoInterface=true)</td></tr>
<tr class="separator:aa320e15ec964b306c01f06c65f991687 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8f6ba8af5c4e29bdc1a31df670749db inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ae8f6ba8af5c4e29bdc1a31df670749db"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ae8f6ba8af5c4e29bdc1a31df670749db">Unknown</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) noexcept</td></tr>
<tr class="separator:ae8f6ba8af5c4e29bdc1a31df670749db inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa34bfd7783fe6f4b538c0bc2cf255da inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aaa34bfd7783fe6f4b538c0bc2cf255da"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aaa34bfd7783fe6f4b538c0bc2cf255da">Unknown</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:aaa34bfd7783fe6f4b538c0bc2cf255da inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0340a6160ee8df2afb43636ea3c2cc96 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a0340a6160ee8df2afb43636ea3c2cc96"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a0340a6160ee8df2afb43636ea3c2cc96">~Unknown</a> () noexcept</td></tr>
<tr class="separator:a0340a6160ee8df2afb43636ea3c2cc96 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea7776e184fcacef15f15492989bad20 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aea7776e184fcacef15f15492989bad20"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aea7776e184fcacef15f15492989bad20">operator bool</a> () const noexcept</td></tr>
<tr class="separator:aea7776e184fcacef15f15492989bad20 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac6386bbbc56d38a37341426fb2d0ebb inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aac6386bbbc56d38a37341426fb2d0ebb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aac6386bbbc56d38a37341426fb2d0ebb">operator=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) noexcept</td></tr>
<tr class="separator:aac6386bbbc56d38a37341426fb2d0ebb inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c193e8294db3a000d989810705ffae inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a68c193e8294db3a000d989810705ffae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a68c193e8294db3a000d989810705ffae">operator=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:a68c193e8294db3a000d989810705ffae inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa13c9df3b6057efc9f641ba7b25e802 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_afa13c9df3b6057efc9f641ba7b25e802"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#afa13c9df3b6057efc9f641ba7b25e802">swap</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) noexcept</td></tr>
<tr class="separator:afa13c9df3b6057efc9f641ba7b25e802 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96ec3ddd5df9f671a8841e44ea4d9e36 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a96ec3ddd5df9f671a8841e44ea4d9e36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a96ec3ddd5df9f671a8841e44ea4d9e36">ResetPtr</a> (IUnknown *other=nullptr, bool addRef=false) noexcept</td></tr>
<tr class="separator:a96ec3ddd5df9f671a8841e44ea4d9e36 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6adcf32990746f7310545d358aabca3 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ab6adcf32990746f7310545d358aabca3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ab6adcf32990746f7310545d358aabca3">operator=</a> (nullptr_t)</td></tr>
<tr class="separator:ab6adcf32990746f7310545d358aabca3 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6cdb2a4774d98a5df8c20ff00e7cc09 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ae6cdb2a4774d98a5df8c20ff00e7cc09"><td class="memItemLeft" align="right" valign="top">IUnknown *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ae6cdb2a4774d98a5df8c20ff00e7cc09">Detach</a> ()</td></tr>
<tr class="separator:ae6cdb2a4774d98a5df8c20ff00e7cc09 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6772461121e3555b96aa27b64ed98c8 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_af6772461121e3555b96aa27b64ed98c8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T &gt;</td></tr>
<tr class="memitem:af6772461121e3555b96aa27b64ed98c8 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#af6772461121e3555b96aa27b64ed98c8">As</a> () const</td></tr>
<tr class="separator:af6772461121e3555b96aa27b64ed98c8 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533ecb31b6dc440f37be17d984a46f9b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a533ecb31b6dc440f37be17d984a46f9b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a533ecb31b6dc440f37be17d984a46f9b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a533ecb31b6dc440f37be17d984a46f9b">Is</a> () const noexcept</td></tr>
<tr class="separator:a533ecb31b6dc440f37be17d984a46f9b inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4937fd8f5f7f2936ca5d615a9b564c76 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a4937fd8f5f7f2936ca5d615a9b564c76"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;IUnknown, T&gt;</td></tr>
<tr class="memitem:a4937fd8f5f7f2936ca5d615a9b564c76 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown_ptr.xhtml">UnknownPtr</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a4937fd8f5f7f2936ca5d615a9b564c76">As</a> () const</td></tr>
<tr class="separator:a4937fd8f5f7f2936ca5d615a9b564c76 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a63fe5f2f8ff88fa57f1f6f28a25c3434"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;IUnknown, T&gt;</td></tr>
<tr class="memitem:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a63fe5f2f8ff88fa57f1f6f28a25c3434">Is</a> () const noexcept</td></tr>
<tr class="memdesc:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function can be used to detect if an object supports a particular COM interface derived from IUnknown.  <br /></td></tr>
<tr class="separator:a63fe5f2f8ff88fa57f1f6f28a25c3434 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7be8f6723282945fd05ba1192f31c655 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a7be8f6723282945fd05ba1192f31c655"><td class="memTemplParams" colspan="2">template&lt;typename T  = IUnknown&gt; </td></tr>
<tr class="memitem:a7be8f6723282945fd05ba1192f31c655 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a7be8f6723282945fd05ba1192f31c655">GetInterfacePointer</a> () const noexcept</td></tr>
<tr class="separator:a7be8f6723282945fd05ba1192f31c655 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae99f7606e4d988d7e42823011cc1d582 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ae99f7606e4d988d7e42823011cc1d582"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ae99f7606e4d988d7e42823011cc1d582">QueryInterface</a> (REFIID riid, void **itf) const</td></tr>
<tr class="memdesc:ae99f7606e4d988d7e42823011cc1d582 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries a COM object for a pointer to one of its interface; identifying the interface by a reference to its interface identifier (IID). If the COM object implements the interface, then it returns a pointer to that interface after calling IUnknown::AddRef on it.  <br /></td></tr>
<tr class="separator:ae99f7606e4d988d7e42823011cc1d582 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c4e069cda382fce78ae58cb6da46714 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a8c4e069cda382fce78ae58cb6da46714"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;IUnknown, T&gt;</td></tr>
<tr class="memitem:a8c4e069cda382fce78ae58cb6da46714 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a8c4e069cda382fce78ae58cb6da46714">QueryInterface</a> (T **itf) const</td></tr>
<tr class="separator:a8c4e069cda382fce78ae58cb6da46714 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e4b0e32a3c8ccb4761874eb894e6a23 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a2e4b0e32a3c8ccb4761874eb894e6a23"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a2e4b0e32a3c8ccb4761874eb894e6a23">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a2e4b0e32a3c8ccb4761874eb894e6a23 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a767edfb442d605bef709a7ae919d3ddd inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a767edfb442d605bef709a7ae919d3ddd"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a767edfb442d605bef709a7ae919d3ddd">operator!=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a767edfb442d605bef709a7ae919d3ddd inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d105bec2461e4604138e28bb50666a0 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a2d105bec2461e4604138e28bb50666a0"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a2d105bec2461e4604138e28bb50666a0">operator==</a> (const IUnknown *other) const noexcept</td></tr>
<tr class="separator:a2d105bec2461e4604138e28bb50666a0 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8551309727841a5f812a239e1e53e1a inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_ad8551309727841a5f812a239e1e53e1a"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#ad8551309727841a5f812a239e1e53e1a">operator!=</a> (const IUnknown *other) const noexcept</td></tr>
<tr class="separator:ad8551309727841a5f812a239e1e53e1a inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:aa59c0cdea0194ce66f73d477126e40bc inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aa59c0cdea0194ce66f73d477126e40bc"><td class="memItemLeft" align="right" valign="top">typedef IUnknown&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aa59c0cdea0194ce66f73d477126e40bc">InterfaceType</a></td></tr>
<tr class="separator:aa59c0cdea0194ce66f73d477126e40bc inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:a53934808e8bc16aae6c312e16200f38c inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a53934808e8bc16aae6c312e16200f38c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a53934808e8bc16aae6c312e16200f38c inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a53934808e8bc16aae6c312e16200f38c">CoCreateInstanceFromClassId</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aeda58257f3f008fc31abc56e9c8635feacd880fe2ccbc139f0c0780f873ad5b3d">CLSID</a> &amp;clsid, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a53934808e8bc16aae6c312e16200f38c inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a04fc32e5cb30da5304d5ba698ffcd2 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a2a04fc32e5cb30da5304d5ba698ffcd2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a2a04fc32e5cb30da5304d5ba698ffcd2 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a2a04fc32e5cb30da5304d5ba698ffcd2">CoCreateInstanceFromClassId</a> (const wchar_t *clsid, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a2a04fc32e5cb30da5304d5ba698ffcd2 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd974cb14b75e77172186c55df46a6c4 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_acd974cb14b75e77172186c55df46a6c4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:acd974cb14b75e77172186c55df46a6c4 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#acd974cb14b75e77172186c55df46a6c4">CoCreateInstanceFromClassId</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> &amp;clsid, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:acd974cb14b75e77172186c55df46a6c4 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40f9f85791fedb8b6c441ed11cd89d6a inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a40f9f85791fedb8b6c441ed11cd89d6a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a40f9f85791fedb8b6c441ed11cd89d6a inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a40f9f85791fedb8b6c441ed11cd89d6a">CoCreateInstanceFromProgId</a> (const wchar_t *progId, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a40f9f85791fedb8b6c441ed11cd89d6a inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a846f601b5b267cbc515797fdbc11718b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a846f601b5b267cbc515797fdbc11718b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:a846f601b5b267cbc515797fdbc11718b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a846f601b5b267cbc515797fdbc11718b">CoCreateInstanceFromProgId</a> (const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> &amp;progId, DWORD classContext=CLSCTX_INPROC_SERVER)</td></tr>
<tr class="separator:a846f601b5b267cbc515797fdbc11718b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee525bdbb1fd840a8645b8f81fdbe947 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_aee525bdbb1fd840a8645b8f81fdbe947"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_base_of_v&lt;<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Unknown</a>, T&gt;</td></tr>
<tr class="memitem:aee525bdbb1fd840a8645b8f81fdbe947 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#aee525bdbb1fd840a8645b8f81fdbe947">CoCreateInstanceFromDll</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_module_handle.xhtml">ModuleHandle</a> &amp;dll, const <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aeda58257f3f008fc31abc56e9c8635feacd880fe2ccbc139f0c0780f873ad5b3d">CLSID</a> &amp;clsid)</td></tr>
<tr class="separator:aee525bdbb1fd840a8645b8f81fdbe947 inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml">Harlinn::Common::Core::Unknown</a></td></tr>
<tr class="memitem:a5dc7a66bd9d439796518ca9cd60643d4 inherit pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown" id="r_a5dc7a66bd9d439796518ca9cd60643d4"><td class="memItemLeft" align="right" valign="top">IUnknown *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_unknown.xhtml#a5dc7a66bd9d439796518ca9cd60643d4">unknown_</a></td></tr>
<tr class="separator:a5dc7a66bd9d439796518ca9cd60643d4 inherit pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_unknown"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The <a class="el" href="class_harlinn_1_1_windows_1_1_media_object.xhtml" title="The MediaObject class provides functions for manipulating a Microsoft DirectX Media Object.">MediaObject</a> class provides functions for manipulating a Microsoft DirectX Media Object. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="af40e769ca71357af15f423e0e4f29f12" name="af40e769ca71357af15f423e0e4f29f12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af40e769ca71357af15f423e0e4f29f12">&#9670;&#160;</a></span>AllocateStreamingResources()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::AllocateStreamingResources </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a50233609ed86540d2f839a09804cf8d5" name="a50233609ed86540d2f839a09804cf8d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50233609ed86540d2f839a09804cf8d5">&#9670;&#160;</a></span>ClearInputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::ClearInputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2fad08790ae0bc53d40f8c9d24d0ed42" name="a2fad08790ae0bc53d40f8c9d24d0ed42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fad08790ae0bc53d40f8c9d24d0ed42">&#9670;&#160;</a></span>ClearOutputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::ClearOutputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad34e27a78d6583b43492fabc462d7a33" name="ad34e27a78d6583b43492fabc462d7a33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad34e27a78d6583b43492fabc462d7a33">&#9670;&#160;</a></span>Discontinuity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::Discontinuity </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a214d097ec0367ecec33fa45f039bca88" name="a214d097ec0367ecec33fa45f039bca88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a214d097ec0367ecec33fa45f039bca88">&#9670;&#160;</a></span>Flush()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::Flush </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acd95b66327ea2700e403360265488ead" name="acd95b66327ea2700e403360265488ead"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd95b66327ea2700e403360265488ead">&#9670;&#160;</a></span>FreeStreamingResources()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::FreeStreamingResources </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a13c647e115336445516c95eb8092ff53" name="a13c647e115336445516c95eb8092ff53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13c647e115336445516c95eb8092ff53">&#9670;&#160;</a></span>GetInputCurrentType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::GetInputCurrentType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the media type that was set for an input stream, if any. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inputStreamIndex</td><td>Zero-based index of an input stream </td></tr>
    <tr><td class="paramname">mediaType</td><td>Pointer to a DMO_MEDIA_TYPE structure allocated by the caller. The method fills the structure with the media type. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success, false if media type was not set. </dd></dl>
<p>The caller must set the media type for the stream before calling this method. To set the media type, call the <a class="el" href="#a7f8d6381d70a1829e80e6a4d477a0df4" title="Sets the media type on an input stream, or tests whether a media type is acceptable.">MediaObject::SetInputType</a> method. </p>
<p>If the method succeeds, call MoFreeMediaType to free the format block. </p>

</div>
</div>
<a id="a6d804f06b2df33bd883cd8e6d33a7be3" name="a6d804f06b2df33bd883cd8e6d33a7be3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d804f06b2df33bd883cd8e6d33a7be3">&#9670;&#160;</a></span>GetInputMaxLatency()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetInputMaxLatency </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">REFERENCE_TIME *</td>          <td class="paramname"><span class="paramname"><em>maxLatency</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a716108963cd63b22e2a295585fbec899" name="a716108963cd63b22e2a295585fbec899"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a716108963cd63b22e2a295585fbec899">&#9670;&#160;</a></span>GetInputSizeInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetInputSizeInfo </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>iputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>size</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>maxLookahead</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>alignment</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a742293200e305f0942d42077a78ed652" name="a742293200e305f0942d42077a78ed652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a742293200e305f0942d42077a78ed652">&#9670;&#160;</a></span>GetInputStatus()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetInputStatus </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab64ad62d9873295dcc48c6c685b00f7b" name="ab64ad62d9873295dcc48c6c685b00f7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab64ad62d9873295dcc48c6c685b00f7b">&#9670;&#160;</a></span>GetInputStreamInfo() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">DWORD Harlinn::Windows::MediaObject::GetInputStreamInfo </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad8bfcf7e3c9233d79b5154905a239402" name="ad8bfcf7e3c9233d79b5154905a239402"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8bfcf7e3c9233d79b5154905a239402">&#9670;&#160;</a></span>GetInputStreamInfo() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetInputStreamInfo </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves information about an input stream, such as any restrictions on the number of samples per buffer, and whether the stream performs lookahead on the input data. This information never changes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inputStreamIndex</td><td>Zero-based index of an input stream. </td></tr>
    <tr><td class="paramname">flags</td><td>Pointer to a variable that receives a bitwise combination of zero or more _DMO_INPUT_STREAM_INFO_FLAGS flags. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ade27f8a4202d89571d154db78ee55728" name="ade27f8a4202d89571d154db78ee55728"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade27f8a4202d89571d154db78ee55728">&#9670;&#160;</a></span>GetInputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::GetInputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>typeIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves a preferred media type for a specified input stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inputStreamIndex</td><td>Zero-based index of an input stream </td></tr>
    <tr><td class="paramname">typeIndex</td><td>Zero-based index on the set of acceptable media types. </td></tr>
    <tr><td class="paramname">mediaType</td><td>Pointer to a DMO_MEDIA_TYPE structure allocated by the caller, or nullptr. If this parameter is non-NULL, the method fills the structure with the media type. You can use the value NULL to test whether the type index is in range, by checking the return code. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success, or false if the typeIndex is out of range. </dd></dl>
<p>Call this method to enumerate an input stream's preferred media types. The DMO assigns each media type an index value in order of preference. The most preferred type has an index of zero. To enumerate all the types, make successive calls while incrementing the type index until the method returns false. The DMO is not guaranteed to enumerate every media type that it supports. </p>
<p>The format block in the returned type might be NULL. If so, the format type is GUID_NULL. Check the format type before dereferencing the format block. </p>
<p>If the method succeeds, call MoFreeMediaType to free the format block. (This function is also safe to call when the format block is NULL.) </p>
<p>To set the media type, call the <a class="el" href="#a7f8d6381d70a1829e80e6a4d477a0df4" title="Sets the media type on an input stream, or tests whether a media type is acceptable.">MediaObject::SetInputType</a> method. Setting the media type on one stream can change another stream's preferred types. In fact, a stream might not have a preferred type until the type is set on another stream. For example, a decoder might not have a preferred output type until the input type is set. However, the DMO is not required to update its preferred types dynamically in this fashion. Thus, the types returned by this method are not guaranteed to be valid; they might fail when used in the SetInputType method. </p>
<p>To test whether a particular media type is acceptable, call SetInputType with the DMO_SET_TYPEF_TEST_ONLY flag. </p>
<p>To test whether the typeIndex parameter is in range, set mediaType to NULL. The method returns true if the index is in range, or false if the index is out of range. </p>

</div>
</div>
<a id="ae57f47987643e8930bc09bd4c0573489" name="ae57f47987643e8930bc09bd4c0573489"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae57f47987643e8930bc09bd4c0573489">&#9670;&#160;</a></span>GetOutputCurrentType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::GetOutputCurrentType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a99d061c7f8837c4b617e385f97c88b39" name="a99d061c7f8837c4b617e385f97c88b39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99d061c7f8837c4b617e385f97c88b39">&#9670;&#160;</a></span>GetOutputSizeInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetOutputSizeInfo </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>size</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>alignment</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0745733142b20882bbc7020fff8f9d30" name="a0745733142b20882bbc7020fff8f9d30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0745733142b20882bbc7020fff8f9d30">&#9670;&#160;</a></span>GetOutputStreamInfo() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">DWORD Harlinn::Windows::MediaObject::GetOutputStreamInfo </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad536db3e6121d2a1b7251ab8ba7fc663" name="ad536db3e6121d2a1b7251ab8ba7fc663"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad536db3e6121d2a1b7251ab8ba7fc663">&#9670;&#160;</a></span>GetOutputStreamInfo() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetOutputStreamInfo </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves information about an output stream; for example, whether the stream is discardable, and whether it uses a fixed sample size. This information never changes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">outputStreamIndex</td><td>Zero-based index of an output stream </td></tr>
    <tr><td class="paramname">flags</td><td>Pointer to a variable that receives a bitwise combination of zero or more _DMO_OUTPUT_STREAM_INFO_FLAGS flags. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a24d189ffa2aeba5ed2dd39dd816161a1" name="a24d189ffa2aeba5ed2dd39dd816161a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24d189ffa2aeba5ed2dd39dd816161a1">&#9670;&#160;</a></span>GetOutputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::GetOutputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>typeIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves a preferred media type for a specified output stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">outputStreamIndex</td><td>Zero-based index of an output stream </td></tr>
    <tr><td class="paramname">typeIndex</td><td>Zero-based index on the set of acceptable media types. </td></tr>
    <tr><td class="paramname">mediaType</td><td>Pointer to a DMO_MEDIA_TYPE structure allocated by the caller, or NULL. If this parameter is non-NULL, the method fills the structure with the media type. You can use the value NULL to test whether the type index is in range, by checking the return code. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success, or false if the typeIndex is out of range. </dd></dl>
<p>Call this method to enumerate an output stream's preferred media types. The DMO assigns each media type an index value, in order of preference. The most preferred type has an index of zero. To enumerate all the types, make successive calls while incrementing the type index, until the method returns false. The DMO is not guaranteed to enumerate every media type that it supports. </p>
<p>The format block in the returned type might be NULL. If so, the format type is GUID_NULL. You should check the format type before dereferencing the format block. </p>
<p>If the method succeeds, call MoFreeMediaType to free the format block. (This function is also safe to call when the format block is NULL.) </p>
<p>To set the media type, call the <a class="el" href="#aaf271f2f8dcaf6a8d2a84a89f05dd578" title="Sets the media type on an output stream, or tests whether a media type is acceptable.">MediaObject::SetOutputType</a> method. Setting the media type on one stream can change another stream's preferred types. In fact, a stream might not have a preferred type until the type is set on another stream. For example, a decoder might not have a preferred output type until the input type is set. However, the DMO is not required to update its preferred types dynamically in this fashion. Thus, the types returned by this method are not guaranteed to be valid; they might fail when used in the SetOutputType method. </p>
<p>To test whether a particular media type is acceptable, call SetOutputType with the DMO_SET_TYPEF_TEST_ONLY flag. </p>
<p>To test whether the typeIndex parameter is in range, set mediaType to NULL. The method returns true if the index is in range, or false if the index is out of range. </p>

</div>
</div>
<a id="a41bcf6e835fb26c2241fde64dca1efac" name="a41bcf6e835fb26c2241fde64dca1efac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41bcf6e835fb26c2241fde64dca1efac">&#9670;&#160;</a></span>GetStreamCount() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_harlinn_1_1_windows_1_1_media_object_1_1_stream_count.xhtml">StreamCount</a> Harlinn::Windows::MediaObject::GetStreamCount </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae822fd24d8bf35ed37d62250c3197bc2" name="ae822fd24d8bf35ed37d62250c3197bc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae822fd24d8bf35ed37d62250c3197bc2">&#9670;&#160;</a></span>GetStreamCount() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::GetStreamCount </td>
          <td>(</td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>numberOfInputStreams</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>numberOfOutputStreams</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the number of input and output streams. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">numberOfInputStreams</td><td>Pointer to a variable that receives the number of input streams. </td></tr>
    <tr><td class="paramname">numberOfOutputStreams</td><td>Pointer to a variable that receives the number of output streams. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

</div>
</div>
<a id="ab2dbb45aac641d580f9ee742a75c8218" name="ab2dbb45aac641d580f9ee742a75c8218"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2dbb45aac641d580f9ee742a75c8218">&#9670;&#160;</a></span>IsValidInputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::IsValidInputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a59f21c96e411ac56cedc1d4920c5d969" name="a59f21c96e411ac56cedc1d4920c5d969"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59f21c96e411ac56cedc1d4920c5d969">&#9670;&#160;</a></span>IsValidOutputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::IsValidOutputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa8dda94c31f690f8e93c107ba9732c8b" name="aa8dda94c31f690f8e93c107ba9732c8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8dda94c31f690f8e93c107ba9732c8b">&#9670;&#160;</a></span>Lock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::Lock </td>
          <td>(</td>
          <td class="paramtype">LONG</td>          <td class="paramname"><span class="paramname"><em>lock</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ada2b1d47c41849a31dc196763c61e224" name="ada2b1d47c41849a31dc196763c61e224"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada2b1d47c41849a31dc196763c61e224">&#9670;&#160;</a></span>ProcessInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::ProcessInput </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IMediaBuffer *</td>          <td class="paramname"><span class="paramname"><em>buffer</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>flags</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">REFERENCE_TIME</td>          <td class="paramname"><span class="paramname"><em>timestamp</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">REFERENCE_TIME</td>          <td class="paramname"><span class="paramname"><em>timelength</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad40baebcc94abe9fae3c4313eb82abad" name="ad40baebcc94abe9fae3c4313eb82abad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad40baebcc94abe9fae3c4313eb82abad">&#9670;&#160;</a></span>ProcessOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::ProcessOutput </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>flags</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputBufferCount</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DMO_OUTPUT_DATA_BUFFER *</td>          <td class="paramname"><span class="paramname"><em>outputBuffers</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD *</td>          <td class="paramname"><span class="paramname"><em>status</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3930b0b9832a68bf7f549ea6a480cab3" name="a3930b0b9832a68bf7f549ea6a480cab3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3930b0b9832a68bf7f549ea6a480cab3">&#9670;&#160;</a></span>SetInputMaxLatency()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::MediaObject::SetInputMaxLatency </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">REFERENCE_TIME</td>          <td class="paramname"><span class="paramname"><em>maxLatency</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7f8d6381d70a1829e80e6a4d477a0df4" name="a7f8d6381d70a1829e80e6a4d477a0df4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f8d6381d70a1829e80e6a4d477a0df4">&#9670;&#160;</a></span>SetInputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::SetInputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>inputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>flags</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the media type on an input stream, or tests whether a media type is acceptable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inputStreamIndex</td><td>Zero-based index of an input stream </td></tr>
    <tr><td class="paramname">mediaType</td><td>Pointer to a DMO_MEDIA_TYPE structure that specifies the media type. </td></tr>
    <tr><td class="paramname">flags</td><td>Bitwise combination of zero or more flags from the DMO_SET_TYPE_FLAGS enumeration. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success, false if flags was equal to DMO_SET_TYPEF_TEST_ONLY and the mediaType was not acceptable. </dd></dl>
<p>Call this method to test, set, or clear the media type on an input stream: </p>
<ul>
<li>
To test the media type without setting it, use the DMO_SET_TYPEF_TEST_ONLY flag. If the media type is not acceptable, the method returns false.  </li>
<li>
To set the media type, set flags to zero. If the media type is not acceptable, the method throws an exception for DMO_E_TYPE_NOT_ACCEPTED.  </li>
<li>
To clear the current media type (if any), use the DMO_SET_TYPEF_CLEAR flag and set mediaType to NULL. When the method returns, the stream no longer has a media type. The DMO cannot process samples until the application sets a new media type.  </li>
</ul>
<p>The media types that are currently set on other streams can affect whether the media type is acceptable. </p>

</div>
</div>
<a id="aaf271f2f8dcaf6a8d2a84a89f05dd578" name="aaf271f2f8dcaf6a8d2a84a89f05dd578"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf271f2f8dcaf6a8d2a84a89f05dd578">&#9670;&#160;</a></span>SetOutputType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::MediaObject::SetOutputType </td>
          <td>(</td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>outputStreamIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DMO_MEDIA_TYPE *</td>          <td class="paramname"><span class="paramname"><em>mediaType</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DWORD</td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the media type on an output stream, or tests whether a media type is acceptable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">outputStreamIndex</td><td>Zero-based index of an output stream </td></tr>
    <tr><td class="paramname">mediaType</td><td>ointer to a DMO_MEDIA_TYPE structure that specifies the media type. </td></tr>
    <tr><td class="paramname">flags</td><td>Bitwise combination of zero or more flags from the DMO_SET_TYPE_FLAGS enumeration. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success, false if flags was equal to DMO_SET_TYPEF_TEST_ONLY and the mediaType was not acceptable. </dd></dl>
<p>Call this method to test, set, or clear the media type on an input stream: </p>
<ul>
<li>
To test the media type without setting it, use the DMO_SET_TYPEF_TEST_ONLY flag. If the media type is not acceptable, the method returns false.  </li>
<li>
To set the media type, set flags to zero. If the media type is not acceptable, the method throws an exception for DMO_E_TYPE_NOT_ACCEPTED.  </li>
<li>
To clear the current media type (if any), use the DMO_SET_TYPEF_CLEAR flag and set mediaType to NULL. When the method returns, the stream no longer has a media type. The DMO cannot process samples until the application sets a new media type.  </li>
</ul>
<p>The media types that are currently set on other streams can affect whether the media type is acceptable. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_w_media_obj_8h.xhtml">HWMediaObj.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_windows.xhtml">Windows</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_windows_1_1_media_object.xhtml">MediaObject</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

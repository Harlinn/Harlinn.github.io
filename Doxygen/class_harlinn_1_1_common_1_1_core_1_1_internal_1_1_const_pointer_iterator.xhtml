<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::Internal::ConstPointerIterator&lt; ContainerT &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::Internal::ConstPointerIterator&lt; ContainerT &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;HCCIterator.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Common::Core::Internal::ConstPointerIterator&lt; ContainerT &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator__inherit__graph.svg" width="206" height="168"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:add41aed43c6ed06a6d756cda1a485fa4" id="r_add41aed43c6ed06a6d756cda1a485fa4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#add41aed43c6ed06a6d756cda1a485fa4">ContainerType</a> = ContainerT</td></tr>
<tr class="separator:add41aed43c6ed06a6d756cda1a485fa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a146bfe111e1f940a022e27d61e0163f8" id="r_a146bfe111e1f940a022e27d61e0163f8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a146bfe111e1f940a022e27d61e0163f8">iterator_concept</a> = std::contiguous_iterator_tag</td></tr>
<tr class="separator:a146bfe111e1f940a022e27d61e0163f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80972eba98485be136926943b8d3fd1" id="r_ae80972eba98485be136926943b8d3fd1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae80972eba98485be136926943b8d3fd1">iterator_category</a> = std::random_access_iterator_tag</td></tr>
<tr class="separator:ae80972eba98485be136926943b8d3fd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad035b74144933252f55313ad8a628176" id="r_ad035b74144933252f55313ad8a628176"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad035b74144933252f55313ad8a628176">value_type</a> = typename ContainerType::value_type</td></tr>
<tr class="separator:ad035b74144933252f55313ad8a628176"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2f67316e6329c7c37d8a033a212c12" id="r_aaa2f67316e6329c7c37d8a033a212c12"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> = typename ContainerType::difference_type</td></tr>
<tr class="separator:aaa2f67316e6329c7c37d8a033a212c12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa89b419f8fd1d1ed362f36a3b4d3e6e7" id="r_aa89b419f8fd1d1ed362f36a3b4d3e6e7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a> = typename ContainerType::const_pointer</td></tr>
<tr class="separator:aa89b419f8fd1d1ed362f36a3b4d3e6e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a937801ebbea5f4e1e8a8856e6d1bc" id="r_a43a937801ebbea5f4e1e8a8856e6d1bc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a43a937801ebbea5f4e1e8a8856e6d1bc">Pointer</a> = typename ContainerType::pointer</td></tr>
<tr class="separator:a43a937801ebbea5f4e1e8a8856e6d1bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe60197c2a7b43abde383575347cd7d8" id="r_afe60197c2a7b43abde383575347cd7d8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afe60197c2a7b43abde383575347cd7d8">reference</a> = const <a class="el" href="#ad035b74144933252f55313ad8a628176">value_type</a>&amp;</td></tr>
<tr class="separator:afe60197c2a7b43abde383575347cd7d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a698139e7096326c80bb81c6e9e05b939" id="r_a698139e7096326c80bb81c6e9e05b939"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a698139e7096326c80bb81c6e9e05b939">ConstPointerIterator</a> () noexcept</td></tr>
<tr class="separator:a698139e7096326c80bb81c6e9e05b939"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57d976acd6bc92bcae41470fc8e8e9ec" id="r_a57d976acd6bc92bcae41470fc8e8e9ec"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a57d976acd6bc92bcae41470fc8e8e9ec">ConstPointerIterator</a> (<a class="el" href="#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a> ptr) noexcept</td></tr>
<tr class="separator:a57d976acd6bc92bcae41470fc8e8e9ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4eae753a7acb279ceade9e7911bf71f" id="r_ae4eae753a7acb279ceade9e7911bf71f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae4eae753a7acb279ceade9e7911bf71f">ConstPointerIterator</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other, const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:ae4eae753a7acb279ceade9e7911bf71f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb95bb36534adfc772e1e6225f894c1c" id="r_abb95bb36534adfc772e1e6225f894c1c"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#afe60197c2a7b43abde383575347cd7d8">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abb95bb36534adfc772e1e6225f894c1c">operator*</a> () const noexcept</td></tr>
<tr class="separator:abb95bb36534adfc772e1e6225f894c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa16df62702743ca77d6b2fab1f55043a" id="r_aa16df62702743ca77d6b2fab1f55043a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa16df62702743ca77d6b2fab1f55043a">operator-&gt;</a> () const noexcept</td></tr>
<tr class="separator:aa16df62702743ca77d6b2fab1f55043a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab604eea805464b2a72c80d70e88474c6" id="r_ab604eea805464b2a72c80d70e88474c6"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab604eea805464b2a72c80d70e88474c6">operator++</a> () noexcept</td></tr>
<tr class="separator:ab604eea805464b2a72c80d70e88474c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2e6f0f57c7e647dd7ce556ae65accf2" id="r_ad2e6f0f57c7e647dd7ce556ae65accf2"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad2e6f0f57c7e647dd7ce556ae65accf2">operator++</a> (int) noexcept</td></tr>
<tr class="separator:ad2e6f0f57c7e647dd7ce556ae65accf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37ab8a4c2cc181551a23de1c20cd16d7" id="r_a37ab8a4c2cc181551a23de1c20cd16d7"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a37ab8a4c2cc181551a23de1c20cd16d7">operator--</a> () noexcept</td></tr>
<tr class="separator:a37ab8a4c2cc181551a23de1c20cd16d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f7400e389e7944adab775983d93d4b3" id="r_a7f7400e389e7944adab775983d93d4b3"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f7400e389e7944adab775983d93d4b3">operator--</a> (int) noexcept</td></tr>
<tr class="separator:a7f7400e389e7944adab775983d93d4b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7fcd316ce11fc2a4eafba69065e36f" id="r_a6f7fcd316ce11fc2a4eafba69065e36f"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6f7fcd316ce11fc2a4eafba69065e36f">operator+=</a> (const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:a6f7fcd316ce11fc2a4eafba69065e36f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51806992225ffdc9d94c3b5c23a5df13" id="r_a51806992225ffdc9d94c3b5c23a5df13"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a51806992225ffdc9d94c3b5c23a5df13">operator+</a> (const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a51806992225ffdc9d94c3b5c23a5df13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf7ce39127bf03d0f6e062b7dff9f687" id="r_adf7ce39127bf03d0f6e062b7dff9f687"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adf7ce39127bf03d0f6e062b7dff9f687">operator-=</a> (const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:adf7ce39127bf03d0f6e062b7dff9f687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a294ad0f31d1a0ddbf55695a4da9a1e39" id="r_a294ad0f31d1a0ddbf55695a4da9a1e39"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a294ad0f31d1a0ddbf55695a4da9a1e39">operator-</a> (const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a294ad0f31d1a0ddbf55695a4da9a1e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac553e4592e36ec118714a93c292f6715" id="r_ac553e4592e36ec118714a93c292f6715"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac553e4592e36ec118714a93c292f6715">operator-</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ac553e4592e36ec118714a93c292f6715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33d5d479ba7182fff8f6e090dd4a2e51" id="r_a33d5d479ba7182fff8f6e090dd4a2e51"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#afe60197c2a7b43abde383575347cd7d8">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a33d5d479ba7182fff8f6e090dd4a2e51">operator[]</a> (const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a33d5d479ba7182fff8f6e090dd4a2e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5896f2824bc8ecbfea7b05ad0a4390c" id="r_aa5896f2824bc8ecbfea7b05ad0a4390c"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa5896f2824bc8ecbfea7b05ad0a4390c">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:aa5896f2824bc8ecbfea7b05ad0a4390c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0eaca79cb14b0e7d8c72ae2b9a42e6d" id="r_ac0eaca79cb14b0e7d8c72ae2b9a42e6d"><td class="memItemLeft" align="right" valign="top">constexpr std::strong_ordering&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac0eaca79cb14b0e7d8c72ae2b9a42e6d">operator&lt;=&gt;</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ac0eaca79cb14b0e7d8c72ae2b9a42e6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a68336f231698a36c5fdb97e3a6ebd64a" id="r_a68336f231698a36c5fdb97e3a6ebd64a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a43a937801ebbea5f4e1e8a8856e6d1bc">Pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a68336f231698a36c5fdb97e3a6ebd64a">ptr_</a></td></tr>
<tr class="separator:a68336f231698a36c5fdb97e3a6ebd64a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aa8e41c2af702e710e82301d4dba9ced2" id="r_aa8e41c2af702e710e82301d4dba9ced2"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa8e41c2af702e710e82301d4dba9ced2">operator+</a> (const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> lhs, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;rhs) noexcept</td></tr>
<tr class="separator:aa8e41c2af702e710e82301d4dba9ced2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="add41aed43c6ed06a6d756cda1a485fa4" name="add41aed43c6ed06a6d756cda1a485fa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add41aed43c6ed06a6d756cda1a485fa4">&#9670;&#160;</a></span>ContainerType</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::ContainerType = ContainerT</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaa2f67316e6329c7c37d8a033a212c12" name="aaa2f67316e6329c7c37d8a033a212c12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa2f67316e6329c7c37d8a033a212c12">&#9670;&#160;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::difference_type = typename ContainerType::difference_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae80972eba98485be136926943b8d3fd1" name="ae80972eba98485be136926943b8d3fd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae80972eba98485be136926943b8d3fd1">&#9670;&#160;</a></span>iterator_category</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::iterator_category = std::random_access_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a146bfe111e1f940a022e27d61e0163f8" name="a146bfe111e1f940a022e27d61e0163f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a146bfe111e1f940a022e27d61e0163f8">&#9670;&#160;</a></span>iterator_concept</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::iterator_concept = std::contiguous_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a43a937801ebbea5f4e1e8a8856e6d1bc" name="a43a937801ebbea5f4e1e8a8856e6d1bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43a937801ebbea5f4e1e8a8856e6d1bc">&#9670;&#160;</a></span>Pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::Pointer = typename ContainerType::pointer</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa89b419f8fd1d1ed362f36a3b4d3e6e7" name="aa89b419f8fd1d1ed362f36a3b4d3e6e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa89b419f8fd1d1ed362f36a3b4d3e6e7">&#9670;&#160;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::pointer = typename ContainerType::const_pointer</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afe60197c2a7b43abde383575347cd7d8" name="afe60197c2a7b43abde383575347cd7d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe60197c2a7b43abde383575347cd7d8">&#9670;&#160;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::reference = const <a class="el" href="#ad035b74144933252f55313ad8a628176">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad035b74144933252f55313ad8a628176" name="ad035b74144933252f55313ad8a628176"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad035b74144933252f55313ad8a628176">&#9670;&#160;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::value_type = typename ContainerType::value_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a698139e7096326c80bb81c6e9e05b939" name="a698139e7096326c80bb81c6e9e05b939"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a698139e7096326c80bb81c6e9e05b939">&#9670;&#160;</a></span>ConstPointerIterator() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::ConstPointerIterator </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a57d976acd6bc92bcae41470fc8e8e9ec" name="a57d976acd6bc92bcae41470fc8e8e9ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57d976acd6bc92bcae41470fc8e8e9ec">&#9670;&#160;</a></span>ConstPointerIterator() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::ConstPointerIterator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a></td>          <td class="paramname"><span class="paramname"><em>ptr</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae4eae753a7acb279ceade9e7911bf71f" name="ae4eae753a7acb279ceade9e7911bf71f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4eae753a7acb279ceade9e7911bf71f">&#9670;&#160;</a></span>ConstPointerIterator() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::ConstPointerIterator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abb95bb36534adfc772e1e6225f894c1c" name="abb95bb36534adfc772e1e6225f894c1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb95bb36534adfc772e1e6225f894c1c">&#9670;&#160;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#afe60197c2a7b43abde383575347cd7d8">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a51806992225ffdc9d94c3b5c23a5df13" name="a51806992225ffdc9d94c3b5c23a5df13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51806992225ffdc9d94c3b5c23a5df13">&#9670;&#160;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab604eea805464b2a72c80d70e88474c6" name="ab604eea805464b2a72c80d70e88474c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab604eea805464b2a72c80d70e88474c6">&#9670;&#160;</a></span>operator++() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator++ </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad2e6f0f57c7e647dd7ce556ae65accf2" name="ad2e6f0f57c7e647dd7ce556ae65accf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2e6f0f57c7e647dd7ce556ae65accf2">&#9670;&#160;</a></span>operator++() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator++ </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6f7fcd316ce11fc2a4eafba69065e36f" name="a6f7fcd316ce11fc2a4eafba69065e36f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f7fcd316ce11fc2a4eafba69065e36f">&#9670;&#160;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac553e4592e36ec118714a93c292f6715" name="ac553e4592e36ec118714a93c292f6715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac553e4592e36ec118714a93c292f6715">&#9670;&#160;</a></span>operator-() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a294ad0f31d1a0ddbf55695a4da9a1e39" name="a294ad0f31d1a0ddbf55695a4da9a1e39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a294ad0f31d1a0ddbf55695a4da9a1e39">&#9670;&#160;</a></span>operator-() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a37ab8a4c2cc181551a23de1c20cd16d7" name="a37ab8a4c2cc181551a23de1c20cd16d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37ab8a4c2cc181551a23de1c20cd16d7">&#9670;&#160;</a></span>operator--() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator-- </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7f7400e389e7944adab775983d93d4b3" name="a7f7400e389e7944adab775983d93d4b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f7400e389e7944adab775983d93d4b3">&#9670;&#160;</a></span>operator--() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator-- </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adf7ce39127bf03d0f6e062b7dff9f687" name="adf7ce39127bf03d0f6e062b7dff9f687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf7ce39127bf03d0f6e062b7dff9f687">&#9670;&#160;</a></span>operator-=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa16df62702743ca77d6b2fab1f55043a" name="aa16df62702743ca77d6b2fab1f55043a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa16df62702743ca77d6b2fab1f55043a">&#9670;&#160;</a></span>operator-&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac0eaca79cb14b0e7d8c72ae2b9a42e6d" name="ac0eaca79cb14b0e7d8c72ae2b9a42e6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0eaca79cb14b0e7d8c72ae2b9a42e6d">&#9670;&#160;</a></span>operator&lt;=&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::strong_ordering <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator&lt;=&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa5896f2824bc8ecbfea7b05ad0a4390c" name="aa5896f2824bc8ecbfea7b05ad0a4390c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5896f2824bc8ecbfea7b05ad0a4390c">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a33d5d479ba7182fff8f6e090dd4a2e51" name="a33d5d479ba7182fff8f6e090dd4a2e51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33d5d479ba7182fff8f6e090dd4a2e51">&#9670;&#160;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#afe60197c2a7b43abde383575347cd7d8">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Friends And Related Symbol Documentation</h2>
<a id="aa8e41c2af702e710e82301d4dba9ced2" name="aa8e41c2af702e710e82301d4dba9ced2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8e41c2af702e710e82301d4dba9ced2">&#9670;&#160;</a></span>operator+</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a68336f231698a36c5fdb97e3a6ebd64a" name="a68336f231698a36c5fdb97e3a6ebd64a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68336f231698a36c5fdb97e3a6ebd64a">&#9670;&#160;</a></span>ptr_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a43a937801ebbea5f4e1e8a8856e6d1bc">Pointer</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::ptr_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_c_c_iterator_8h.xhtml">HCCIterator.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_internal.xhtml">Internal</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

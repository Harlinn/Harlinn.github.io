<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::Currency Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_currency-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::Currency Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml" title="Currency are stored as 64-bit integer, scaled by 10,000 to give a fixed-point number with 15 digits t...">Currency</a> are stored as 64-bit integer, scaled by 10,000 to give a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;HCCCurrency.h&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a84303d6aff1c258ab08dbe4105baded3" id="r_a84303d6aff1c258ab08dbe4105baded3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a> = <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a934f1e669bbe888bfa94af14a3647296">Int64</a></td></tr>
<tr class="separator:a84303d6aff1c258ab08dbe4105baded3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac4612ffd3a6b6ecf61e23220bbdac0f5" id="r_ac4612ffd3a6b6ecf61e23220bbdac0f5"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac4612ffd3a6b6ecf61e23220bbdac0f5">Currency</a> () noexcept</td></tr>
<tr class="separator:ac4612ffd3a6b6ecf61e23220bbdac0f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf140e6876f236b4b27f17a1acf10187" id="r_abf140e6876f236b4b27f17a1acf10187"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:abf140e6876f236b4b27f17a1acf10187"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abf140e6876f236b4b27f17a1acf10187">Currency</a> (T value) noexcept</td></tr>
<tr class="separator:abf140e6876f236b4b27f17a1acf10187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fc85719ec5a78b132a20a5b7a98bcf9" id="r_a4fc85719ec5a78b132a20a5b7a98bcf9"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4fc85719ec5a78b132a20a5b7a98bcf9">Currency</a> (CY value) noexcept</td></tr>
<tr class="separator:a4fc85719ec5a78b132a20a5b7a98bcf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3621d12b4cb6468ac8f54aa87766f3b" id="r_af3621d12b4cb6468ac8f54aa87766f3b"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af3621d12b4cb6468ac8f54aa87766f3b">Value</a> () const noexcept</td></tr>
<tr class="separator:af3621d12b4cb6468ac8f54aa87766f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5ef5de3f903b887c7b21c8a2260c3fc" id="r_ac5ef5de3f903b887c7b21c8a2260c3fc"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac5ef5de3f903b887c7b21c8a2260c3fc">operator++</a> () noexcept</td></tr>
<tr class="separator:ac5ef5de3f903b887c7b21c8a2260c3fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f069182610475bdf6a5e65c104af7da" id="r_a6f069182610475bdf6a5e65c104af7da"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6f069182610475bdf6a5e65c104af7da">operator++</a> (int) noexcept</td></tr>
<tr class="separator:a6f069182610475bdf6a5e65c104af7da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a986b314a5149cf4964a75d9e1c0970f0" id="r_a986b314a5149cf4964a75d9e1c0970f0"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a986b314a5149cf4964a75d9e1c0970f0">operator--</a> () noexcept</td></tr>
<tr class="separator:a986b314a5149cf4964a75d9e1c0970f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d761f6bdda64213dba7c76f0c2281f1" id="r_a3d761f6bdda64213dba7c76f0c2281f1"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3d761f6bdda64213dba7c76f0c2281f1">operator--</a> (int) noexcept</td></tr>
<tr class="separator:a3d761f6bdda64213dba7c76f0c2281f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a406ca36e1f1e8495a1a68a201b6994b0" id="r_a406ca36e1f1e8495a1a68a201b6994b0"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a406ca36e1f1e8495a1a68a201b6994b0">operator=</a> (const CY value) noexcept</td></tr>
<tr class="separator:a406ca36e1f1e8495a1a68a201b6994b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc2c24ded393e3260593c936e59ecb9" id="r_aebc2c24ded393e3260593c936e59ecb9"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:aebc2c24ded393e3260593c936e59ecb9"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aebc2c24ded393e3260593c936e59ecb9">operator=</a> (const T value) noexcept</td></tr>
<tr class="separator:aebc2c24ded393e3260593c936e59ecb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10de61fce4064f0dd322b12ae7866eef" id="r_a10de61fce4064f0dd322b12ae7866eef"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</td></tr>
<tr class="memitem:a10de61fce4064f0dd322b12ae7866eef"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a10de61fce4064f0dd322b12ae7866eef">operator+=</a> (const T value) noexcept</td></tr>
<tr class="separator:a10de61fce4064f0dd322b12ae7866eef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac16b1dfad684c73f3d37c722b9683a01" id="r_ac16b1dfad684c73f3d37c722b9683a01"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac16b1dfad684c73f3d37c722b9683a01">operator+=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) noexcept</td></tr>
<tr class="separator:ac16b1dfad684c73f3d37c722b9683a01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89b2bf0badd47cec8091f5aba5009dba" id="r_a89b2bf0badd47cec8091f5aba5009dba"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:a89b2bf0badd47cec8091f5aba5009dba"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a89b2bf0badd47cec8091f5aba5009dba">operator+</a> (const T value) const noexcept</td></tr>
<tr class="separator:a89b2bf0badd47cec8091f5aba5009dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ded42a5b855e5940045465165659c57" id="r_a4ded42a5b855e5940045465165659c57"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4ded42a5b855e5940045465165659c57">operator+</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a4ded42a5b855e5940045465165659c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ad32b8e9f7c8870b65e2ac457e534ea" id="r_a9ad32b8e9f7c8870b65e2ac457e534ea"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</td></tr>
<tr class="memitem:a9ad32b8e9f7c8870b65e2ac457e534ea"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9ad32b8e9f7c8870b65e2ac457e534ea">operator-=</a> (const T value) noexcept</td></tr>
<tr class="separator:a9ad32b8e9f7c8870b65e2ac457e534ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d2ffb685b688532d7bdbb5a2f533eaa" id="r_a7d2ffb685b688532d7bdbb5a2f533eaa"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7d2ffb685b688532d7bdbb5a2f533eaa">operator-=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) noexcept</td></tr>
<tr class="separator:a7d2ffb685b688532d7bdbb5a2f533eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c81716da82c14c35cd70bb3c4b835a3" id="r_a6c81716da82c14c35cd70bb3c4b835a3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:a6c81716da82c14c35cd70bb3c4b835a3"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6c81716da82c14c35cd70bb3c4b835a3">operator-</a> (const T value) const noexcept</td></tr>
<tr class="separator:a6c81716da82c14c35cd70bb3c4b835a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed30fc09d820c778507e2e4ba93e64eb" id="r_aed30fc09d820c778507e2e4ba93e64eb"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aed30fc09d820c778507e2e4ba93e64eb">operator-</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:aed30fc09d820c778507e2e4ba93e64eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d70f507f6da8d23e95ba30b00e52274" id="r_a5d70f507f6da8d23e95ba30b00e52274"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</td></tr>
<tr class="memitem:a5d70f507f6da8d23e95ba30b00e52274"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5d70f507f6da8d23e95ba30b00e52274">operator*=</a> (const T value) noexcept</td></tr>
<tr class="separator:a5d70f507f6da8d23e95ba30b00e52274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f06e42a54cc8d989fd8f821a899dd17" id="r_a9f06e42a54cc8d989fd8f821a899dd17"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:a9f06e42a54cc8d989fd8f821a899dd17"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9f06e42a54cc8d989fd8f821a899dd17">operator*</a> (const T value) const noexcept</td></tr>
<tr class="separator:a9f06e42a54cc8d989fd8f821a899dd17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f01bffc950aa68890fa72e77eea6ec8" id="r_a8f01bffc950aa68890fa72e77eea6ec8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</td></tr>
<tr class="memitem:a8f01bffc950aa68890fa72e77eea6ec8"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a8f01bffc950aa68890fa72e77eea6ec8">operator/=</a> (const T value) noexcept</td></tr>
<tr class="separator:a8f01bffc950aa68890fa72e77eea6ec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa730d0510e3c9637dd7840e31d238fdd" id="r_aa730d0510e3c9637dd7840e31d238fdd"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:aa730d0510e3c9637dd7840e31d238fdd"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa730d0510e3c9637dd7840e31d238fdd">operator/</a> (const T value) const noexcept</td></tr>
<tr class="separator:aa730d0510e3c9637dd7840e31d238fdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1294eb6819fd1838fbbbf424e89b992" id="r_ac1294eb6819fd1838fbbbf424e89b992"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac1294eb6819fd1838fbbbf424e89b992">operator bool</a> () const noexcept</td></tr>
<tr class="separator:ac1294eb6819fd1838fbbbf424e89b992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a605d4bcff064c61d9acbe5d585a926e9" id="r_a605d4bcff064c61d9acbe5d585a926e9"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a605d4bcff064c61d9acbe5d585a926e9">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a605d4bcff064c61d9acbe5d585a926e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a486a741d3f7fd448a68382f408f74608" id="r_a486a741d3f7fd448a68382f408f74608"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a486a741d3f7fd448a68382f408f74608">operator!=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a486a741d3f7fd448a68382f408f74608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcb022f7ec492081411f5d55122461a3" id="r_abcb022f7ec492081411f5d55122461a3"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abcb022f7ec492081411f5d55122461a3">operator&lt;</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:abcb022f7ec492081411f5d55122461a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af82e66b787adee3a8ec628a11fb9cb73" id="r_af82e66b787adee3a8ec628a11fb9cb73"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af82e66b787adee3a8ec628a11fb9cb73">operator&lt;=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:af82e66b787adee3a8ec628a11fb9cb73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4e03f6a6cec6135adca007764adb482" id="r_ac4e03f6a6cec6135adca007764adb482"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac4e03f6a6cec6135adca007764adb482">operator&gt;</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ac4e03f6a6cec6135adca007764adb482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5347e6179a0e93d2ab1b51d35ac37c03" id="r_a5347e6179a0e93d2ab1b51d35ac37c03"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5347e6179a0e93d2ab1b51d35ac37c03">operator&gt;=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a5347e6179a0e93d2ab1b51d35ac37c03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78cd62d05ed2588e3939cde29f72232d" id="r_a78cd62d05ed2588e3939cde29f72232d"><td class="memItemLeft" align="right" valign="top">constexpr int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a78cd62d05ed2588e3939cde29f72232d">CompareTo</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a78cd62d05ed2588e3939cde29f72232d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7db26305110ba30811a863aefd50a6b3" id="r_a7db26305110ba30811a863aefd50a6b3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7db26305110ba30811a863aefd50a6b3"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7db26305110ba30811a863aefd50a6b3">As</a> () const noexcept</td></tr>
<tr class="separator:a7db26305110ba30811a863aefd50a6b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf0e2d9169183b9c3596229a0848270" id="r_abcf0e2d9169183b9c3596229a0848270"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:abcf0e2d9169183b9c3596229a0848270"><td class="memTemplItemLeft" align="right" valign="top">constexpr CY&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abcf0e2d9169183b9c3596229a0848270">As</a> () const noexcept</td></tr>
<tr class="separator:abcf0e2d9169183b9c3596229a0848270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79722eccaaa980271bbae450b10a283d" id="r_a79722eccaaa980271bbae450b10a283d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a79722eccaaa980271bbae450b10a283d">ToWideString</a> () const</td></tr>
<tr class="separator:a79722eccaaa980271bbae450b10a283d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb9f760c786ae40af9a8f986c1bb0e0" id="r_a5fb9f760c786ae40af9a8f986c1bb0e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aedb2935f481d7ca3cd3db3cd88dc1b40">AnsiString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5fb9f760c786ae40af9a8f986c1bb0e0">ToAnsiString</a> () const</td></tr>
<tr class="separator:a5fb9f760c786ae40af9a8f986c1bb0e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabfce93494f98fc0546fac90a90c798c" id="r_aabfce93494f98fc0546fac90a90c798c"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:aabfce93494f98fc0546fac90a90c798c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aabfce93494f98fc0546fac90a90c798c">As</a> () const</td></tr>
<tr class="separator:aabfce93494f98fc0546fac90a90c798c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab33e9b309b6285ad10c490bb429f7183" id="r_ab33e9b309b6285ad10c490bb429f7183"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ab33e9b309b6285ad10c490bb429f7183"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aedb2935f481d7ca3cd3db3cd88dc1b40">AnsiString</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab33e9b309b6285ad10c490bb429f7183">As</a> () const</td></tr>
<tr class="separator:ab33e9b309b6285ad10c490bb429f7183"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9de569c59e3357666ad4eb337aec5a1" id="r_ae9de569c59e3357666ad4eb337aec5a1"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ae9de569c59e3357666ad4eb337aec5a1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae9de569c59e3357666ad4eb337aec5a1">As</a> () const</td></tr>
<tr class="separator:ae9de569c59e3357666ad4eb337aec5a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac70a8dc23ebd1f320ab1e1b5bc2e60fb" id="r_ac70a8dc23ebd1f320ab1e1b5bc2e60fb"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ac70a8dc23ebd1f320ab1e1b5bc2e60fb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aedb2935f481d7ca3cd3db3cd88dc1b40">AnsiString</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac70a8dc23ebd1f320ab1e1b5bc2e60fb">As</a> () const</td></tr>
<tr class="separator:ac70a8dc23ebd1f320ab1e1b5bc2e60fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a37e98c502a73d41d4cfd185679f8e475" id="r_a37e98c502a73d41d4cfd185679f8e475"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a37e98c502a73d41d4cfd185679f8e475">TryParse</a> (const wchar_t *text, <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;result)</td></tr>
<tr class="separator:a37e98c502a73d41d4cfd185679f8e475"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ede0709f897f69b09587e01d3b28245" id="r_a3ede0709f897f69b09587e01d3b28245"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3ede0709f897f69b09587e01d3b28245">TryParse</a> (const char *text, <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;result)</td></tr>
<tr class="separator:a3ede0709f897f69b09587e01d3b28245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac91e530e5738003fb6de34e5a8b4c20f" id="r_ac91e530e5738003fb6de34e5a8b4c20f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac91e530e5738003fb6de34e5a8b4c20f">Parse</a> (const wchar_t *text)</td></tr>
<tr class="separator:ac91e530e5738003fb6de34e5a8b4c20f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82e0767b321ffc69e61aa6e56dc4c0f" id="r_ab82e0767b321ffc69e61aa6e56dc4c0f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab82e0767b321ffc69e61aa6e56dc4c0f">Parse</a> (const char *text)</td></tr>
<tr class="separator:ab82e0767b321ffc69e61aa6e56dc4c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a5e1c2e8dd37840585db7a49df09f6700" id="r_a5e1c2e8dd37840585db7a49df09f6700"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5e1c2e8dd37840585db7a49df09f6700">Scale</a> = 10000</td></tr>
<tr class="separator:a5e1c2e8dd37840585db7a49df09f6700"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-methods" name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:ab72b7d150815920e8ded8ffebf9c46a3" id="r_ab72b7d150815920e8ded8ffebf9c46a3"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab72b7d150815920e8ded8ffebf9c46a3">Currency</a> (<a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a> value, bool) noexcept</td></tr>
<tr class="separator:ab72b7d150815920e8ded8ffebf9c46a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a95e0c679a94506528728972ac2c51fa3" id="r_a95e0c679a94506528728972ac2c51fa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a95e0c679a94506528728972ac2c51fa3">value_</a></td></tr>
<tr class="separator:a95e0c679a94506528728972ac2c51fa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a2ffe504a5f087a33c5f8625c81abdd57" id="r_a2ffe504a5f087a33c5f8625c81abdd57"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:a2ffe504a5f087a33c5f8625c81abdd57"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a2ffe504a5f087a33c5f8625c81abdd57">operator+</a> (const T first, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;second) noexcept</td></tr>
<tr class="separator:a2ffe504a5f087a33c5f8625c81abdd57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53ea16eed37f1135a76fd78f17240f4" id="r_af53ea16eed37f1135a76fd78f17240f4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:af53ea16eed37f1135a76fd78f17240f4"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af53ea16eed37f1135a76fd78f17240f4">operator-</a> (const T first, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;second) noexcept</td></tr>
<tr class="separator:af53ea16eed37f1135a76fd78f17240f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7382f2d8dd1dfe08dd5e38f01b000c11" id="r_a7382f2d8dd1dfe08dd5e38f01b000c11"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</td></tr>
<tr class="memitem:a7382f2d8dd1dfe08dd5e38f01b000c11"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7382f2d8dd1dfe08dd5e38f01b000c11">operator*</a> (const T first, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;second) noexcept</td></tr>
<tr class="separator:a7382f2d8dd1dfe08dd5e38f01b000c11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d64a7dc6c51bd57b2cb6d963ab6852f" id="r_a3d64a7dc6c51bd57b2cb6d963ab6852f"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3d64a7dc6c51bd57b2cb6d963ab6852f">operator&lt;&lt;</a> (std::ostream &amp;stream, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;currency)</td></tr>
<tr class="separator:a3d64a7dc6c51bd57b2cb6d963ab6852f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml" title="Currency are stored as 64-bit integer, scaled by 10,000 to give a fixed-point number with 15 digits t...">Currency</a> are stored as 64-bit integer, scaled by 10,000 to give a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right. </p>
<p>This representation provides a range of -922,337,203,685,477.5808 to 922,337,203,685,477.5807.</p>
<p>The <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml" title="Currency are stored as 64-bit integer, scaled by 10,000 to give a fixed-point number with 15 digits t...">Currency</a> type is useful for calculations involving money and for fixed-point calculations in which accuracy is important. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a84303d6aff1c258ab08dbe4105baded3" name="a84303d6aff1c258ab08dbe4105baded3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84303d6aff1c258ab08dbe4105baded3">&#9670;&#160;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">Harlinn::Common::Core::Currency::value_type</a> = <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a934f1e669bbe888bfa94af14a3647296">Int64</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ab72b7d150815920e8ded8ffebf9c46a3" name="ab72b7d150815920e8ded8ffebf9c46a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab72b7d150815920e8ded8ffebf9c46a3">&#9670;&#160;</a></span>Currency() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::Currency::Currency </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em></em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">private</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac4612ffd3a6b6ecf61e23220bbdac0f5" name="ac4612ffd3a6b6ecf61e23220bbdac0f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4612ffd3a6b6ecf61e23220bbdac0f5">&#9670;&#160;</a></span>Currency() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::Currency::Currency </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abf140e6876f236b4b27f17a1acf10187" name="abf140e6876f236b4b27f17a1acf10187"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf140e6876f236b4b27f17a1acf10187">&#9670;&#160;</a></span>Currency() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::Currency::Currency </td>
          <td>(</td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4fc85719ec5a78b132a20a5b7a98bcf9" name="a4fc85719ec5a78b132a20a5b7a98bcf9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fc85719ec5a78b132a20a5b7a98bcf9">&#9670;&#160;</a></span>Currency() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::Currency::Currency </td>
          <td>(</td>
          <td class="paramtype">CY</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae9de569c59e3357666ad4eb337aec5a1" name="ae9de569c59e3357666ad4eb337aec5a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9de569c59e3357666ad4eb337aec5a1">&#9670;&#160;</a></span>As() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Common::Core::Currency::As </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac70a8dc23ebd1f320ab1e1b5bc2e60fb" name="ac70a8dc23ebd1f320ab1e1b5bc2e60fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac70a8dc23ebd1f320ab1e1b5bc2e60fb">&#9670;&#160;</a></span>As() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aedb2935f481d7ca3cd3db3cd88dc1b40">AnsiString</a> Harlinn::Common::Core::Currency::As </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aabfce93494f98fc0546fac90a90c798c" name="aabfce93494f98fc0546fac90a90c798c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabfce93494f98fc0546fac90a90c798c">&#9670;&#160;</a></span>As() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Common::Core::Currency::As </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab33e9b309b6285ad10c490bb429f7183" name="ab33e9b309b6285ad10c490bb429f7183"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab33e9b309b6285ad10c490bb429f7183">&#9670;&#160;</a></span>As() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aedb2935f481d7ca3cd3db3cd88dc1b40">AnsiString</a> Harlinn::Common::Core::Currency::As </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7db26305110ba30811a863aefd50a6b3" name="a7db26305110ba30811a863aefd50a6b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7db26305110ba30811a863aefd50a6b3">&#9670;&#160;</a></span>As() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T Harlinn::Common::Core::Currency::As </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abcf0e2d9169183b9c3596229a0848270" name="abcf0e2d9169183b9c3596229a0848270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcf0e2d9169183b9c3596229a0848270">&#9670;&#160;</a></span>As() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">CY Harlinn::Common::Core::Currency::As </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a78cd62d05ed2588e3939cde29f72232d" name="a78cd62d05ed2588e3939cde29f72232d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78cd62d05ed2588e3939cde29f72232d">&#9670;&#160;</a></span>CompareTo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Harlinn::Common::Core::Currency::CompareTo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1294eb6819fd1838fbbbf424e89b992" name="ac1294eb6819fd1838fbbbf424e89b992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1294eb6819fd1838fbbbf424e89b992">&#9670;&#160;</a></span>operator bool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Common::Core::Currency::operator bool </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a486a741d3f7fd448a68382f408f74608" name="a486a741d3f7fd448a68382f408f74608"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a486a741d3f7fd448a68382f408f74608">&#9670;&#160;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9f06e42a54cc8d989fd8f821a899dd17" name="a9f06e42a54cc8d989fd8f821a899dd17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f06e42a54cc8d989fd8f821a899dd17">&#9670;&#160;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator* </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d70f507f6da8d23e95ba30b00e52274" name="a5d70f507f6da8d23e95ba30b00e52274"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d70f507f6da8d23e95ba30b00e52274">&#9670;&#160;</a></span>operator*=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator*= </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4ded42a5b855e5940045465165659c57" name="a4ded42a5b855e5940045465165659c57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ded42a5b855e5940045465165659c57">&#9670;&#160;</a></span>operator+() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a89b2bf0badd47cec8091f5aba5009dba" name="a89b2bf0badd47cec8091f5aba5009dba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89b2bf0badd47cec8091f5aba5009dba">&#9670;&#160;</a></span>operator+() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator+ </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac5ef5de3f903b887c7b21c8a2260c3fc" name="ac5ef5de3f903b887c7b21c8a2260c3fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5ef5de3f903b887c7b21c8a2260c3fc">&#9670;&#160;</a></span>operator++() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator++ </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6f069182610475bdf6a5e65c104af7da" name="a6f069182610475bdf6a5e65c104af7da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f069182610475bdf6a5e65c104af7da">&#9670;&#160;</a></span>operator++() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator++ </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac16b1dfad684c73f3d37c722b9683a01" name="ac16b1dfad684c73f3d37c722b9683a01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac16b1dfad684c73f3d37c722b9683a01">&#9670;&#160;</a></span>operator+=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a10de61fce4064f0dd322b12ae7866eef" name="a10de61fce4064f0dd322b12ae7866eef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10de61fce4064f0dd322b12ae7866eef">&#9670;&#160;</a></span>operator+=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator+= </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aed30fc09d820c778507e2e4ba93e64eb" name="aed30fc09d820c778507e2e4ba93e64eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed30fc09d820c778507e2e4ba93e64eb">&#9670;&#160;</a></span>operator-() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6c81716da82c14c35cd70bb3c4b835a3" name="a6c81716da82c14c35cd70bb3c4b835a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c81716da82c14c35cd70bb3c4b835a3">&#9670;&#160;</a></span>operator-() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator- </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a986b314a5149cf4964a75d9e1c0970f0" name="a986b314a5149cf4964a75d9e1c0970f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a986b314a5149cf4964a75d9e1c0970f0">&#9670;&#160;</a></span>operator--() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator-- </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d761f6bdda64213dba7c76f0c2281f1" name="a3d761f6bdda64213dba7c76f0c2281f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d761f6bdda64213dba7c76f0c2281f1">&#9670;&#160;</a></span>operator--() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator-- </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7d2ffb685b688532d7bdbb5a2f533eaa" name="a7d2ffb685b688532d7bdbb5a2f533eaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d2ffb685b688532d7bdbb5a2f533eaa">&#9670;&#160;</a></span>operator-=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ad32b8e9f7c8870b65e2ac457e534ea" name="a9ad32b8e9f7c8870b65e2ac457e534ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ad32b8e9f7c8870b65e2ac457e534ea">&#9670;&#160;</a></span>operator-=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator-= </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa730d0510e3c9637dd7840e31d238fdd" name="aa730d0510e3c9637dd7840e31d238fdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa730d0510e3c9637dd7840e31d238fdd">&#9670;&#160;</a></span>operator/()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::operator/ </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8f01bffc950aa68890fa72e77eea6ec8" name="a8f01bffc950aa68890fa72e77eea6ec8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f01bffc950aa68890fa72e77eea6ec8">&#9670;&#160;</a></span>operator/=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires (std::is_arithmetic_v&lt;T&gt; &amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt;)</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator/= </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abcb022f7ec492081411f5d55122461a3" name="abcb022f7ec492081411f5d55122461a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcb022f7ec492081411f5d55122461a3">&#9670;&#160;</a></span>operator&lt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af82e66b787adee3a8ec628a11fb9cb73" name="af82e66b787adee3a8ec628a11fb9cb73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af82e66b787adee3a8ec628a11fb9cb73">&#9670;&#160;</a></span>operator&lt;=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a406ca36e1f1e8495a1a68a201b6994b0" name="a406ca36e1f1e8495a1a68a201b6994b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a406ca36e1f1e8495a1a68a201b6994b0">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator= </td>
          <td>(</td>
          <td class="paramtype">const CY</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aebc2c24ded393e3260593c936e59ecb9" name="aebc2c24ded393e3260593c936e59ecb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebc2c24ded393e3260593c936e59ecb9">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp; Harlinn::Common::Core::Currency::operator= </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a605d4bcff064c61d9acbe5d585a926e9" name="a605d4bcff064c61d9acbe5d585a926e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a605d4bcff064c61d9acbe5d585a926e9">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac4e03f6a6cec6135adca007764adb482" name="ac4e03f6a6cec6135adca007764adb482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4e03f6a6cec6135adca007764adb482">&#9670;&#160;</a></span>operator&gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5347e6179a0e93d2ab1b51d35ac37c03" name="a5347e6179a0e93d2ab1b51d35ac37c03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5347e6179a0e93d2ab1b51d35ac37c03">&#9670;&#160;</a></span>operator&gt;=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab82e0767b321ffc69e61aa6e56dc4c0f" name="ab82e0767b321ffc69e61aa6e56dc4c0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab82e0767b321ffc69e61aa6e56dc4c0f">&#9670;&#160;</a></span>Parse() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::Parse </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>text</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac91e530e5738003fb6de34e5a8b4c20f" name="ac91e530e5738003fb6de34e5a8b4c20f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac91e530e5738003fb6de34e5a8b4c20f">&#9670;&#160;</a></span>Parse() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> Harlinn::Common::Core::Currency::Parse </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *</td>          <td class="paramname"><span class="paramname"><em>text</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5fb9f760c786ae40af9a8f986c1bb0e0" name="a5fb9f760c786ae40af9a8f986c1bb0e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb9f760c786ae40af9a8f986c1bb0e0">&#9670;&#160;</a></span>ToAnsiString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#aedb2935f481d7ca3cd3db3cd88dc1b40">AnsiString</a> Harlinn::Common::Core::Currency::ToAnsiString </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a79722eccaaa980271bbae450b10a283d" name="a79722eccaaa980271bbae450b10a283d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79722eccaaa980271bbae450b10a283d">&#9670;&#160;</a></span>ToWideString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_h_c_c_def_8h.xhtml#afb06ae686742fde98e6427c4a1e2206c">HCC_EXPORT</a> <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a7b2b8eb82c826297870ffb50d3739060">WideString</a> Harlinn::Common::Core::Currency::ToWideString </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3ede0709f897f69b09587e01d3b28245" name="a3ede0709f897f69b09587e01d3b28245"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ede0709f897f69b09587e01d3b28245">&#9670;&#160;</a></span>TryParse() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::TryParse </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>text</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>result</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a37e98c502a73d41d4cfd185679f8e475" name="a37e98c502a73d41d4cfd185679f8e475"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37e98c502a73d41d4cfd185679f8e475">&#9670;&#160;</a></span>TryParse() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Common::Core::Currency::TryParse </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *</td>          <td class="paramname"><span class="paramname"><em>text</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>result</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af3621d12b4cb6468ac8f54aa87766f3b" name="af3621d12b4cb6468ac8f54aa87766f3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3621d12b4cb6468ac8f54aa87766f3b">&#9670;&#160;</a></span>Value()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a> Harlinn::Common::Core::Currency::Value </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Friends And Related Symbol Documentation</h2>
<a id="a7382f2d8dd1dfe08dd5e38f01b000c11" name="a7382f2d8dd1dfe08dd5e38f01b000c11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7382f2d8dd1dfe08dd5e38f01b000c11">&#9670;&#160;</a></span>operator*</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>first</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>second</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2ffe504a5f087a33c5f8625c81abdd57" name="a2ffe504a5f087a33c5f8625c81abdd57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ffe504a5f087a33c5f8625c81abdd57">&#9670;&#160;</a></span>operator+</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>first</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>second</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af53ea16eed37f1135a76fd78f17240f4" name="af53ea16eed37f1135a76fd78f17240f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af53ea16eed37f1135a76fd78f17240f4">&#9670;&#160;</a></span>operator-</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires ( std::is_arithmetic_v&lt;T&gt;&amp;&amp; std::is_nothrow_convertible_v&lt;T, <a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a>&gt; )</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const T</td>          <td class="paramname"><span class="paramname"><em>first</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>second</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d64a7dc6c51bd57b2cb6d963ab6852f" name="a3d64a7dc6c51bd57b2cb6d963ab6852f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d64a7dc6c51bd57b2cb6d963ab6852f">&#9670;&#160;</a></span>operator&lt;&lt;</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;</td>          <td class="paramname"><span class="paramname"><em>stream</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>currency</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a5e1c2e8dd37840585db7a49df09f6700" name="a5e1c2e8dd37840585db7a49df09f6700"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e1c2e8dd37840585db7a49df09f6700">&#9670;&#160;</a></span>Scale</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a> Harlinn::Common::Core::Currency::Scale = 10000</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a95e0c679a94506528728972ac2c51fa3" name="a95e0c679a94506528728972ac2c51fa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95e0c679a94506528728972ac2c51fa3">&#9670;&#160;</a></span>value_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a84303d6aff1c258ab08dbe4105baded3">value_type</a> Harlinn::Common::Core::Currency::value_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="_h_c_c_currency_8h.xhtml">HCCCurrency.h</a></li>
<li><a class="el" href="_h_c_c_currency_8cpp.xhtml">HCCCurrency.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_currency.xhtml">Currency</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::Internal::PointerIterator&lt; ContainerT &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::Internal::PointerIterator&lt; ContainerT &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;HCCIterator.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Common::Core::Internal::PointerIterator&lt; ContainerT &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator__inherit__graph.svg" width="206" height="168"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Harlinn::Common::Core::Internal::PointerIterator&lt; ContainerT &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator__coll__graph.svg" width="206" height="168"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a58bdc0e2d3454d1641e4dce241ced6f5" id="r_a58bdc0e2d3454d1641e4dce241ced6f5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a58bdc0e2d3454d1641e4dce241ced6f5">Base</a> = <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt;ContainerT&gt;</td></tr>
<tr class="separator:a58bdc0e2d3454d1641e4dce241ced6f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9defd4e8437bf3b926cc695845a56fb" id="r_ad9defd4e8437bf3b926cc695845a56fb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad9defd4e8437bf3b926cc695845a56fb">ContainerType</a> = ContainerT</td></tr>
<tr class="separator:ad9defd4e8437bf3b926cc695845a56fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba03e9f062c4d210c91152f5dd8f1ac4" id="r_aba03e9f062c4d210c91152f5dd8f1ac4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aba03e9f062c4d210c91152f5dd8f1ac4">iterator_concept</a> = std::contiguous_iterator_tag</td></tr>
<tr class="separator:aba03e9f062c4d210c91152f5dd8f1ac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6fbaa2c1c1ee43587b0cde7b0d59941" id="r_ae6fbaa2c1c1ee43587b0cde7b0d59941"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae6fbaa2c1c1ee43587b0cde7b0d59941">iterator_category</a> = std::random_access_iterator_tag</td></tr>
<tr class="separator:ae6fbaa2c1c1ee43587b0cde7b0d59941"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6725deb6bec9d8d5fce55a4522db48ca" id="r_a6725deb6bec9d8d5fce55a4522db48ca"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6725deb6bec9d8d5fce55a4522db48ca">value_type</a> = typename ContainerType::value_type</td></tr>
<tr class="separator:a6725deb6bec9d8d5fce55a4522db48ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2f5f4718e3bfa7bf189521bdaf70873" id="r_aa2f5f4718e3bfa7bf189521bdaf70873"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> = typename ContainerType::difference_type</td></tr>
<tr class="separator:aa2f5f4718e3bfa7bf189521bdaf70873"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d7ebe3a873944d7b1222156dc0c9d7d" id="r_a4d7ebe3a873944d7b1222156dc0c9d7d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4d7ebe3a873944d7b1222156dc0c9d7d">pointer</a> = typename ContainerType::pointer</td></tr>
<tr class="separator:a4d7ebe3a873944d7b1222156dc0c9d7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad98d46c27652e31a8e657811741313be" id="r_ad98d46c27652e31a8e657811741313be"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad98d46c27652e31a8e657811741313be">reference</a> = <a class="el" href="#a6725deb6bec9d8d5fce55a4522db48ca">value_type</a>&amp;</td></tr>
<tr class="separator:ad98d46c27652e31a8e657811741313be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator&lt; ContainerT &gt;</a></td></tr>
<tr class="memitem:add41aed43c6ed06a6d756cda1a485fa4 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_add41aed43c6ed06a6d756cda1a485fa4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#add41aed43c6ed06a6d756cda1a485fa4">ContainerType</a> = ContainerT</td></tr>
<tr class="separator:add41aed43c6ed06a6d756cda1a485fa4 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a146bfe111e1f940a022e27d61e0163f8 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a146bfe111e1f940a022e27d61e0163f8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a146bfe111e1f940a022e27d61e0163f8">iterator_concept</a> = std::contiguous_iterator_tag</td></tr>
<tr class="separator:a146bfe111e1f940a022e27d61e0163f8 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80972eba98485be136926943b8d3fd1 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ae80972eba98485be136926943b8d3fd1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ae80972eba98485be136926943b8d3fd1">iterator_category</a> = std::random_access_iterator_tag</td></tr>
<tr class="separator:ae80972eba98485be136926943b8d3fd1 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad035b74144933252f55313ad8a628176 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ad035b74144933252f55313ad8a628176"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ad035b74144933252f55313ad8a628176">value_type</a> = typename ContainerType::value_type</td></tr>
<tr class="separator:ad035b74144933252f55313ad8a628176 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2f67316e6329c7c37d8a033a212c12 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_aaa2f67316e6329c7c37d8a033a212c12"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> = typename ContainerType::difference_type</td></tr>
<tr class="separator:aaa2f67316e6329c7c37d8a033a212c12 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa89b419f8fd1d1ed362f36a3b4d3e6e7 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_aa89b419f8fd1d1ed362f36a3b4d3e6e7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a> = typename ContainerType::const_pointer</td></tr>
<tr class="separator:aa89b419f8fd1d1ed362f36a3b4d3e6e7 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a937801ebbea5f4e1e8a8856e6d1bc inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a43a937801ebbea5f4e1e8a8856e6d1bc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a43a937801ebbea5f4e1e8a8856e6d1bc">Pointer</a> = typename ContainerType::pointer</td></tr>
<tr class="separator:a43a937801ebbea5f4e1e8a8856e6d1bc inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe60197c2a7b43abde383575347cd7d8 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_afe60197c2a7b43abde383575347cd7d8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#afe60197c2a7b43abde383575347cd7d8">reference</a> = const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ad035b74144933252f55313ad8a628176">value_type</a>&amp;</td></tr>
<tr class="separator:afe60197c2a7b43abde383575347cd7d8 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af63c7f932f11994e6018648facf10302" id="r_af63c7f932f11994e6018648facf10302"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af63c7f932f11994e6018648facf10302">PointerIterator</a> () noexcept</td></tr>
<tr class="separator:af63c7f932f11994e6018648facf10302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab76fd11586f5f37879b97f706c6e7c12" id="r_ab76fd11586f5f37879b97f706c6e7c12"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab76fd11586f5f37879b97f706c6e7c12">PointerIterator</a> (<a class="el" href="#a4d7ebe3a873944d7b1222156dc0c9d7d">pointer</a> ptr) noexcept</td></tr>
<tr class="separator:ab76fd11586f5f37879b97f706c6e7c12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629e19bbe998a28e44c059f60c6f5d65" id="r_a629e19bbe998a28e44c059f60c6f5d65"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a629e19bbe998a28e44c059f60c6f5d65">PointerIterator</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp;other, const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:a629e19bbe998a28e44c059f60c6f5d65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dace37b90ed6da26ff1c5bbfcec4bb9" id="r_a4dace37b90ed6da26ff1c5bbfcec4bb9"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#ad98d46c27652e31a8e657811741313be">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4dace37b90ed6da26ff1c5bbfcec4bb9">operator*</a> () const noexcept</td></tr>
<tr class="separator:a4dace37b90ed6da26ff1c5bbfcec4bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add893138c2210de33c67d5f85bc42c2a" id="r_add893138c2210de33c67d5f85bc42c2a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a4d7ebe3a873944d7b1222156dc0c9d7d">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#add893138c2210de33c67d5f85bc42c2a">operator-&gt;</a> () const noexcept</td></tr>
<tr class="separator:add893138c2210de33c67d5f85bc42c2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51e375f02cc300da5d5ab8093544413a" id="r_a51e375f02cc300da5d5ab8093544413a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a51e375f02cc300da5d5ab8093544413a">operator++</a> () noexcept</td></tr>
<tr class="separator:a51e375f02cc300da5d5ab8093544413a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee172cdd6d27c588342cc7aa0e7d8d25" id="r_aee172cdd6d27c588342cc7aa0e7d8d25"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aee172cdd6d27c588342cc7aa0e7d8d25">operator++</a> (int) noexcept</td></tr>
<tr class="separator:aee172cdd6d27c588342cc7aa0e7d8d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab42c0e177a1074f47f7014c19c457785" id="r_ab42c0e177a1074f47f7014c19c457785"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab42c0e177a1074f47f7014c19c457785">operator--</a> () noexcept</td></tr>
<tr class="separator:ab42c0e177a1074f47f7014c19c457785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4158b90e0b9d6ce7e9b366e5fcfde26a" id="r_a4158b90e0b9d6ce7e9b366e5fcfde26a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4158b90e0b9d6ce7e9b366e5fcfde26a">operator--</a> (int) noexcept</td></tr>
<tr class="separator:a4158b90e0b9d6ce7e9b366e5fcfde26a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ffa57b9d3f3d0a8f9c9c993b88fb586" id="r_a9ffa57b9d3f3d0a8f9c9c993b88fb586"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9ffa57b9d3f3d0a8f9c9c993b88fb586">operator+=</a> (const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:a9ffa57b9d3f3d0a8f9c9c993b88fb586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a689f3d25932f27fa80c9087a5a88cc" id="r_a7a689f3d25932f27fa80c9087a5a88cc"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7a689f3d25932f27fa80c9087a5a88cc">operator+</a> (const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a7a689f3d25932f27fa80c9087a5a88cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfbe00091c11c393ffbe4dc3c32290ab" id="r_abfbe00091c11c393ffbe4dc3c32290ab"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abfbe00091c11c393ffbe4dc3c32290ab">operator-=</a> (const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:abfbe00091c11c393ffbe4dc3c32290ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8723957f72e5869b4bcf159199b6a9c" id="r_ab8723957f72e5869b4bcf159199b6a9c"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab8723957f72e5869b4bcf159199b6a9c">operator-</a> (const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:ab8723957f72e5869b4bcf159199b6a9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fd9d3562e31ff5394e8565692909838" id="r_a2fd9d3562e31ff5394e8565692909838"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#ad98d46c27652e31a8e657811741313be">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2fd9d3562e31ff5394e8565692909838">operator[]</a> (const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a2fd9d3562e31ff5394e8565692909838"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac553e4592e36ec118714a93c292f6715" id="r_ac553e4592e36ec118714a93c292f6715"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac553e4592e36ec118714a93c292f6715">operator-</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ac553e4592e36ec118714a93c292f6715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator&lt; ContainerT &gt;</a></td></tr>
<tr class="memitem:a698139e7096326c80bb81c6e9e05b939 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a698139e7096326c80bb81c6e9e05b939"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a698139e7096326c80bb81c6e9e05b939">ConstPointerIterator</a> () noexcept</td></tr>
<tr class="separator:a698139e7096326c80bb81c6e9e05b939 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57d976acd6bc92bcae41470fc8e8e9ec inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a57d976acd6bc92bcae41470fc8e8e9ec"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a57d976acd6bc92bcae41470fc8e8e9ec">ConstPointerIterator</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a> ptr) noexcept</td></tr>
<tr class="separator:a57d976acd6bc92bcae41470fc8e8e9ec inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4eae753a7acb279ceade9e7911bf71f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ae4eae753a7acb279ceade9e7911bf71f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ae4eae753a7acb279ceade9e7911bf71f">ConstPointerIterator</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other, const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:ae4eae753a7acb279ceade9e7911bf71f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb95bb36534adfc772e1e6225f894c1c inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_abb95bb36534adfc772e1e6225f894c1c"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#afe60197c2a7b43abde383575347cd7d8">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#abb95bb36534adfc772e1e6225f894c1c">operator*</a> () const noexcept</td></tr>
<tr class="separator:abb95bb36534adfc772e1e6225f894c1c inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa16df62702743ca77d6b2fab1f55043a inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_aa16df62702743ca77d6b2fab1f55043a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aa89b419f8fd1d1ed362f36a3b4d3e6e7">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aa16df62702743ca77d6b2fab1f55043a">operator-&gt;</a> () const noexcept</td></tr>
<tr class="separator:aa16df62702743ca77d6b2fab1f55043a inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab604eea805464b2a72c80d70e88474c6 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ab604eea805464b2a72c80d70e88474c6"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ab604eea805464b2a72c80d70e88474c6">operator++</a> () noexcept</td></tr>
<tr class="separator:ab604eea805464b2a72c80d70e88474c6 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2e6f0f57c7e647dd7ce556ae65accf2 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ad2e6f0f57c7e647dd7ce556ae65accf2"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ad2e6f0f57c7e647dd7ce556ae65accf2">operator++</a> (int) noexcept</td></tr>
<tr class="separator:ad2e6f0f57c7e647dd7ce556ae65accf2 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37ab8a4c2cc181551a23de1c20cd16d7 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a37ab8a4c2cc181551a23de1c20cd16d7"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a37ab8a4c2cc181551a23de1c20cd16d7">operator--</a> () noexcept</td></tr>
<tr class="separator:a37ab8a4c2cc181551a23de1c20cd16d7 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f7400e389e7944adab775983d93d4b3 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a7f7400e389e7944adab775983d93d4b3"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a7f7400e389e7944adab775983d93d4b3">operator--</a> (int) noexcept</td></tr>
<tr class="separator:a7f7400e389e7944adab775983d93d4b3 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7fcd316ce11fc2a4eafba69065e36f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a6f7fcd316ce11fc2a4eafba69065e36f"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a6f7fcd316ce11fc2a4eafba69065e36f">operator+=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:a6f7fcd316ce11fc2a4eafba69065e36f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51806992225ffdc9d94c3b5c23a5df13 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a51806992225ffdc9d94c3b5c23a5df13"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a51806992225ffdc9d94c3b5c23a5df13">operator+</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a51806992225ffdc9d94c3b5c23a5df13 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf7ce39127bf03d0f6e062b7dff9f687 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_adf7ce39127bf03d0f6e062b7dff9f687"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#adf7ce39127bf03d0f6e062b7dff9f687">operator-=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) noexcept</td></tr>
<tr class="separator:adf7ce39127bf03d0f6e062b7dff9f687 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a294ad0f31d1a0ddbf55695a4da9a1e39 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a294ad0f31d1a0ddbf55695a4da9a1e39"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a294ad0f31d1a0ddbf55695a4da9a1e39">operator-</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a294ad0f31d1a0ddbf55695a4da9a1e39 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac553e4592e36ec118714a93c292f6715 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ac553e4592e36ec118714a93c292f6715"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ac553e4592e36ec118714a93c292f6715">operator-</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ac553e4592e36ec118714a93c292f6715 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33d5d479ba7182fff8f6e090dd4a2e51 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a33d5d479ba7182fff8f6e090dd4a2e51"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#afe60197c2a7b43abde383575347cd7d8">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a33d5d479ba7182fff8f6e090dd4a2e51">operator[]</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aaa2f67316e6329c7c37d8a033a212c12">difference_type</a> offset) const noexcept</td></tr>
<tr class="separator:a33d5d479ba7182fff8f6e090dd4a2e51 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5896f2824bc8ecbfea7b05ad0a4390c inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_aa5896f2824bc8ecbfea7b05ad0a4390c"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#aa5896f2824bc8ecbfea7b05ad0a4390c">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:aa5896f2824bc8ecbfea7b05ad0a4390c inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0eaca79cb14b0e7d8c72ae2b9a42e6d inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_ac0eaca79cb14b0e7d8c72ae2b9a42e6d"><td class="memItemLeft" align="right" valign="top">constexpr std::strong_ordering&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#ac0eaca79cb14b0e7d8c72ae2b9a42e6d">operator&lt;=&gt;</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ac0eaca79cb14b0e7d8c72ae2b9a42e6d inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a6736c87d81f071db6aa7cd2c0f6cd513" id="r_a6736c87d81f071db6aa7cd2c0f6cd513"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6736c87d81f071db6aa7cd2c0f6cd513">operator+</a> (const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> lhs, <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> rhs) noexcept</td></tr>
<tr class="separator:a6736c87d81f071db6aa7cd2c0f6cd513"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_attribs_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator&lt; ContainerT &gt;</a></td></tr>
<tr class="memitem:a68336f231698a36c5fdb97e3a6ebd64a inherit pub_attribs_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator" id="r_a68336f231698a36c5fdb97e3a6ebd64a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a43a937801ebbea5f4e1e8a8856e6d1bc">Pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml#a68336f231698a36c5fdb97e3a6ebd64a">ptr_</a></td></tr>
<tr class="separator:a68336f231698a36c5fdb97e3a6ebd64a inherit pub_attribs_class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a58bdc0e2d3454d1641e4dce241ced6f5" name="a58bdc0e2d3454d1641e4dce241ced6f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58bdc0e2d3454d1641e4dce241ced6f5">&#9670;&#160;</a></span>Base</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::Base = <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt;ContainerT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad9defd4e8437bf3b926cc695845a56fb" name="ad9defd4e8437bf3b926cc695845a56fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9defd4e8437bf3b926cc695845a56fb">&#9670;&#160;</a></span>ContainerType</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::ContainerType = ContainerT</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa2f5f4718e3bfa7bf189521bdaf70873" name="aa2f5f4718e3bfa7bf189521bdaf70873"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2f5f4718e3bfa7bf189521bdaf70873">&#9670;&#160;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::difference_type = typename ContainerType::difference_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae6fbaa2c1c1ee43587b0cde7b0d59941" name="ae6fbaa2c1c1ee43587b0cde7b0d59941"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6fbaa2c1c1ee43587b0cde7b0d59941">&#9670;&#160;</a></span>iterator_category</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::iterator_category = std::random_access_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aba03e9f062c4d210c91152f5dd8f1ac4" name="aba03e9f062c4d210c91152f5dd8f1ac4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba03e9f062c4d210c91152f5dd8f1ac4">&#9670;&#160;</a></span>iterator_concept</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::iterator_concept = std::contiguous_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4d7ebe3a873944d7b1222156dc0c9d7d" name="a4d7ebe3a873944d7b1222156dc0c9d7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d7ebe3a873944d7b1222156dc0c9d7d">&#9670;&#160;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::pointer = typename ContainerType::pointer</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad98d46c27652e31a8e657811741313be" name="ad98d46c27652e31a8e657811741313be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad98d46c27652e31a8e657811741313be">&#9670;&#160;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::reference = <a class="el" href="#a6725deb6bec9d8d5fce55a4522db48ca">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6725deb6bec9d8d5fce55a4522db48ca" name="a6725deb6bec9d8d5fce55a4522db48ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6725deb6bec9d8d5fce55a4522db48ca">&#9670;&#160;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::value_type = typename ContainerType::value_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af63c7f932f11994e6018648facf10302" name="af63c7f932f11994e6018648facf10302"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af63c7f932f11994e6018648facf10302">&#9670;&#160;</a></span>PointerIterator() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::PointerIterator </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab76fd11586f5f37879b97f706c6e7c12" name="ab76fd11586f5f37879b97f706c6e7c12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab76fd11586f5f37879b97f706c6e7c12">&#9670;&#160;</a></span>PointerIterator() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::PointerIterator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a4d7ebe3a873944d7b1222156dc0c9d7d">pointer</a></td>          <td class="paramname"><span class="paramname"><em>ptr</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a629e19bbe998a28e44c059f60c6f5d65" name="a629e19bbe998a28e44c059f60c6f5d65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a629e19bbe998a28e44c059f60c6f5d65">&#9670;&#160;</a></span>PointerIterator() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::PointerIterator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4dace37b90ed6da26ff1c5bbfcec4bb9" name="a4dace37b90ed6da26ff1c5bbfcec4bb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dace37b90ed6da26ff1c5bbfcec4bb9">&#9670;&#160;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ad98d46c27652e31a8e657811741313be">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7a689f3d25932f27fa80c9087a5a88cc" name="a7a689f3d25932f27fa80c9087a5a88cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a689f3d25932f27fa80c9087a5a88cc">&#9670;&#160;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a51e375f02cc300da5d5ab8093544413a" name="a51e375f02cc300da5d5ab8093544413a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51e375f02cc300da5d5ab8093544413a">&#9670;&#160;</a></span>operator++() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator++ </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aee172cdd6d27c588342cc7aa0e7d8d25" name="aee172cdd6d27c588342cc7aa0e7d8d25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee172cdd6d27c588342cc7aa0e7d8d25">&#9670;&#160;</a></span>operator++() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator++ </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ffa57b9d3f3d0a8f9c9c993b88fb586" name="a9ffa57b9d3f3d0a8f9c9c993b88fb586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ffa57b9d3f3d0a8f9c9c993b88fb586">&#9670;&#160;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac553e4592e36ec118714a93c292f6715" name="ac553e4592e36ec118714a93c292f6715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac553e4592e36ec118714a93c292f6715">&#9670;&#160;</a></span>operator-() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::ConstPointerIterator</a>&lt; ContainerT &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_const_pointer_iterator.xhtml">ConstPointerIterator</a>&lt; ContainerT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab8723957f72e5869b4bcf159199b6a9c" name="ab8723957f72e5869b4bcf159199b6a9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8723957f72e5869b4bcf159199b6a9c">&#9670;&#160;</a></span>operator-() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab42c0e177a1074f47f7014c19c457785" name="ab42c0e177a1074f47f7014c19c457785"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab42c0e177a1074f47f7014c19c457785">&#9670;&#160;</a></span>operator--() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator-- </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4158b90e0b9d6ce7e9b366e5fcfde26a" name="a4158b90e0b9d6ce7e9b366e5fcfde26a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4158b90e0b9d6ce7e9b366e5fcfde26a">&#9670;&#160;</a></span>operator--() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator-- </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abfbe00091c11c393ffbe4dc3c32290ab" name="abfbe00091c11c393ffbe4dc3c32290ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfbe00091c11c393ffbe4dc3c32290ab">&#9670;&#160;</a></span>operator-=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="add893138c2210de33c67d5f85bc42c2a" name="add893138c2210de33c67d5f85bc42c2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add893138c2210de33c67d5f85bc42c2a">&#9670;&#160;</a></span>operator-&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a4d7ebe3a873944d7b1222156dc0c9d7d">pointer</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2fd9d3562e31ff5394e8565692909838" name="a2fd9d3562e31ff5394e8565692909838"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fd9d3562e31ff5394e8565692909838">&#9670;&#160;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ad98d46c27652e31a8e657811741313be">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">Harlinn::Common::Core::Internal::PointerIterator</a>&lt; ContainerT &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Friends And Related Symbol Documentation</h2>
<a id="a6736c87d81f071db6aa7cd2c0f6cd513" name="a6736c87d81f071db6aa7cd2c0f6cd513"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6736c87d81f071db6aa7cd2c0f6cd513">&#9670;&#160;</a></span>operator+</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ContainerT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#aa2f5f4718e3bfa7bf189521bdaf70873">difference_type</a></td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a>&lt; ContainerT &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_c_c_iterator_8h.xhtml">HCCIterator.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core_1_1_internal.xhtml">Internal</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_internal_1_1_pointer_iterator.xhtml">PointerIterator</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

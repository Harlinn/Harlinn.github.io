<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Windows::ImageList Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_windows_1_1_image_list.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="class_harlinn_1_1_windows_1_1_image_list-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Windows::ImageList Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;HWStdCtrls.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Windows::ImageList:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_windows_1_1_image_list__inherit__graph.svg" width="280" height="243"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Harlinn::Windows::ImageList:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_windows_1_1_image_list__coll__graph.svg" width="280" height="243"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6be716b6a486cb821f18f0433411c3ee" id="r_a6be716b6a486cb821f18f0433411c3ee"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6be716b6a486cb821f18f0433411c3ee">Base</a> = <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a>&lt;<a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>, HIMAGELIST&gt;</td></tr>
<tr class="separator:a6be716b6a486cb821f18f0433411c3ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_class_harlinn_1_1_common_1_1_core_1_1_handle"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_class_harlinn_1_1_common_1_1_core_1_1_handle')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Harlinn::Common::Core::Handle&lt; ImageList, HIMAGELIST &gt;</a></td></tr>
<tr class="memitem:a18c8eaf7218e23cc413d9ca9a8e31468 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a18c8eaf7218e23cc413d9ca9a8e31468"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a18c8eaf7218e23cc413d9ca9a8e31468">DerivedType</a></td></tr>
<tr class="separator:a18c8eaf7218e23cc413d9ca9a8e31468 inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa428c7964441885409f184d7e34acbce inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_aa428c7964441885409f184d7e34acbce"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a></td></tr>
<tr class="separator:aa428c7964441885409f184d7e34acbce inherit pub_types_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0812a94ef8c805d712d347e038f8ae09" id="r_a0812a94ef8c805d712d347e038f8ae09"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0812a94ef8c805d712d347e038f8ae09">ImageList</a> () noexcept</td></tr>
<tr class="separator:a0812a94ef8c805d712d347e038f8ae09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac604a84505af4d7b5a27d84279934738" id="r_ac604a84505af4d7b5a27d84279934738"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac604a84505af4d7b5a27d84279934738">ImageList</a> (HIMAGELIST handle, bool closeHandle=true) noexcept</td></tr>
<tr class="separator:ac604a84505af4d7b5a27d84279934738"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af91c52d855aea3629a84b120d35efac7" id="r_af91c52d855aea3629a84b120d35efac7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af91c52d855aea3629a84b120d35efac7">ImageList</a> (int elementWidth, int elementHeight, int count, int growBy, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#af58dbafe882c024c43dd791094050f07">ImageListFlags</a> flags, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4e86aa84b782757040762e3bc4533c8">ImageListColor</a> color)</td></tr>
<tr class="memdesc:af91c52d855aea3629a84b120d35efac7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new image list.  <br /></td></tr>
<tr class="separator:af91c52d855aea3629a84b120d35efac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55994685349cb886c1262462f1feca24" id="r_a55994685349cb886c1262462f1feca24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a55994685349cb886c1262462f1feca24">Close</a> () noexcept</td></tr>
<tr class="memdesc:a55994685349cb886c1262462f1feca24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the image list.  <br /></td></tr>
<tr class="separator:a55994685349cb886c1262462f1feca24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad802cc661d11ad734601e0096f9b72f0" id="r_ad802cc661d11ad734601e0096f9b72f0"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad802cc661d11ad734601e0096f9b72f0">Add</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;bitmap) const</td></tr>
<tr class="memdesc:ad802cc661d11ad734601e0096f9b72f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an image or images to an image list.  <br /></td></tr>
<tr class="separator:ad802cc661d11ad734601e0096f9b72f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a650e916d92cb03ca157e0973b14169d6" id="r_a650e916d92cb03ca157e0973b14169d6"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a650e916d92cb03ca157e0973b14169d6">Add</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;bitmap, const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;mask) const</td></tr>
<tr class="memdesc:a650e916d92cb03ca157e0973b14169d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an image or images to an image list.  <br /></td></tr>
<tr class="separator:a650e916d92cb03ca157e0973b14169d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048e1df9573fa1816598f74f5f9da1dc" id="r_a048e1df9573fa1816598f74f5f9da1dc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a048e1df9573fa1816598f74f5f9da1dc">Add</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;bitmap, COLORREF maskColor) const</td></tr>
<tr class="memdesc:a048e1df9573fa1816598f74f5f9da1dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an image or images to an image list, generating a mask from the specified bitmap.  <br /></td></tr>
<tr class="separator:a048e1df9573fa1816598f74f5f9da1dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a864b93f5c6b89f5d7361d8b983be9b88" id="r_a864b93f5c6b89f5d7361d8b983be9b88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a864b93f5c6b89f5d7361d8b983be9b88">Move</a> (int indexOfDestinationImage, int indexOfSourceImage) const</td></tr>
<tr class="memdesc:a864b93f5c6b89f5d7361d8b983be9b88"><td class="mdescLeft">&#160;</td><td class="mdescRight">The source image is copied to the destination image's index. This operation results in multiple instances of a given image.  <br /></td></tr>
<tr class="separator:a864b93f5c6b89f5d7361d8b983be9b88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f6ace0d34f8369e63230d2e189d8b6" id="r_af5f6ace0d34f8369e63230d2e189d8b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af5f6ace0d34f8369e63230d2e189d8b6">Swap</a> (int indexOfFirstImage, int indexOfSecondImage) const</td></tr>
<tr class="memdesc:af5f6ace0d34f8369e63230d2e189d8b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The source and destination images exchange positions within the image list.  <br /></td></tr>
<tr class="separator:af5f6ace0d34f8369e63230d2e189d8b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4daeb91909e8502dd2163a75e10cdabd" id="r_a4daeb91909e8502dd2163a75e10cdabd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4daeb91909e8502dd2163a75e10cdabd">Clone</a> () const</td></tr>
<tr class="memdesc:a4daeb91909e8502dd2163a75e10cdabd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a duplicate of an existing image list.  <br /></td></tr>
<tr class="separator:a4daeb91909e8502dd2163a75e10cdabd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace7dfd200cf74ca7d7fffdcf54f1186e" id="r_ace7dfd200cf74ca7d7fffdcf54f1186e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ace7dfd200cf74ca7d7fffdcf54f1186e">BeginDrag</a> (int indexOfTrackImage, int dxHotspot, int dyHotspot) const</td></tr>
<tr class="memdesc:ace7dfd200cf74ca7d7fffdcf54f1186e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins dragging an image.  <br /></td></tr>
<tr class="separator:ace7dfd200cf74ca7d7fffdcf54f1186e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ff3976c9b3273ce3559ab27095bceb0" id="r_a5ff3976c9b3273ce3559ab27095bceb0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5ff3976c9b3273ce3559ab27095bceb0">BeginDrag</a> (int indexOfTrackImage, const POINT &amp;hotspot) const</td></tr>
<tr class="memdesc:a5ff3976c9b3273ce3559ab27095bceb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins dragging an image.  <br /></td></tr>
<tr class="separator:a5ff3976c9b3273ce3559ab27095bceb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35d99b5da1dfe59facc5ebd0feff2e5c" id="r_a35d99b5da1dfe59facc5ebd0feff2e5c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a35d99b5da1dfe59facc5ebd0feff2e5c">BeginDrag</a> (int indexOfTrackImage, const <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4d54637f7ab77ac7e90b713907d781a">Point</a> &amp;hotspot) const</td></tr>
<tr class="memdesc:a35d99b5da1dfe59facc5ebd0feff2e5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins dragging an image.  <br /></td></tr>
<tr class="separator:a35d99b5da1dfe59facc5ebd0feff2e5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade11b1f0c1cb09f7914436f06436ee8a" id="r_ade11b1f0c1cb09f7914436f06436ee8a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ade11b1f0c1cb09f7914436f06436ee8a">Draw</a> (int indexOfImage, HDC hDC, int x, int y, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55d">ImageListDrawFlags</a> flags) const</td></tr>
<tr class="memdesc:ade11b1f0c1cb09f7914436f06436ee8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draws an image list item in the specified device context.  <br /></td></tr>
<tr class="separator:ade11b1f0c1cb09f7914436f06436ee8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a396b5003817340b714c608161a7eec39" id="r_a396b5003817340b714c608161a7eec39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a396b5003817340b714c608161a7eec39">Draw</a> (int indexOfImage, HDC hDC, int x, int y, int dx, int dy, COLORREF background, COLORREF foreground, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55d">ImageListDrawFlags</a> flags) const</td></tr>
<tr class="memdesc:a396b5003817340b714c608161a7eec39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draws an image list item in the specified device context. The function uses the specified drawing style and blends the image with the specified color.  <br /></td></tr>
<tr class="separator:a396b5003817340b714c608161a7eec39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a905b52c765a69151280cedc8b0ad9d" id="r_a4a905b52c765a69151280cedc8b0ad9d"><td class="memItemLeft" align="right" valign="top">COLORREF&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4a905b52c765a69151280cedc8b0ad9d">GetBkColor</a> () const</td></tr>
<tr class="memdesc:a4a905b52c765a69151280cedc8b0ad9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the current background color for an image list.  <br /></td></tr>
<tr class="separator:a4a905b52c765a69151280cedc8b0ad9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19fb605f4607fa2ff52fb95be7a060b9" id="r_a19fb605f4607fa2ff52fb95be7a060b9"><td class="memItemLeft" align="right" valign="top">COLORREF&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a19fb605f4607fa2ff52fb95be7a060b9">BackgroundColor</a> () const</td></tr>
<tr class="memdesc:a19fb605f4607fa2ff52fb95be7a060b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the current background color for an image list.  <br /></td></tr>
<tr class="separator:a19fb605f4607fa2ff52fb95be7a060b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada687b2a381874eca148b77316ff3ded" id="r_ada687b2a381874eca148b77316ff3ded"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_icon_handle.xhtml">IconHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ada687b2a381874eca148b77316ff3ded">GetIcon</a> (int indexOfImage, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55d">ImageListDrawFlags</a> flags=<a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55da960b44c579bc2f6818d2daaf9e4c16f0">ImageListDrawFlags::Normal</a>) const</td></tr>
<tr class="memdesc:ada687b2a381874eca148b77316ff3ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an icon from an image and mask in an image list.  <br /></td></tr>
<tr class="separator:ada687b2a381874eca148b77316ff3ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f5ea9e81f71a71779e6e3ccb756575" id="r_a34f5ea9e81f71a71779e6e3ccb756575"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a34f5ea9e81f71a71779e6e3ccb756575">GetIconSize</a> (int *x, int *y) const</td></tr>
<tr class="memdesc:a34f5ea9e81f71a71779e6e3ccb756575"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:a34f5ea9e81f71a71779e6e3ccb756575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3b7d378227ea9ee18e657a68394b0bb" id="r_ad3b7d378227ea9ee18e657a68394b0bb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad3b7d378227ea9ee18e657a68394b0bb">GetIconSize</a> (SIZE &amp;size) const</td></tr>
<tr class="memdesc:ad3b7d378227ea9ee18e657a68394b0bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:ad3b7d378227ea9ee18e657a68394b0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc8d9d264b8f7ed1553a867de7a29b20" id="r_acc8d9d264b8f7ed1553a867de7a29b20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acc8d9d264b8f7ed1553a867de7a29b20">GetIconSize</a> (<a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a> &amp;size) const</td></tr>
<tr class="memdesc:acc8d9d264b8f7ed1553a867de7a29b20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:acc8d9d264b8f7ed1553a867de7a29b20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a524838b4d3a9ee413cb2d0e195c38e4a" id="r_a524838b4d3a9ee413cb2d0e195c38e4a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a524838b4d3a9ee413cb2d0e195c38e4a">GetIconSize</a> () const</td></tr>
<tr class="memdesc:a524838b4d3a9ee413cb2d0e195c38e4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:a524838b4d3a9ee413cb2d0e195c38e4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42c06e6eb83fd7802dd8373cbe3750bf" id="r_a42c06e6eb83fd7802dd8373cbe3750bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a42c06e6eb83fd7802dd8373cbe3750bf">GetImageSize</a> (int *x, int *y) const</td></tr>
<tr class="memdesc:a42c06e6eb83fd7802dd8373cbe3750bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:a42c06e6eb83fd7802dd8373cbe3750bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0d364b6f4e11d79215bf802e07d17e4" id="r_ac0d364b6f4e11d79215bf802e07d17e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac0d364b6f4e11d79215bf802e07d17e4">GetImageSize</a> (SIZE &amp;size) const</td></tr>
<tr class="memdesc:ac0d364b6f4e11d79215bf802e07d17e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:ac0d364b6f4e11d79215bf802e07d17e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1152d3693cbcefe1064d066949b884ab" id="r_a1152d3693cbcefe1064d066949b884ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1152d3693cbcefe1064d066949b884ab">GetImageSize</a> (<a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a> &amp;size) const</td></tr>
<tr class="memdesc:a1152d3693cbcefe1064d066949b884ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:a1152d3693cbcefe1064d066949b884ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfeab612733d0c3e25919748c284b007" id="r_acfeab612733d0c3e25919748c284b007"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acfeab612733d0c3e25919748c284b007">GetImageSize</a> () const</td></tr>
<tr class="memdesc:acfeab612733d0c3e25919748c284b007"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.  <br /></td></tr>
<tr class="separator:acfeab612733d0c3e25919748c284b007"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf22355aa3f7066fcab552ccdce8ca6c" id="r_aaf22355aa3f7066fcab552ccdce8ca6c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaf22355aa3f7066fcab552ccdce8ca6c">Count</a> () const</td></tr>
<tr class="memdesc:aaf22355aa3f7066fcab552ccdce8ca6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the number of images in an image list.  <br /></td></tr>
<tr class="separator:aaf22355aa3f7066fcab552ccdce8ca6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45bcb5c7eb9b3f6222d1faba47c8e6f0" id="r_a45bcb5c7eb9b3f6222d1faba47c8e6f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a45bcb5c7eb9b3f6222d1faba47c8e6f0">GetImageInfo</a> (int imageIndex, IMAGEINFO &amp;imageinfo) const</td></tr>
<tr class="memdesc:a45bcb5c7eb9b3f6222d1faba47c8e6f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves information about an image.  <br /></td></tr>
<tr class="separator:a45bcb5c7eb9b3f6222d1faba47c8e6f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac81c5c5913af93ae8775d42a58c9ce75" id="r_ac81c5c5913af93ae8775d42a58c9ce75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac81c5c5913af93ae8775d42a58c9ce75">GetImageInfo</a> (int imageIndex, IMAGEINFO *imageinfo) const</td></tr>
<tr class="memdesc:ac81c5c5913af93ae8775d42a58c9ce75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves information about an image.  <br /></td></tr>
<tr class="separator:ac81c5c5913af93ae8775d42a58c9ce75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3db3cb4e24eac56e568c39df982b1da4" id="r_a3db3cb4e24eac56e568c39df982b1da4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3db3cb4e24eac56e568c39df982b1da4">Merge</a> (int i1, HIMAGELIST himl2, int i2, int dx, int dy) const</td></tr>
<tr class="memdesc:a3db3cb4e24eac56e568c39df982b1da4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new image by combining two existing images. The function also creates a new image list in which to store the image.  <br /></td></tr>
<tr class="separator:a3db3cb4e24eac56e568c39df982b1da4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af905a7eb9e5da82f629762db1840b0cc" id="r_af905a7eb9e5da82f629762db1840b0cc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af905a7eb9e5da82f629762db1840b0cc">Remove</a> (int index) const</td></tr>
<tr class="memdesc:af905a7eb9e5da82f629762db1840b0cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes an image from the image list.  <br /></td></tr>
<tr class="separator:af905a7eb9e5da82f629762db1840b0cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d29a9e9942d92287aa318d1e517d2ec" id="r_a6d29a9e9942d92287aa318d1e517d2ec"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6d29a9e9942d92287aa318d1e517d2ec">Replace</a> (int index, HBITMAP image, HBITMAP mask) const</td></tr>
<tr class="memdesc:a6d29a9e9942d92287aa318d1e517d2ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces an image in the image list with a new image.  <br /></td></tr>
<tr class="separator:a6d29a9e9942d92287aa318d1e517d2ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5ea43b5969dbedc531cb08554c882c" id="r_a6c5ea43b5969dbedc531cb08554c882c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6c5ea43b5969dbedc531cb08554c882c">Replace</a> (int index, HICON icon) const</td></tr>
<tr class="memdesc:a6c5ea43b5969dbedc531cb08554c882c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces an image with an icon or cursor.  <br /></td></tr>
<tr class="separator:a6c5ea43b5969dbedc531cb08554c882c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a887b20e11ba83c6e18e76bd24751b172" id="r_a887b20e11ba83c6e18e76bd24751b172"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_windows_1_1_color_ref.xhtml">ColorRef</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a887b20e11ba83c6e18e76bd24751b172">SetBkColor</a> (const <a class="el" href="class_harlinn_1_1_windows_1_1_color_ref.xhtml">ColorRef</a> &amp;newBackgroundColor) const</td></tr>
<tr class="memdesc:a887b20e11ba83c6e18e76bd24751b172"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the background color for an image list. This function only works if you add an icon or use Add with a black and white bitmap. Without a mask, the entire image is drawn; hence the background color is not visible.  <br /></td></tr>
<tr class="separator:a887b20e11ba83c6e18e76bd24751b172"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Harlinn::Common::Core::Handle&lt; ImageList, HIMAGELIST &gt;</a></td></tr>
<tr class="memitem:abb70a2a59aeaa7c85b43abe952c39179 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_abb70a2a59aeaa7c85b43abe952c39179"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#abb70a2a59aeaa7c85b43abe952c39179">Handle</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;other)=delete</td></tr>
<tr class="separator:abb70a2a59aeaa7c85b43abe952c39179 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6847836c48d9a927f5d65ab171a6cabb inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a6847836c48d9a927f5d65ab171a6cabb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a6847836c48d9a927f5d65ab171a6cabb">Handle</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:a6847836c48d9a927f5d65ab171a6cabb inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc3317fb28a8061cde894df2b6894c48 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_adc3317fb28a8061cde894df2b6894c48"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#adc3317fb28a8061cde894df2b6894c48">~Handle</a> () noexcept</td></tr>
<tr class="separator:adc3317fb28a8061cde894df2b6894c48 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abee9b1a827f5d947b6f2130f6ce56f21 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_abee9b1a827f5d947b6f2130f6ce56f21"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#abee9b1a827f5d947b6f2130f6ce56f21">IsValid</a> () const noexcept</td></tr>
<tr class="separator:abee9b1a827f5d947b6f2130f6ce56f21 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cc49fed55e92c20c47a7472bcf0d916 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a8cc49fed55e92c20c47a7472bcf0d916"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a8cc49fed55e92c20c47a7472bcf0d916">operator=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;other)=delete</td></tr>
<tr class="separator:a8cc49fed55e92c20c47a7472bcf0d916 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a3015fe8a862420a51ba14adccbfe32 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a8a3015fe8a862420a51ba14adccbfe32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a8a3015fe8a862420a51ba14adccbfe32">operator=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:a8a3015fe8a862420a51ba14adccbfe32 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53f87d2ebdf3e11d92c9e699c10bb98c inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a53f87d2ebdf3e11d92c9e699c10bb98c"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a53f87d2ebdf3e11d92c9e699c10bb98c">operator&lt;=&gt;</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a53f87d2ebdf3e11d92c9e699c10bb98c inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a426c966db96e48883cf37aa619ddc811 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a426c966db96e48883cf37aa619ddc811"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a426c966db96e48883cf37aa619ddc811">operator&lt;=&gt;</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a> handle) const noexcept</td></tr>
<tr class="separator:a426c966db96e48883cf37aa619ddc811 inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a158cfb823345634f90f75fcaebc9be1e inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a158cfb823345634f90f75fcaebc9be1e"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a158cfb823345634f90f75fcaebc9be1e">operator==</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a158cfb823345634f90f75fcaebc9be1e inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6421667bed053df49cc11685b5d490af inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a6421667bed053df49cc11685b5d490af"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a6421667bed053df49cc11685b5d490af">operator==</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a> handle) const noexcept</td></tr>
<tr class="separator:a6421667bed053df49cc11685b5d490af inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a370706347436cf008e9abc73aa29451f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a370706347436cf008e9abc73aa29451f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a370706347436cf008e9abc73aa29451f">operator HandleType</a> () const noexcept</td></tr>
<tr class="separator:a370706347436cf008e9abc73aa29451f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18834c23bf0f4e979c74699cd61e576e inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a18834c23bf0f4e979c74699cd61e576e"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a18834c23bf0f4e979c74699cd61e576e">Value</a> () const noexcept</td></tr>
<tr class="separator:a18834c23bf0f4e979c74699cd61e576e inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a004f898e11f3e7964876517bca93520f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a004f898e11f3e7964876517bca93520f"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a004f898e11f3e7964876517bca93520f">OwnsHandle</a> () const noexcept</td></tr>
<tr class="separator:a004f898e11f3e7964876517bca93520f inherit pub_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a8f696de570a7802cd1b3b0c473704ef4" id="r_a8f696de570a7802cd1b3b0c473704ef4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8f696de570a7802cd1b3b0c473704ef4">DragEnter</a> (HWND hwndLock, int x, int y)</td></tr>
<tr class="memdesc:a8f696de570a7802cd1b3b0c473704ef4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Displays the drag image at the specified position within the window.  <br /></td></tr>
<tr class="separator:a8f696de570a7802cd1b3b0c473704ef4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6da4273c5853e6ca98d1e0efae23f7fe" id="r_a6da4273c5853e6ca98d1e0efae23f7fe"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6da4273c5853e6ca98d1e0efae23f7fe">DragEnter</a> (<a class="el" href="class_harlinn_1_1_windows_1_1_control.xhtml">Control</a> &amp;control, int x, int y)</td></tr>
<tr class="memdesc:a6da4273c5853e6ca98d1e0efae23f7fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Displays the drag image at the specified position within the control.  <br /></td></tr>
<tr class="separator:a6da4273c5853e6ca98d1e0efae23f7fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf90883b089bc8f04f7b1b63212f9f5d" id="r_adf90883b089bc8f04f7b1b63212f9f5d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adf90883b089bc8f04f7b1b63212f9f5d">DragLeave</a> (HWND hwndLock)</td></tr>
<tr class="memdesc:adf90883b089bc8f04f7b1b63212f9f5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlocks the specified window and hides the drag image, allowing the window to be updated.  <br /></td></tr>
<tr class="separator:adf90883b089bc8f04f7b1b63212f9f5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9169307079618ef9a79309734f71accb" id="r_a9169307079618ef9a79309734f71accb"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9169307079618ef9a79309734f71accb">DragLeave</a> (<a class="el" href="class_harlinn_1_1_windows_1_1_control.xhtml">Control</a> &amp;control)</td></tr>
<tr class="memdesc:a9169307079618ef9a79309734f71accb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlocks the specified control and hides the drag image, allowing the control to be updated.  <br /></td></tr>
<tr class="separator:a9169307079618ef9a79309734f71accb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7fb759aa367bf054d9b5a91511676d3" id="r_af7fb759aa367bf054d9b5a91511676d3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af7fb759aa367bf054d9b5a91511676d3">DragMove</a> (int x, int y)</td></tr>
<tr class="memdesc:af7fb759aa367bf054d9b5a91511676d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the image that is being dragged during a drag-and-drop operation. This function is typically called in response to a WM_MOUSEMOVE message.  <br /></td></tr>
<tr class="separator:af7fb759aa367bf054d9b5a91511676d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd50eca290ba6eb27b108134efdcd788" id="r_abd50eca290ba6eb27b108134efdcd788"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abd50eca290ba6eb27b108134efdcd788">DragShowNolock</a> (bool showImage)</td></tr>
<tr class="memdesc:abd50eca290ba6eb27b108134efdcd788"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the image being dragged.  <br /></td></tr>
<tr class="separator:abd50eca290ba6eb27b108134efdcd788"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a280cb78f5160f28e3fd33e27da358fb0" id="r_a280cb78f5160f28e3fd33e27da358fb0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a280cb78f5160f28e3fd33e27da358fb0">EndDrag</a> ()</td></tr>
<tr class="memdesc:a280cb78f5160f28e3fd33e27da358fb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends a drag operation.  <br /></td></tr>
<tr class="separator:a280cb78f5160f28e3fd33e27da358fb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99b625d625b53ba85554217d88bf25e0" id="r_a99b625d625b53ba85554217d88bf25e0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a99b625d625b53ba85554217d88bf25e0">GetDragImage</a> (POINT *ppt, POINT *pptHotspot)</td></tr>
<tr class="memdesc:a99b625d625b53ba85554217d88bf25e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the temporary image list that is used for the drag image. The function also retrieves the current drag position and the offset of the drag image relative to the drag position.  <br /></td></tr>
<tr class="separator:a99b625d625b53ba85554217d88bf25e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f8d834d1e02e46f1a6e6621119cc242" id="r_a3f8d834d1e02e46f1a6e6621119cc242"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3f8d834d1e02e46f1a6e6621119cc242">GetDragImage</a> (<a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4d54637f7ab77ac7e90b713907d781a">Point</a> *ppt, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4d54637f7ab77ac7e90b713907d781a">Point</a> *pptHotspot)</td></tr>
<tr class="memdesc:a3f8d834d1e02e46f1a6e6621119cc242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the temporary image list that is used for the drag image. The function also retrieves the current drag position and the offset of the drag image relative to the drag position.  <br /></td></tr>
<tr class="separator:a3f8d834d1e02e46f1a6e6621119cc242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10ee78e2c5f4f82108882a5444de904b" id="r_a10ee78e2c5f4f82108882a5444de904b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a10ee78e2c5f4f82108882a5444de904b">Draw</a> (const IMAGELISTDRAWPARAMS *imagelistDrawOarams)</td></tr>
<tr class="memdesc:a10ee78e2c5f4f82108882a5444de904b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draws an image list image based on an IMAGELISTDRAWPARAMS structure.  <br /></td></tr>
<tr class="separator:a10ee78e2c5f4f82108882a5444de904b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6dc337b733ee294e8195f4009411af8" id="r_ad6dc337b733ee294e8195f4009411af8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad6dc337b733ee294e8195f4009411af8">Draw</a> (const IMAGELISTDRAWPARAMS &amp;imagelistDrawParams)</td></tr>
<tr class="memdesc:ad6dc337b733ee294e8195f4009411af8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draws an image list image based on an IMAGELISTDRAWPARAMS structure.  <br /></td></tr>
<tr class="separator:ad6dc337b733ee294e8195f4009411af8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d434f61c6a1397dc65aff1352effe80" id="r_a5d434f61c6a1397dc65aff1352effe80"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5d434f61c6a1397dc65aff1352effe80">Load</a> (HINSTANCE hInstance, const wchar_t *name, int imageWidth, int growBy, COLORREF maskColor, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#aa5f7fa05d3c821ce043e7671b06aebd7">ImageListLoadFlags</a> flags)</td></tr>
<tr class="memdesc:a5d434f61c6a1397dc65aff1352effe80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an image list from the specified bitmap.  <br /></td></tr>
<tr class="separator:a5d434f61c6a1397dc65aff1352effe80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ecb276dfe1254f297a73aca1457ae10" id="r_a7ecb276dfe1254f297a73aca1457ae10"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7ecb276dfe1254f297a73aca1457ae10">LoadFromFile</a> (const wchar_t *name, int imageWidth, int growBy, COLORREF maskColor, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#aa5f7fa05d3c821ce043e7671b06aebd7">ImageListLoadFlags</a> flags)</td></tr>
<tr class="memdesc:a7ecb276dfe1254f297a73aca1457ae10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an image list from the specified bitmap.  <br /></td></tr>
<tr class="separator:a7ecb276dfe1254f297a73aca1457ae10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e6d658bab5cad7c612aebd31e802a4d" id="r_a3e6d658bab5cad7c612aebd31e802a4d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3e6d658bab5cad7c612aebd31e802a4d">LoadFromFile</a> (const wchar_t *name, int imageWidth)</td></tr>
<tr class="memdesc:a3e6d658bab5cad7c612aebd31e802a4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an image list from the specified bitmap.  <br /></td></tr>
<tr class="separator:a3e6d658bab5cad7c612aebd31e802a4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a4c441fca026dea9c125691ef13e8e6" id="r_a2a4c441fca026dea9c125691ef13e8e6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2a4c441fca026dea9c125691ef13e8e6">Merge</a> (HIMAGELIST himl1, int i1, HIMAGELIST himl2, int i2, int dx, int dy)</td></tr>
<tr class="memdesc:a2a4c441fca026dea9c125691ef13e8e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new image by combining two existing images. The function also creates a new image list in which to store the image.  <br /></td></tr>
<tr class="separator:a2a4c441fca026dea9c125691ef13e8e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ac4c9462ff96c4fe7ef4a20b4c7a1ae" id="r_a7ac4c9462ff96c4fe7ef4a20b4c7a1ae"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7ac4c9462ff96c4fe7ef4a20b4c7a1ae">Read</a> (LPSTREAM stream)</td></tr>
<tr class="memdesc:a7ac4c9462ff96c4fe7ef4a20b4c7a1ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads an image list from a stream.  <br /></td></tr>
<tr class="separator:a7ac4c9462ff96c4fe7ef4a20b4c7a1ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_handle')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Harlinn::Common::Core::Handle&lt; ImageList, HIMAGELIST &gt;</a></td></tr>
<tr class="memitem:a26018a2a2b154b9b169709c6f4b8ca6b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a26018a2a2b154b9b169709c6f4b8ca6b"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a26018a2a2b154b9b169709c6f4b8ca6b">InvalidHandleValue</a> () noexcept</td></tr>
<tr class="separator:a26018a2a2b154b9b169709c6f4b8ca6b inherit pub_static_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-static-methods" name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:acae98d50480c1e315b46f6a64f56ac79" id="r_acae98d50480c1e315b46f6a64f56ac79"><td class="memItemLeft" align="right" valign="top">static HIMAGELIST&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acae98d50480c1e315b46f6a64f56ac79">CreateImageList</a> (int elementWidth, int elementHeight, int count, int growBy, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#af58dbafe882c024c43dd791094050f07">ImageListFlags</a> flags, <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4e86aa84b782757040762e3bc4533c8">ImageListColor</a> color)</td></tr>
<tr class="separator:acae98d50480c1e315b46f6a64f56ac79"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Harlinn::Common::Core::Handle&lt; ImageList, HIMAGELIST &gt;</a></td></tr>
<tr class="memitem:ad7c4be0d398b2f1f0c608ae347941541 inherit pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_ad7c4be0d398b2f1f0c608ae347941541"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#ad7c4be0d398b2f1f0c608ae347941541">Handle</a> () noexcept</td></tr>
<tr class="separator:ad7c4be0d398b2f1f0c608ae347941541 inherit pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0620b59b2b5902e5dfd25055d8a2a33 inherit pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_aa0620b59b2b5902e5dfd25055d8a2a33"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa0620b59b2b5902e5dfd25055d8a2a33">Handle</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a> handle, bool ownsHandle=true) noexcept</td></tr>
<tr class="separator:aa0620b59b2b5902e5dfd25055d8a2a33 inherit pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f5edca0cf9fe835d193bb358f9ecd9 inherit pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a84f5edca0cf9fe835d193bb358f9ecd9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a84f5edca0cf9fe835d193bb358f9ecd9">SetValue</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a> handle, bool ownsHandle=true)</td></tr>
<tr class="separator:a84f5edca0cf9fe835d193bb358f9ecd9 inherit pro_methods_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_handle"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_handle')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Harlinn::Common::Core::Handle&lt; ImageList, HIMAGELIST &gt;</a></td></tr>
<tr class="memitem:a7787e872f5227a764ea9ce06a4b23360 inherit pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_handle" id="r_a7787e872f5227a764ea9ce06a4b23360"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#aa428c7964441885409f184d7e34acbce">HandleType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml#a7787e872f5227a764ea9ce06a4b23360">value_</a></td></tr>
<tr class="separator:a7787e872f5227a764ea9ce06a4b23360 inherit pro_attribs_class_harlinn_1_1_common_1_1_core_1_1_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a6be716b6a486cb821f18f0433411c3ee" name="a6be716b6a486cb821f18f0433411c3ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6be716b6a486cb821f18f0433411c3ee">&#9670;&#160;</a></span>Base</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a6be716b6a486cb821f18f0433411c3ee">Harlinn::Windows::ImageList::Base</a> = <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_handle.xhtml">Handle</a>&lt;<a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a>, HIMAGELIST&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0812a94ef8c805d712d347e038f8ae09" name="a0812a94ef8c805d712d347e038f8ae09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0812a94ef8c805d712d347e038f8ae09">&#9670;&#160;</a></span>ImageList() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Windows::ImageList::ImageList </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac604a84505af4d7b5a27d84279934738" name="ac604a84505af4d7b5a27d84279934738"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac604a84505af4d7b5a27d84279934738">&#9670;&#160;</a></span>ImageList() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Windows::ImageList::ImageList </td>
          <td>(</td>
          <td class="paramtype">HIMAGELIST</td>          <td class="paramname"><span class="paramname"><em>handle</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>closeHandle</em></span><span class="paramdefsep"> = </span><span class="paramdefval">true</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af91c52d855aea3629a84b120d35efac7" name="af91c52d855aea3629a84b120d35efac7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af91c52d855aea3629a84b120d35efac7">&#9670;&#160;</a></span>ImageList() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Harlinn::Windows::ImageList::ImageList </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>elementWidth</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>elementHeight</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>growBy</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#af58dbafe882c024c43dd791094050f07">ImageListFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4e86aa84b782757040762e3bc4533c8">ImageListColor</a></td>          <td class="paramname"><span class="paramname"><em>color</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new image list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">elementWidth</td><td>The width, in pixels, of each image</td></tr>
    <tr><td class="paramname">elementHeight</td><td>The height, in pixels, of each image</td></tr>
    <tr><td class="paramname">count</td><td>The number of images that the image list initially contains.</td></tr>
    <tr><td class="paramname">growBy</td><td>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</td></tr>
    <tr><td class="paramname">flags</td><td>A set of bit flags that specify the type of image list to create.</td></tr>
    <tr><td class="paramname">color</td><td>Specifies the color-depth of the imagelist</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ad802cc661d11ad734601e0096f9b72f0" name="ad802cc661d11ad734601e0096f9b72f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad802cc661d11ad734601e0096f9b72f0">&#9670;&#160;</a></span>Add() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Harlinn::Windows::ImageList::Add </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>bitmap</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an image or images to an image list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bitmap</td><td>A handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the index of the first new image</dd></dl>

</div>
</div>
<a id="a048e1df9573fa1816598f74f5f9da1dc" name="a048e1df9573fa1816598f74f5f9da1dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a048e1df9573fa1816598f74f5f9da1dc">&#9670;&#160;</a></span>Add() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Harlinn::Windows::ImageList::Add </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>bitmap</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">COLORREF</td>          <td class="paramname"><span class="paramname"><em>maskColor</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an image or images to an image list, generating a mask from the specified bitmap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bitmap</td><td>A handle to the bitmap that contains one or more images. The number of images is inferred from the width of the bitmap.</td></tr>
    <tr><td class="paramname">maskColor</td><td>The color used to generate the mask. Each pixel of this color in the specified bitmap is changed to black, and the corresponding bit in the mask is set to 1.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the index of the first new image</dd></dl>

</div>
</div>
<a id="a650e916d92cb03ca157e0973b14169d6" name="a650e916d92cb03ca157e0973b14169d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a650e916d92cb03ca157e0973b14169d6">&#9670;&#160;</a></span>Add() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Harlinn::Windows::ImageList::Add </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>bitmap</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_bitmap_handle.xhtml">BitmapHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>mask</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an image or images to an image list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bitmap</td><td>A handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap.</td></tr>
    <tr><td class="paramname">mask</td><td>A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the index of the first new image</dd></dl>

</div>
</div>
<a id="a19fb605f4607fa2ff52fb95be7a060b9" name="a19fb605f4607fa2ff52fb95be7a060b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19fb605f4607fa2ff52fb95be7a060b9">&#9670;&#160;</a></span>BackgroundColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">COLORREF Harlinn::Windows::ImageList::BackgroundColor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the current background color for an image list. </p>
<dl class="section return"><dt>Returns</dt><dd>The return value is the background color.</dd></dl>

</div>
</div>
<a id="a5ff3976c9b3273ce3559ab27095bceb0" name="a5ff3976c9b3273ce3559ab27095bceb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ff3976c9b3273ce3559ab27095bceb0">&#9670;&#160;</a></span>BeginDrag() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::BeginDrag </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfTrackImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const POINT &amp;</td>          <td class="paramname"><span class="paramname"><em>hotspot</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins dragging an image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfTrackImage</td><td>The index of the image to drag.</td></tr>
    <tr><td class="paramname">hotspot</td><td>The x and y coordinates of the location of the drag position relative to the upper-left corner of the image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a35d99b5da1dfe59facc5ebd0feff2e5c" name="a35d99b5da1dfe59facc5ebd0feff2e5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35d99b5da1dfe59facc5ebd0feff2e5c">&#9670;&#160;</a></span>BeginDrag() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::BeginDrag </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfTrackImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4d54637f7ab77ac7e90b713907d781a">Point</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>hotspot</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins dragging an image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfTrackImage</td><td>The index of the image to drag.</td></tr>
    <tr><td class="paramname">hotspot</td><td>The x and y coordinates of the location of the drag position relative to the upper-left corner of the image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ace7dfd200cf74ca7d7fffdcf54f1186e" name="ace7dfd200cf74ca7d7fffdcf54f1186e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace7dfd200cf74ca7d7fffdcf54f1186e">&#9670;&#160;</a></span>BeginDrag() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::BeginDrag </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfTrackImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dxHotspot</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dyHotspot</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins dragging an image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfTrackImage</td><td>The index of the image to drag.</td></tr>
    <tr><td class="paramname">dxHotspot</td><td>The x-coordinate of the location of the drag position relative to the upper-left corner of the image.</td></tr>
    <tr><td class="paramname">dyHotspot</td><td>The y-coordinate of the location of the drag position relative to the upper-left corner of the image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4daeb91909e8502dd2163a75e10cdabd" name="a4daeb91909e8502dd2163a75e10cdabd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4daeb91909e8502dd2163a75e10cdabd">&#9670;&#160;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::Clone </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a duplicate of an existing image list. </p>
<dl class="section return"><dt>Returns</dt><dd>the duplicate</dd></dl>

</div>
</div>
<a id="a55994685349cb886c1262462f1feca24" name="a55994685349cb886c1262462f1feca24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55994685349cb886c1262462f1feca24">&#9670;&#160;</a></span>Close()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::Close </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destroys the image list. </p>

</div>
</div>
<a id="aaf22355aa3f7066fcab552ccdce8ca6c" name="aaf22355aa3f7066fcab552ccdce8ca6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf22355aa3f7066fcab552ccdce8ca6c">&#9670;&#160;</a></span>Count()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Harlinn::Windows::ImageList::Count </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the number of images in an image list. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of images.</dd></dl>

</div>
</div>
<a id="acae98d50480c1e315b46f6a64f56ac79" name="acae98d50480c1e315b46f6a64f56ac79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acae98d50480c1e315b46f6a64f56ac79">&#9670;&#160;</a></span>CreateImageList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static HIMAGELIST Harlinn::Windows::ImageList::CreateImageList </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>elementWidth</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>elementHeight</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>growBy</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#af58dbafe882c024c43dd791094050f07">ImageListFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4e86aa84b782757040762e3bc4533c8">ImageListColor</a></td>          <td class="paramname"><span class="paramname"><em>color</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6da4273c5853e6ca98d1e0efae23f7fe" name="a6da4273c5853e6ca98d1e0efae23f7fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6da4273c5853e6ca98d1e0efae23f7fe">&#9670;&#160;</a></span>DragEnter() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::DragEnter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_windows_1_1_control.xhtml">Control</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>control</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>y</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Displays the drag image at the specified position within the control. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">control</td><td>The control that owns the drag image.</td></tr>
    <tr><td class="paramname">x</td><td>The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the control, not the client area.</td></tr>
    <tr><td class="paramname">y</td><td>The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the control, not the client area.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8f696de570a7802cd1b3b0c473704ef4" name="a8f696de570a7802cd1b3b0c473704ef4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f696de570a7802cd1b3b0c473704ef4">&#9670;&#160;</a></span>DragEnter() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::DragEnter </td>
          <td>(</td>
          <td class="paramtype">HWND</td>          <td class="paramname"><span class="paramname"><em>hwndLock</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>y</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Displays the drag image at the specified position within the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hwndLock</td><td>A handle to the window that owns the drag image.</td></tr>
    <tr><td class="paramname">x</td><td>The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</td></tr>
    <tr><td class="paramname">y</td><td>The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9169307079618ef9a79309734f71accb" name="a9169307079618ef9a79309734f71accb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9169307079618ef9a79309734f71accb">&#9670;&#160;</a></span>DragLeave() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::DragLeave </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_windows_1_1_control.xhtml">Control</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>control</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unlocks the specified control and hides the drag image, allowing the control to be updated. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">control</td><td>The <a class="el" href="class_harlinn_1_1_windows_1_1_control.xhtml">Control</a> that owns the drag image</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adf90883b089bc8f04f7b1b63212f9f5d" name="adf90883b089bc8f04f7b1b63212f9f5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf90883b089bc8f04f7b1b63212f9f5d">&#9670;&#160;</a></span>DragLeave() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::DragLeave </td>
          <td>(</td>
          <td class="paramtype">HWND</td>          <td class="paramname"><span class="paramname"><em>hwndLock</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unlocks the specified window and hides the drag image, allowing the window to be updated. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hwndLock</td><td>A handle to the window that owns the drag image</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af7fb759aa367bf054d9b5a91511676d3" name="af7fb759aa367bf054d9b5a91511676d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7fb759aa367bf054d9b5a91511676d3">&#9670;&#160;</a></span>DragMove()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::DragMove </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>y</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the image that is being dragged during a drag-and-drop operation. This function is typically called in response to a WM_MOUSEMOVE message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</td></tr>
    <tr><td class="paramname">y</td><td>The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abd50eca290ba6eb27b108134efdcd788" name="abd50eca290ba6eb27b108134efdcd788"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd50eca290ba6eb27b108134efdcd788">&#9670;&#160;</a></span>DragShowNolock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::DragShowNolock </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>showImage</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shows or hides the image being dragged. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">showImage</td><td>A value specifying whether to show or hide the image being dragged. Specify true to show the image or false to hide the image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad6dc337b733ee294e8195f4009411af8" name="ad6dc337b733ee294e8195f4009411af8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6dc337b733ee294e8195f4009411af8">&#9670;&#160;</a></span>Draw() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::Draw </td>
          <td>(</td>
          <td class="paramtype">const IMAGELISTDRAWPARAMS &amp;</td>          <td class="paramname"><span class="paramname"><em>imagelistDrawParams</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draws an image list image based on an IMAGELISTDRAWPARAMS structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">imagelistDrawParams</td><td>A reference to an IMAGELISTDRAWPARAMS structure that contains information about the draw operation.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a10ee78e2c5f4f82108882a5444de904b" name="a10ee78e2c5f4f82108882a5444de904b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10ee78e2c5f4f82108882a5444de904b">&#9670;&#160;</a></span>Draw() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::Draw </td>
          <td>(</td>
          <td class="paramtype">const IMAGELISTDRAWPARAMS *</td>          <td class="paramname"><span class="paramname"><em>imagelistDrawOarams</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draws an image list image based on an IMAGELISTDRAWPARAMS structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">imagelistDrawOarams</td><td>A pointer to an IMAGELISTDRAWPARAMS structure that contains information about the draw operation. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ade11b1f0c1cb09f7914436f06436ee8a" name="ade11b1f0c1cb09f7914436f06436ee8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade11b1f0c1cb09f7914436f06436ee8a">&#9670;&#160;</a></span>Draw() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::Draw </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HDC</td>          <td class="paramname"><span class="paramname"><em>hDC</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>y</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55d">ImageListDrawFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draws an image list item in the specified device context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfImage</td><td>The index of the image to draw.</td></tr>
    <tr><td class="paramname">hDC</td><td>A handle to the destination device context.</td></tr>
    <tr><td class="paramname">x</td><td>The x-coordinate at which to draw within the specified device context.</td></tr>
    <tr><td class="paramname">y</td><td>The y-coordinate at which to draw within the specified device context.</td></tr>
    <tr><td class="paramname">flags</td><td>The drawing style and, optionally, the overlay image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a396b5003817340b714c608161a7eec39" name="a396b5003817340b714c608161a7eec39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a396b5003817340b714c608161a7eec39">&#9670;&#160;</a></span>Draw() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::Draw </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HDC</td>          <td class="paramname"><span class="paramname"><em>hDC</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>y</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dy</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">COLORREF</td>          <td class="paramname"><span class="paramname"><em>background</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">COLORREF</td>          <td class="paramname"><span class="paramname"><em>foreground</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55d">ImageListDrawFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draws an image list item in the specified device context. The function uses the specified drawing style and blends the image with the specified color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfImage</td><td>The index of the image to draw.</td></tr>
    <tr><td class="paramname">hDC</td><td>A handle to the destination device context.</td></tr>
    <tr><td class="paramname">x</td><td>The x-coordinate at which to draw within the specified device context.</td></tr>
    <tr><td class="paramname">y</td><td>The y-coordinate at which to draw within the specified device context.</td></tr>
    <tr><td class="paramname">dx</td><td>The width of the portion of the image to draw relative to the upper-left corner of the image. If dx and dy are zero, the function draws the entire image. The function does not ensure that the parameters are valid.</td></tr>
    <tr><td class="paramname">dy</td><td>The height of the portion of the image to draw, relative to the upper-left corner of the image. If dx and dy are zero, the function draws the entire image. The function does not ensure that the parameters are valid.</td></tr>
    <tr><td class="paramname">background</td><td>The background color of the image. This parameter can be an application-defined RGB value or one of the following values: <ul>
<li>
CLR_NONE: No background color. The image is drawn transparently. </li>
<li>
CLR_DEFAULT: The default background color. The image is drawn using the background color of the image list. </li>
</ul>
</td></tr>
    <tr><td class="paramname">foreground</td><td>The foreground color of the image. This parameter can be an application-defined RGB value or one of the following values: <ul>
<li>
CLR_NONE: No blend color. The image is blended with the color of the destination device context. </li>
<li>
CLR_DEFAULT: The default foreground color. The image is drawn using the system highlight color as the foreground color. </li>
</ul>
</td></tr>
    <tr><td class="paramname">flags</td><td></td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a280cb78f5160f28e3fd33e27da358fb0" name="a280cb78f5160f28e3fd33e27da358fb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a280cb78f5160f28e3fd33e27da358fb0">&#9670;&#160;</a></span>EndDrag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Harlinn::Windows::ImageList::EndDrag </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends a drag operation. </p>

</div>
</div>
<a id="a4a905b52c765a69151280cedc8b0ad9d" name="a4a905b52c765a69151280cedc8b0ad9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a905b52c765a69151280cedc8b0ad9d">&#9670;&#160;</a></span>GetBkColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">COLORREF Harlinn::Windows::ImageList::GetBkColor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the current background color for an image list. </p>
<dl class="section return"><dt>Returns</dt><dd>The return value is the background color.</dd></dl>

</div>
</div>
<a id="a99b625d625b53ba85554217d88bf25e0" name="a99b625d625b53ba85554217d88bf25e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99b625d625b53ba85554217d88bf25e0">&#9670;&#160;</a></span>GetDragImage() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::GetDragImage </td>
          <td>(</td>
          <td class="paramtype">POINT *</td>          <td class="paramname"><span class="paramname"><em>ppt</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">POINT *</td>          <td class="paramname"><span class="paramname"><em>pptHotspot</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the temporary image list that is used for the drag image. The function also retrieves the current drag position and the offset of the drag image relative to the drag position. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ppt</td><td>A pointer to a POINT structure that receives the current drag position. Can be nullptr.</td></tr>
    <tr><td class="paramname">pptHotspot</td><td>A pointer to a POINT structure that receives the offset of the drag image relative to the drag position. Can be nullptr.</td></tr>
  </table>
  </dd>
</dl>
<p>The temporary image list is destroyed when the EndDrag function is called. To begin a drag operation, use the <a class="el" href="#ace7dfd200cf74ca7d7fffdcf54f1186e" title="Begins dragging an image.">ImageList::BeginDrag</a> function. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the image list</dd></dl>

</div>
</div>
<a id="a3f8d834d1e02e46f1a6e6621119cc242" name="a3f8d834d1e02e46f1a6e6621119cc242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f8d834d1e02e46f1a6e6621119cc242">&#9670;&#160;</a></span>GetDragImage() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::GetDragImage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4d54637f7ab77ac7e90b713907d781a">Point</a> *</td>          <td class="paramname"><span class="paramname"><em>ppt</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#ad4d54637f7ab77ac7e90b713907d781a">Point</a> *</td>          <td class="paramname"><span class="paramname"><em>pptHotspot</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the temporary image list that is used for the drag image. The function also retrieves the current drag position and the offset of the drag image relative to the drag position. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ppt</td><td>A pointer to a Point object that receives the current drag position. Can be nullptr.</td></tr>
    <tr><td class="paramname">pptHotspot</td><td>A pointer to a Point object that receives the offset of the drag image relative to the drag position. Can be nullptr.</td></tr>
  </table>
  </dd>
</dl>
<p>The temporary image list is destroyed when the EndDrag function is called. To begin a drag operation, use the <a class="el" href="#ace7dfd200cf74ca7d7fffdcf54f1186e" title="Begins dragging an image.">ImageList::BeginDrag</a> function. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the image list</dd></dl>

</div>
</div>
<a id="ada687b2a381874eca148b77316ff3ded" name="ada687b2a381874eca148b77316ff3ded"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada687b2a381874eca148b77316ff3ded">&#9670;&#160;</a></span>GetIcon()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_icon_handle.xhtml">IconHandle</a> Harlinn::Windows::ImageList::GetIcon </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55d">ImageListDrawFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#a975a35665245dfb472cc602c07b7b55da960b44c579bc2f6818d2daaf9e4c16f0">ImageListDrawFlags::Normal</a></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an icon from an image and mask in an image list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfImage</td><td>An index of the image.</td></tr>
    <tr><td class="paramname">flags</td><td>A combination of flags that specify the drawing style</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the icon</dd></dl>

</div>
</div>
<a id="a524838b4d3a9ee413cb2d0e195c38e4a" name="a524838b4d3a9ee413cb2d0e195c38e4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a524838b4d3a9ee413cb2d0e195c38e4a">&#9670;&#160;</a></span>GetIconSize() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a> Harlinn::Windows::ImageList::GetIconSize </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="section return"><dt>Returns</dt><dd>A Size object with the width and height, in pixels, of each image.</dd></dl>

</div>
</div>
<a id="a34f5ea9e81f71a71779e6e3ccb756575" name="a34f5ea9e81f71a71779e6e3ccb756575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f5ea9e81f71a71779e6e3ccb756575">&#9670;&#160;</a></span>GetIconSize() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetIconSize </td>
          <td>(</td>
          <td class="paramtype">int *</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *</td>          <td class="paramname"><span class="paramname"><em>y</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>A pointer to an integer variable that receives the width, in pixels, of each image.</td></tr>
    <tr><td class="paramname">y</td><td>A pointer to an integer variable that receives the height, in pixels, of each image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad3b7d378227ea9ee18e657a68394b0bb" name="ad3b7d378227ea9ee18e657a68394b0bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3b7d378227ea9ee18e657a68394b0bb">&#9670;&#160;</a></span>GetIconSize() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetIconSize </td>
          <td>(</td>
          <td class="paramtype">SIZE &amp;</td>          <td class="paramname"><span class="paramname"><em>size</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>A reference to a SIZE structure that receives the width and height, in pixels, of each image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acc8d9d264b8f7ed1553a867de7a29b20" name="acc8d9d264b8f7ed1553a867de7a29b20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc8d9d264b8f7ed1553a867de7a29b20">&#9670;&#160;</a></span>GetIconSize() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetIconSize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>size</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>A reference to a Size object that receives the width and height, in pixels, of each image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a45bcb5c7eb9b3f6222d1faba47c8e6f0" name="a45bcb5c7eb9b3f6222d1faba47c8e6f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45bcb5c7eb9b3f6222d1faba47c8e6f0">&#9670;&#160;</a></span>GetImageInfo() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetImageInfo </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>imageIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IMAGEINFO &amp;</td>          <td class="paramname"><span class="paramname"><em>imageinfo</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves information about an image. </p>
<p>An application should not call DeleteObject to destroy the bitmaps retrieved by GetImageInfo. The system destroys the bitmaps when the imagelist is desroyed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">imageIndex</td><td>The index of the image.</td></tr>
    <tr><td class="paramname">imageinfo</td><td>A reference to an IMAGEINFO structure that receives information about the image. The information in this structure can be used to directly manipulate the bitmaps for the image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac81c5c5913af93ae8775d42a58c9ce75" name="ac81c5c5913af93ae8775d42a58c9ce75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac81c5c5913af93ae8775d42a58c9ce75">&#9670;&#160;</a></span>GetImageInfo() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetImageInfo </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>imageIndex</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IMAGEINFO *</td>          <td class="paramname"><span class="paramname"><em>imageinfo</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves information about an image. </p>
<p>An application should not call DeleteObject to destroy the bitmaps retrieved by GetImageInfo. The system destroys the bitmaps when the imagelist is desroyed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">imageIndex</td><td>The index of the image.</td></tr>
    <tr><td class="paramname">imageinfo</td><td>A pointer to an IMAGEINFO structure that receives information about the image. The information in this structure can be used to directly manipulate the bitmaps for the image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acfeab612733d0c3e25919748c284b007" name="acfeab612733d0c3e25919748c284b007"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfeab612733d0c3e25919748c284b007">&#9670;&#160;</a></span>GetImageSize() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a> Harlinn::Windows::ImageList::GetImageSize </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="section return"><dt>Returns</dt><dd>A Size object with the width and height, in pixels, of each image.</dd></dl>

</div>
</div>
<a id="a42c06e6eb83fd7802dd8373cbe3750bf" name="a42c06e6eb83fd7802dd8373cbe3750bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42c06e6eb83fd7802dd8373cbe3750bf">&#9670;&#160;</a></span>GetImageSize() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetImageSize </td>
          <td>(</td>
          <td class="paramtype">int *</td>          <td class="paramname"><span class="paramname"><em>x</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *</td>          <td class="paramname"><span class="paramname"><em>y</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>A pointer to an integer variable that receives the width, in pixels, of each image.</td></tr>
    <tr><td class="paramname">y</td><td>A pointer to an integer variable that receives the height, in pixels, of each image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac0d364b6f4e11d79215bf802e07d17e4" name="ac0d364b6f4e11d79215bf802e07d17e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0d364b6f4e11d79215bf802e07d17e4">&#9670;&#160;</a></span>GetImageSize() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetImageSize </td>
          <td>(</td>
          <td class="paramtype">SIZE &amp;</td>          <td class="paramname"><span class="paramname"><em>size</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>A reference to a SIZE structure that receives the width and height, in pixels, of each image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1152d3693cbcefe1064d066949b884ab" name="a1152d3693cbcefe1064d066949b884ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1152d3693cbcefe1064d066949b884ab">&#9670;&#160;</a></span>GetImageSize() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::GetImageSize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aadde21be79a209443deef7b032698691">Size</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>size</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>A reference to a Size object that receives the width and height, in pixels, of each image.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5d434f61c6a1397dc65aff1352effe80" name="a5d434f61c6a1397dc65aff1352effe80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d434f61c6a1397dc65aff1352effe80">&#9670;&#160;</a></span>Load()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::Load </td>
          <td>(</td>
          <td class="paramtype">HINSTANCE</td>          <td class="paramname"><span class="paramname"><em>hInstance</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const wchar_t *</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>imageWidth</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>growBy</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">COLORREF</td>          <td class="paramname"><span class="paramname"><em>maskColor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aa5f7fa05d3c821ce043e7671b06aebd7">ImageListLoadFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an image list from the specified bitmap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hInstance</td><td>A handle to the instance that contains the resource.</td></tr>
    <tr><td class="paramname">name</td><td>The address of a null-terminated string that contains the name of the image resource in the module</td></tr>
    <tr><td class="paramname">imageWidth</td><td>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</td></tr>
    <tr><td class="paramname">growBy</td><td>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</td></tr>
    <tr><td class="paramname">maskColor</td><td>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</td></tr>
    <tr><td class="paramname">flags</td><td>Flags that specify how to load the image</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the image list</dd></dl>

</div>
</div>
<a id="a3e6d658bab5cad7c612aebd31e802a4d" name="a3e6d658bab5cad7c612aebd31e802a4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e6d658bab5cad7c612aebd31e802a4d">&#9670;&#160;</a></span>LoadFromFile() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::LoadFromFile </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>imageWidth</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an image list from the specified bitmap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The address of a null-terminated string that names the file containing the image to load.</td></tr>
    <tr><td class="paramname">imageWidth</td><td>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the image list</dd></dl>

</div>
</div>
<a id="a7ecb276dfe1254f297a73aca1457ae10" name="a7ecb276dfe1254f297a73aca1457ae10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ecb276dfe1254f297a73aca1457ae10">&#9670;&#160;</a></span>LoadFromFile() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::LoadFromFile </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *</td>          <td class="paramname"><span class="paramname"><em>name</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>imageWidth</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>growBy</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">COLORREF</td>          <td class="paramname"><span class="paramname"><em>maskColor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespace_harlinn_1_1_windows.xhtml#aa5f7fa05d3c821ce043e7671b06aebd7">ImageListLoadFlags</a></td>          <td class="paramname"><span class="paramname"><em>flags</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an image list from the specified bitmap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The address of a null-terminated string that names the file containing the image to load.</td></tr>
    <tr><td class="paramname">imageWidth</td><td>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</td></tr>
    <tr><td class="paramname">growBy</td><td>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</td></tr>
    <tr><td class="paramname">maskColor</td><td>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</td></tr>
    <tr><td class="paramname">flags</td><td>Flags that specify how to load the image</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the image list</dd></dl>

</div>
</div>
<a id="a2a4c441fca026dea9c125691ef13e8e6" name="a2a4c441fca026dea9c125691ef13e8e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a4c441fca026dea9c125691ef13e8e6">&#9670;&#160;</a></span>Merge() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::Merge </td>
          <td>(</td>
          <td class="paramtype">HIMAGELIST</td>          <td class="paramname"><span class="paramname"><em>himl1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>i1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HIMAGELIST</td>          <td class="paramname"><span class="paramname"><em>himl2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>i2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dy</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new image by combining two existing images. The function also creates a new image list in which to store the image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">himl1</td><td>A handle to the first image list.</td></tr>
    <tr><td class="paramname">i1</td><td>The index of the first existing image.</td></tr>
    <tr><td class="paramname">himl2</td><td>A handle to the second image list.</td></tr>
    <tr><td class="paramname">i2</td><td>The index of the second existing image.</td></tr>
    <tr><td class="paramname">dx</td><td>The x-offset of the second image relative to the first image.</td></tr>
    <tr><td class="paramname">dy</td><td>The y-offset of the second image relative to the first image.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the new image list</dd></dl>

</div>
</div>
<a id="a3db3cb4e24eac56e568c39df982b1da4" name="a3db3cb4e24eac56e568c39df982b1da4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3db3cb4e24eac56e568c39df982b1da4">&#9670;&#160;</a></span>Merge() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::Merge </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>i1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HIMAGELIST</td>          <td class="paramname"><span class="paramname"><em>himl2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>i2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>dy</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new image by combining two existing images. The function also creates a new image list in which to store the image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i1</td><td>The index of the first existing image.</td></tr>
    <tr><td class="paramname">himl2</td><td>A handle to the second image list.</td></tr>
    <tr><td class="paramname">i2</td><td>The index of the second existing image.</td></tr>
    <tr><td class="paramname">dx</td><td>The x-offset of the second image relative to the first image.</td></tr>
    <tr><td class="paramname">dy</td><td>The y-offset of the second image relative to the first image.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the new image list</dd></dl>

</div>
</div>
<a id="a864b93f5c6b89f5d7361d8b983be9b88" name="a864b93f5c6b89f5d7361d8b983be9b88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a864b93f5c6b89f5d7361d8b983be9b88">&#9670;&#160;</a></span>Move()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::Move </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfDestinationImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfSourceImage</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The source image is copied to the destination image's index. This operation results in multiple instances of a given image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfDestinationImage</td><td>The zero-based index of the image to be used as the destination of the copy operation.</td></tr>
    <tr><td class="paramname">indexOfSourceImage</td><td>The zero-based index of the image to be used as the source of the copy operation.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7ac4c9462ff96c4fe7ef4a20b4c7a1ae" name="a7ac4c9462ff96c4fe7ef4a20b4c7a1ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ac4c9462ff96c4fe7ef4a20b4c7a1ae">&#9670;&#160;</a></span>Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a> Harlinn::Windows::ImageList::Read </td>
          <td>(</td>
          <td class="paramtype">LPSTREAM</td>          <td class="paramname"><span class="paramname"><em>stream</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads an image list from a stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>A pointer to the stream</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the handle to the image list</dd></dl>

</div>
</div>
<a id="af905a7eb9e5da82f629762db1840b0cc" name="af905a7eb9e5da82f629762db1840b0cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af905a7eb9e5da82f629762db1840b0cc">&#9670;&#160;</a></span>Remove()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::ImageList::Remove </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>index</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes an image from the image list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index of the image to remove. If this parameter is -1, the function removes all images.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if successful, or false if not.</dd></dl>

</div>
</div>
<a id="a6d29a9e9942d92287aa318d1e517d2ec" name="a6d29a9e9942d92287aa318d1e517d2ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d29a9e9942d92287aa318d1e517d2ec">&#9670;&#160;</a></span>Replace() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Harlinn::Windows::ImageList::Replace </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HBITMAP</td>          <td class="paramname"><span class="paramname"><em>image</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HBITMAP</td>          <td class="paramname"><span class="paramname"><em>mask</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replaces an image in the image list with a new image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index of the image to replace</td></tr>
    <tr><td class="paramname">image</td><td>The handle to the bitmap that contains the new image.</td></tr>
    <tr><td class="paramname">mask</td><td>The handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if successful, or false otherwise</dd></dl>

</div>
</div>
<a id="a6c5ea43b5969dbedc531cb08554c882c" name="a6c5ea43b5969dbedc531cb08554c882c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c5ea43b5969dbedc531cb08554c882c">&#9670;&#160;</a></span>Replace() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Harlinn::Windows::ImageList::Replace </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">HICON</td>          <td class="paramname"><span class="paramname"><em>icon</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replaces an image with an icon or cursor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index of the image to replace. If index is -1, the function appends the image to the end of the list.</td></tr>
    <tr><td class="paramname">icon</td><td>The handle to the icon or cursor that contains the bitmap and mask for the new image.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the index of the image if successful, or -1 if not.</dd></dl>

</div>
</div>
<a id="a887b20e11ba83c6e18e76bd24751b172" name="a887b20e11ba83c6e18e76bd24751b172"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a887b20e11ba83c6e18e76bd24751b172">&#9670;&#160;</a></span>SetBkColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_windows_1_1_color_ref.xhtml">ColorRef</a> Harlinn::Windows::ImageList::SetBkColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_windows_1_1_color_ref.xhtml">ColorRef</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>newBackgroundColor</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the background color for an image list. This function only works if you add an icon or use Add with a black and white bitmap. Without a mask, the entire image is drawn; hence the background color is not visible. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">newBackgroundColor</td><td>The background color to set. This parameter can be the value returned from <a class="el" href="class_harlinn_1_1_windows_1_1_color_ref.xhtml#a286fcfba72376b4b48c9e49298a811c1">ColorRef::None( )</a>, CLR_NONE, value; in which case, images are drawn transparently using the mask. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the previous background color if successful, or CLR_NONE otherwise.</dd></dl>

</div>
</div>
<a id="af5f6ace0d34f8369e63230d2e189d8b6" name="af5f6ace0d34f8369e63230d2e189d8b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5f6ace0d34f8369e63230d2e189d8b6">&#9670;&#160;</a></span>Swap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Harlinn::Windows::ImageList::Swap </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfFirstImage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>indexOfSecondImage</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The source and destination images exchange positions within the image list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">indexOfFirstImage</td><td>The zero-based index of the first image</td></tr>
    <tr><td class="paramname">indexOfSecondImage</td><td>The zero-based index of the second image</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_w_std_ctrls_8h.xhtml">HWStdCtrls.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_windows.xhtml">Windows</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_windows_1_1_image_list.xhtml">ImageList</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::VectorBase&lt; T, IteratorT, ConstIteratorT &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#pri-static-attribs">Static Private Attributes</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_vector_base-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::VectorBase&lt; T, IteratorT, ConstIteratorT &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;HCCVector.h&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Harlinn::Common::Core::VectorBase&lt; T, IteratorT, ConstIteratorT &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_vector_base__inherit__graph.svg" width="1412" height="295"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Harlinn::Common::Core::VectorBase&lt; T, IteratorT, ConstIteratorT &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_vector_base__coll__graph.svg" width="187" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base_1_1_data_ptr.xhtml">DataPtr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a5a11e30cb7262870362a393a4120c9eb" id="r_a5a11e30cb7262870362a393a4120c9eb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> = <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a42f0cd3c6591607713644eea77e8fed9">SSizeT</a></td></tr>
<tr class="separator:a5a11e30cb7262870362a393a4120c9eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54aa9178314227d441276b6ec4d8a0ea" id="r_a54aa9178314227d441276b6ec4d8a0ea"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a54aa9178314227d441276b6ec4d8a0ea">difference_type</a> = <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a42f0cd3c6591607713644eea77e8fed9">SSizeT</a></td></tr>
<tr class="separator:a54aa9178314227d441276b6ec4d8a0ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd685626c82e6cb72fc08016c90b71cd" id="r_abd685626c82e6cb72fc08016c90b71cd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abd685626c82e6cb72fc08016c90b71cd">value_type</a> = T</td></tr>
<tr class="separator:abd685626c82e6cb72fc08016c90b71cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57e0c115f98fb052185075efb096ee1e" id="r_a57e0c115f98fb052185075efb096ee1e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a57e0c115f98fb052185075efb096ee1e">pointer</a> = T*</td></tr>
<tr class="separator:a57e0c115f98fb052185075efb096ee1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60c6173b770205f17cc93bf4fac745c4" id="r_a60c6173b770205f17cc93bf4fac745c4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a> = T&amp;</td></tr>
<tr class="separator:a60c6173b770205f17cc93bf4fac745c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ccd2936df81761428cce2b4a9225839" id="r_a2ccd2936df81761428cce2b4a9225839"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2ccd2936df81761428cce2b4a9225839">const_pointer</a> = const T*</td></tr>
<tr class="separator:a2ccd2936df81761428cce2b4a9225839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a272a50ea88a45ac82d6c2ca0a48b5e1b" id="r_a272a50ea88a45ac82d6c2ca0a48b5e1b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a> = const T&amp;</td></tr>
<tr class="separator:a272a50ea88a45ac82d6c2ca0a48b5e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74c136faa5eb244c95d619bb12bb866a" id="r_a74c136faa5eb244c95d619bb12bb866a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> = IteratorT</td></tr>
<tr class="separator:a74c136faa5eb244c95d619bb12bb866a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade0cdd95963c1a217ff58e41243d78a8" id="r_ade0cdd95963c1a217ff58e41243d78a8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> = ConstIteratorT</td></tr>
<tr class="separator:ade0cdd95963c1a217ff58e41243d78a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a903e21b7db2042b0c997439ec4423d" id="r_a2a903e21b7db2042b0c997439ec4423d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2a903e21b7db2042b0c997439ec4423d">reverse_iterator</a> = std::reverse_iterator&lt;<a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&gt;</td></tr>
<tr class="separator:a2a903e21b7db2042b0c997439ec4423d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4059ec082bedd5db7709b29c010a053d" id="r_a4059ec082bedd5db7709b29c010a053d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a> = std::reverse_iterator&lt;<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&gt;</td></tr>
<tr class="separator:a4059ec082bedd5db7709b29c010a053d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a82757abb1bf0f3fe66c100c604e75e9f" id="r_a82757abb1bf0f3fe66c100c604e75e9f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a82757abb1bf0f3fe66c100c604e75e9f">VectorBase</a> () noexcept</td></tr>
<tr class="separator:a82757abb1bf0f3fe66c100c604e75e9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a840bc310b8e0e85687f7eb0a87c375" id="r_a5a840bc310b8e0e85687f7eb0a87c375"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5a840bc310b8e0e85687f7eb0a87c375">VectorBase</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> count, const <a class="el" href="#abd685626c82e6cb72fc08016c90b71cd">value_type</a> &amp;val)</td></tr>
<tr class="separator:a5a840bc310b8e0e85687f7eb0a87c375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a142c0bf9508f97abddbd15a0669ab5df" id="r_a142c0bf9508f97abddbd15a0669ab5df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a142c0bf9508f97abddbd15a0669ab5df">VectorBase</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> count)</td></tr>
<tr class="separator:a142c0bf9508f97abddbd15a0669ab5df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad35ce1bc198572eb76e5e92235ed9509" id="r_ad35ce1bc198572eb76e5e92235ed9509"><td class="memTemplParams" colspan="2">template&lt;typename It &gt; <br />
requires <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a30ba5d9765bf4143d8820765b98dea5b">IsIterator_v</a>&lt;It&gt;</td></tr>
<tr class="memitem:ad35ce1bc198572eb76e5e92235ed9509"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad35ce1bc198572eb76e5e92235ed9509">VectorBase</a> (It first, It last)</td></tr>
<tr class="separator:ad35ce1bc198572eb76e5e92235ed9509"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a327cbfb04bf670dcc90beed99b5b98c4" id="r_a327cbfb04bf670dcc90beed99b5b98c4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a327cbfb04bf670dcc90beed99b5b98c4">VectorBase</a> (std::initializer_list&lt; T &gt; values)</td></tr>
<tr class="separator:a327cbfb04bf670dcc90beed99b5b98c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3e70eea46725b4e1ee9ad3036908dd2" id="r_af3e70eea46725b4e1ee9ad3036908dd2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af3e70eea46725b4e1ee9ad3036908dd2">VectorBase</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other)</td></tr>
<tr class="separator:af3e70eea46725b4e1ee9ad3036908dd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a331faf1987318aefad286bca42653d7b" id="r_a331faf1987318aefad286bca42653d7b"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a331faf1987318aefad286bca42653d7b">VectorBase</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:a331faf1987318aefad286bca42653d7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab250f88c3bce29da37857b61d40d64c3" id="r_ab250f88c3bce29da37857b61d40d64c3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab250f88c3bce29da37857b61d40d64c3">~VectorBase</a> ()</td></tr>
<tr class="separator:ab250f88c3bce29da37857b61d40d64c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08a4b77b0b91b5b275f606c00c8c2cc0" id="r_a08a4b77b0b91b5b275f606c00c8c2cc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a08a4b77b0b91b5b275f606c00c8c2cc0">Assign</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other)</td></tr>
<tr class="separator:a08a4b77b0b91b5b275f606c00c8c2cc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06e7587072776a6d8b25f79b4a2fa28" id="r_aa06e7587072776a6d8b25f79b4a2fa28"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa06e7587072776a6d8b25f79b4a2fa28">operator=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other)</td></tr>
<tr class="separator:aa06e7587072776a6d8b25f79b4a2fa28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9e2afe6d77f35e7e4e8fb4c590f5095" id="r_ab9e2afe6d77f35e7e4e8fb4c590f5095"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab9e2afe6d77f35e7e4e8fb4c590f5095">operator=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;&amp;other) noexcept</td></tr>
<tr class="separator:ab9e2afe6d77f35e7e4e8fb4c590f5095"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62fc66b446deb1e769e2c602d87e80d8" id="r_a62fc66b446deb1e769e2c602d87e80d8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a62fc66b446deb1e769e2c602d87e80d8">Equals</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other) const</td></tr>
<tr class="separator:a62fc66b446deb1e769e2c602d87e80d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63d0cfb0ec888386e6285dff7f4c8cf2" id="r_a63d0cfb0ec888386e6285dff7f4c8cf2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a63d0cfb0ec888386e6285dff7f4c8cf2">operator==</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other) const</td></tr>
<tr class="separator:a63d0cfb0ec888386e6285dff7f4c8cf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c3087d47d263198ed21a637776e6bb1" id="r_a0c3087d47d263198ed21a637776e6bb1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0c3087d47d263198ed21a637776e6bb1">operator!=</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other) const</td></tr>
<tr class="separator:a0c3087d47d263198ed21a637776e6bb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0431a7c664226c54db677a793cdccfac" id="r_a0431a7c664226c54db677a793cdccfac"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0431a7c664226c54db677a793cdccfac">empty</a> () const noexcept</td></tr>
<tr class="separator:a0431a7c664226c54db677a793cdccfac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3e5ee0bf1385084ad7beffe9ab9dae4" id="r_ac3e5ee0bf1385084ad7beffe9ab9dae4"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac3e5ee0bf1385084ad7beffe9ab9dae4">size</a> () const noexcept</td></tr>
<tr class="separator:ac3e5ee0bf1385084ad7beffe9ab9dae4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a9b69ea4d58429361836985b7d2d97a" id="r_a5a9b69ea4d58429361836985b7d2d97a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5a9b69ea4d58429361836985b7d2d97a">size_in_bytes</a> () const noexcept</td></tr>
<tr class="separator:a5a9b69ea4d58429361836985b7d2d97a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0ded8533bc40c55f1cb6339eb7c79cb" id="r_ad0ded8533bc40c55f1cb6339eb7c79cb"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0ded8533bc40c55f1cb6339eb7c79cb">max_size</a> () const noexcept</td></tr>
<tr class="separator:ad0ded8533bc40c55f1cb6339eb7c79cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd669ffff5e1811bbd3051f005d4ccd0" id="r_abd669ffff5e1811bbd3051f005d4ccd0"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abd669ffff5e1811bbd3051f005d4ccd0">capacity</a> () const noexcept</td></tr>
<tr class="separator:abd669ffff5e1811bbd3051f005d4ccd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf57b9a06bd5f177819fd02c3c3ada3d" id="r_abf57b9a06bd5f177819fd02c3c3ada3d"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abf57b9a06bd5f177819fd02c3c3ada3d">operator[]</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> i) noexcept</td></tr>
<tr class="separator:abf57b9a06bd5f177819fd02c3c3ada3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1b99255a29c9eaf7578af1ae6902550" id="r_ab1b99255a29c9eaf7578af1ae6902550"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab1b99255a29c9eaf7578af1ae6902550">operator[]</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> i) const noexcept</td></tr>
<tr class="separator:ab1b99255a29c9eaf7578af1ae6902550"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435ebcc70fcb917fb6194b27cf9f796e" id="r_a435ebcc70fcb917fb6194b27cf9f796e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a435ebcc70fcb917fb6194b27cf9f796e">clear</a> ()</td></tr>
<tr class="separator:a435ebcc70fcb917fb6194b27cf9f796e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a925c7cc84896800198dd72e748b1af77" id="r_a925c7cc84896800198dd72e748b1af77"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a925c7cc84896800198dd72e748b1af77">begin</a> () noexcept</td></tr>
<tr class="separator:a925c7cc84896800198dd72e748b1af77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87c7f1096f601cba513b2e029503c30a" id="r_a87c7f1096f601cba513b2e029503c30a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a87c7f1096f601cba513b2e029503c30a">begin</a> () const noexcept</td></tr>
<tr class="separator:a87c7f1096f601cba513b2e029503c30a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eb4c3f396b10dcd140cfe7295282e70" id="r_a5eb4c3f396b10dcd140cfe7295282e70"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5eb4c3f396b10dcd140cfe7295282e70">cbegin</a> () const noexcept</td></tr>
<tr class="separator:a5eb4c3f396b10dcd140cfe7295282e70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ef2fea326483b5cf7a5e40b1fd1a691" id="r_a9ef2fea326483b5cf7a5e40b1fd1a691"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9ef2fea326483b5cf7a5e40b1fd1a691">end</a> () noexcept</td></tr>
<tr class="separator:a9ef2fea326483b5cf7a5e40b1fd1a691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a884278bda317b654be604419f1a7f1af" id="r_a884278bda317b654be604419f1a7f1af"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a884278bda317b654be604419f1a7f1af">end</a> () const noexcept</td></tr>
<tr class="separator:a884278bda317b654be604419f1a7f1af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c7fbf2c5f363d396048e4887ca35811" id="r_a5c7fbf2c5f363d396048e4887ca35811"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5c7fbf2c5f363d396048e4887ca35811">cend</a> () const noexcept</td></tr>
<tr class="separator:a5c7fbf2c5f363d396048e4887ca35811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a311d65ec1d633e62aedbf0fa3ce095dd" id="r_a311d65ec1d633e62aedbf0fa3ce095dd"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a2a903e21b7db2042b0c997439ec4423d">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a311d65ec1d633e62aedbf0fa3ce095dd">rbegin</a> () noexcept</td></tr>
<tr class="separator:a311d65ec1d633e62aedbf0fa3ce095dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f58fa88a9c4d2b3ea0d526b51c3d734" id="r_a0f58fa88a9c4d2b3ea0d526b51c3d734"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0f58fa88a9c4d2b3ea0d526b51c3d734">rbegin</a> () const noexcept</td></tr>
<tr class="separator:a0f58fa88a9c4d2b3ea0d526b51c3d734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb5839d81b13b6e5c183a48986aa6414" id="r_acb5839d81b13b6e5c183a48986aa6414"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a2a903e21b7db2042b0c997439ec4423d">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acb5839d81b13b6e5c183a48986aa6414">rend</a> () noexcept</td></tr>
<tr class="separator:acb5839d81b13b6e5c183a48986aa6414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb641b501c2fe4af34355edc50c319c1" id="r_afb641b501c2fe4af34355edc50c319c1"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afb641b501c2fe4af34355edc50c319c1">rend</a> () const noexcept</td></tr>
<tr class="separator:afb641b501c2fe4af34355edc50c319c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35cca87748c4858222d4d6fc091a31ae" id="r_a35cca87748c4858222d4d6fc091a31ae"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a35cca87748c4858222d4d6fc091a31ae">crbegin</a> () const noexcept</td></tr>
<tr class="separator:a35cca87748c4858222d4d6fc091a31ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a5c27410c1f40626e044ec45f8a4eb4" id="r_a6a5c27410c1f40626e044ec45f8a4eb4"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6a5c27410c1f40626e044ec45f8a4eb4">crend</a> () const noexcept</td></tr>
<tr class="separator:a6a5c27410c1f40626e044ec45f8a4eb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1daa8b819d433824038c404ad3df0e5f" id="r_a1daa8b819d433824038c404ad3df0e5f"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a57e0c115f98fb052185075efb096ee1e">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1daa8b819d433824038c404ad3df0e5f">data</a> () noexcept</td></tr>
<tr class="separator:a1daa8b819d433824038c404ad3df0e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5880776ab2c65b77e8688bfe6c0e82b9" id="r_a5880776ab2c65b77e8688bfe6c0e82b9"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a2ccd2936df81761428cce2b4a9225839">const_pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5880776ab2c65b77e8688bfe6c0e82b9">data</a> () const noexcept</td></tr>
<tr class="separator:a5880776ab2c65b77e8688bfe6c0e82b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebe8178f1131130a79ac9698e235d3a4" id="r_aebe8178f1131130a79ac9698e235d3a4"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aebe8178f1131130a79ac9698e235d3a4">front</a> () noexcept</td></tr>
<tr class="separator:aebe8178f1131130a79ac9698e235d3a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a457c2a523fa6a1479f26080c8cfd6eac" id="r_a457c2a523fa6a1479f26080c8cfd6eac"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a457c2a523fa6a1479f26080c8cfd6eac">front</a> () const noexcept</td></tr>
<tr class="separator:a457c2a523fa6a1479f26080c8cfd6eac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29c2591bd69b379cfb163ab55c2f851a" id="r_a29c2591bd69b379cfb163ab55c2f851a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a29c2591bd69b379cfb163ab55c2f851a">back</a> () noexcept</td></tr>
<tr class="separator:a29c2591bd69b379cfb163ab55c2f851a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a093dfc39186b9f2d1ca021c119ddb054" id="r_a093dfc39186b9f2d1ca021c119ddb054"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a093dfc39186b9f2d1ca021c119ddb054">back</a> () const noexcept</td></tr>
<tr class="separator:a093dfc39186b9f2d1ca021c119ddb054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66a48c5444715e16acd83b1a7bd3744a" id="r_a66a48c5444715e16acd83b1a7bd3744a"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a66a48c5444715e16acd83b1a7bd3744a">swap</a> (<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp;other)</td></tr>
<tr class="separator:a66a48c5444715e16acd83b1a7bd3744a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad307d3af88f2cee59a8afb07f8d67532" id="r_ad307d3af88f2cee59a8afb07f8d67532"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad307d3af88f2cee59a8afb07f8d67532">resize</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> newSize)</td></tr>
<tr class="separator:ad307d3af88f2cee59a8afb07f8d67532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74603c0b49d2e4c424fdde8786244824" id="r_a74603c0b49d2e4c424fdde8786244824"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a74603c0b49d2e4c424fdde8786244824">resize</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> newSize, const T &amp;v)</td></tr>
<tr class="separator:a74603c0b49d2e4c424fdde8786244824"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a063621bfc07808faeb65cb728f59d564" id="r_a063621bfc07808faeb65cb728f59d564"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a063621bfc07808faeb65cb728f59d564">shrink</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> newSize)</td></tr>
<tr class="separator:a063621bfc07808faeb65cb728f59d564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add6169c45571f15f875e35340e1efcdd" id="r_add6169c45571f15f875e35340e1efcdd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#add6169c45571f15f875e35340e1efcdd">reserve</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> requiredCapacity)</td></tr>
<tr class="separator:add6169c45571f15f875e35340e1efcdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0ee8672efbc83a0361aeebbd15a103f" id="r_ad0ee8672efbc83a0361aeebbd15a103f"><td class="memTemplParams" colspan="2">template&lt;typename ... Args&gt; </td></tr>
<tr class="memitem:ad0ee8672efbc83a0361aeebbd15a103f"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad0ee8672efbc83a0361aeebbd15a103f">emplace_back</a> (Args &amp;&amp;... args)</td></tr>
<tr class="separator:ad0ee8672efbc83a0361aeebbd15a103f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a537fd1e56ecc37d781c9a8a7d9d491c6" id="r_a537fd1e56ecc37d781c9a8a7d9d491c6"><td class="memTemplParams" colspan="2">template&lt;typename ... Args&gt; </td></tr>
<tr class="memitem:a537fd1e56ecc37d781c9a8a7d9d491c6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a537fd1e56ecc37d781c9a8a7d9d491c6">emplace_front</a> (Args &amp;&amp;... args)</td></tr>
<tr class="separator:a537fd1e56ecc37d781c9a8a7d9d491c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78ac62aa35ef7913fbfe27d24e8d1c12" id="r_a78ac62aa35ef7913fbfe27d24e8d1c12"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a78ac62aa35ef7913fbfe27d24e8d1c12"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a78ac62aa35ef7913fbfe27d24e8d1c12">emplace</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it, Args &amp;&amp;... args)</td></tr>
<tr class="separator:a78ac62aa35ef7913fbfe27d24e8d1c12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a412aee6f47ff94d16c2e95ecd25fc3d4" id="r_a412aee6f47ff94d16c2e95ecd25fc3d4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a412aee6f47ff94d16c2e95ecd25fc3d4">push_back</a> (const T &amp;v)</td></tr>
<tr class="separator:a412aee6f47ff94d16c2e95ecd25fc3d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cb141034535d200eda09a6987d1d29" id="r_af8cb141034535d200eda09a6987d1d29"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af8cb141034535d200eda09a6987d1d29">push_back</a> (T &amp;&amp;v)</td></tr>
<tr class="separator:af8cb141034535d200eda09a6987d1d29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35cfb392ed86585f279a041366d78951" id="r_a35cfb392ed86585f279a041366d78951"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a35cfb392ed86585f279a041366d78951">pop_back</a> ()</td></tr>
<tr class="separator:a35cfb392ed86585f279a041366d78951"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86f887e45113cd31a9d861d7b9db02b1" id="r_a86f887e45113cd31a9d861d7b9db02b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a86f887e45113cd31a9d861d7b9db02b1">push_front</a> (const T &amp;v)</td></tr>
<tr class="separator:a86f887e45113cd31a9d861d7b9db02b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b2b0317291e9ede185078dbac6e46de" id="r_a3b2b0317291e9ede185078dbac6e46de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3b2b0317291e9ede185078dbac6e46de">push_front</a> (T &amp;&amp;v)</td></tr>
<tr class="separator:a3b2b0317291e9ede185078dbac6e46de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf8805f086f64a12a533588be3554272" id="r_aaf8805f086f64a12a533588be3554272"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaf8805f086f64a12a533588be3554272">erase</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it)</td></tr>
<tr class="separator:aaf8805f086f64a12a533588be3554272"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dca75be6ff6f1e53421deff5e856bca" id="r_a7dca75be6ff6f1e53421deff5e856bca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7dca75be6ff6f1e53421deff5e856bca">erase</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it, <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> itLast)</td></tr>
<tr class="separator:a7dca75be6ff6f1e53421deff5e856bca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3df2c4339c74e0256b81a3c2b5e3ac12" id="r_a3df2c4339c74e0256b81a3c2b5e3ac12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3df2c4339c74e0256b81a3c2b5e3ac12">insert</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it, const T &amp;v)</td></tr>
<tr class="separator:a3df2c4339c74e0256b81a3c2b5e3ac12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0468097f186919701653e58d02e0e688" id="r_a0468097f186919701653e58d02e0e688"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0468097f186919701653e58d02e0e688">insert</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it, T &amp;&amp;v)</td></tr>
<tr class="separator:a0468097f186919701653e58d02e0e688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cc4bf4254fde0facbf9329f61a65251" id="r_a3cc4bf4254fde0facbf9329f61a65251"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3cc4bf4254fde0facbf9329f61a65251">MoveToFront</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it)</td></tr>
<tr class="separator:a3cc4bf4254fde0facbf9329f61a65251"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac539da6355b70868ad1c897c6d9b565" id="r_aac539da6355b70868ad1c897c6d9b565"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aac539da6355b70868ad1c897c6d9b565">MoveToBack</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it)</td></tr>
<tr class="separator:aac539da6355b70868ad1c897c6d9b565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a343c365e637611e514b055f1bde41dae" id="r_a343c365e637611e514b055f1bde41dae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a343c365e637611e514b055f1bde41dae">contains</a> (const T &amp;v) const</td></tr>
<tr class="separator:a343c365e637611e514b055f1bde41dae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c1246118afeed4a78b9ab79d34f7e97" id="r_a7c1246118afeed4a78b9ab79d34f7e97"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7c1246118afeed4a78b9ab79d34f7e97">find</a> (const T &amp;v)</td></tr>
<tr class="separator:a7c1246118afeed4a78b9ab79d34f7e97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab484794026cf7256e0f6af39eebd66d8" id="r_ab484794026cf7256e0f6af39eebd66d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab484794026cf7256e0f6af39eebd66d8">find</a> (const T &amp;v) const</td></tr>
<tr class="separator:ab484794026cf7256e0f6af39eebd66d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bfe9456a6946f4aa9bd0bde68a86bf3" id="r_a1bfe9456a6946f4aa9bd0bde68a86bf3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1bfe9456a6946f4aa9bd0bde68a86bf3">reverse_find</a> (const T &amp;v)</td></tr>
<tr class="separator:a1bfe9456a6946f4aa9bd0bde68a86bf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bf3a5d55a65719d09317c3243a73e0f" id="r_a1bf3a5d55a65719d09317c3243a73e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1bf3a5d55a65719d09317c3243a73e0f">reverse_find</a> (const T &amp;v) const</td></tr>
<tr class="separator:a1bf3a5d55a65719d09317c3243a73e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a705ee0b90e2f92769ca31918cb17ce9c" id="r_a705ee0b90e2f92769ca31918cb17ce9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a705ee0b90e2f92769ca31918cb17ce9c">reverse_find</a> (const T &amp;v, <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> itLast)</td></tr>
<tr class="separator:a705ee0b90e2f92769ca31918cb17ce9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af61f4bad06163ba1cfb23aedfb19f8d9" id="r_af61f4bad06163ba1cfb23aedfb19f8d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af61f4bad06163ba1cfb23aedfb19f8d9">reverse_find</a> (const T &amp;v, <a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> itLast) const</td></tr>
<tr class="separator:af61f4bad06163ba1cfb23aedfb19f8d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71c95d3a132a7c9ce7336da9daf48286" id="r_a71c95d3a132a7c9ce7336da9daf48286"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a71c95d3a132a7c9ce7336da9daf48286">find_erase</a> (const T &amp;v)</td></tr>
<tr class="separator:a71c95d3a132a7c9ce7336da9daf48286"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07a4538bceebb6f939bd9d4da55c47c" id="r_ac07a4538bceebb6f939bd9d4da55c47c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac07a4538bceebb6f939bd9d4da55c47c">IndexOf</a> (const T *ptr) const</td></tr>
<tr class="separator:ac07a4538bceebb6f939bd9d4da55c47c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5802db0d7487e7bb7faed2adbb77cfa2" id="r_a5802db0d7487e7bb7faed2adbb77cfa2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5802db0d7487e7bb7faed2adbb77cfa2">IndexOf</a> (<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> it) const</td></tr>
<tr class="separator:a5802db0d7487e7bb7faed2adbb77cfa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-methods" name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a6bb32c8a098edf6ccd08a0754201cda7" id="r_a6bb32c8a098edf6ccd08a0754201cda7"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6bb32c8a098edf6ccd08a0754201cda7">CapacityForSize</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> sz) const noexcept</td></tr>
<tr class="separator:a6bb32c8a098edf6ccd08a0754201cda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0548cff4f0d4422a8b51157308847b5" id="r_ae0548cff4f0d4422a8b51157308847b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae0548cff4f0d4422a8b51157308847b5">expand</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> uninitializedStart, <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> uninitializedEnd, <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> requiredCapacity)</td></tr>
<tr class="separator:ae0548cff4f0d4422a8b51157308847b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b12cc28b0e11f74b3ff266066c7a132" id="r_a5b12cc28b0e11f74b3ff266066c7a132"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5b12cc28b0e11f74b3ff266066c7a132">expand</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> offset, <a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> requiredCapacity)</td></tr>
<tr class="separator:a5b12cc28b0e11f74b3ff266066c7a132"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-static-methods" name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:ab0b185f961757690543c9ecab723accf" id="r_ab0b185f961757690543c9ecab723accf"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab0b185f961757690543c9ecab723accf">Free</a> (T *ptr)</td></tr>
<tr class="separator:ab0b185f961757690543c9ecab723accf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a931fb886bda070b02aca8a91c4c669ec" id="r_a931fb886bda070b02aca8a91c4c669ec"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base_1_1_data_ptr.xhtml">DataPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a931fb886bda070b02aca8a91c4c669ec">Allocate</a> (<a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> requiredCapacity)</td></tr>
<tr class="separator:a931fb886bda070b02aca8a91c4c669ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a51b39bfd05042213e3bf437f44f91b90" id="r_a51b39bfd05042213e3bf437f44f91b90"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base_1_1_data_ptr.xhtml">DataPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a51b39bfd05042213e3bf437f44f91b90">data_</a></td></tr>
<tr class="separator:a51b39bfd05042213e3bf437f44f91b90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada50f4b0ea5132545b377f2183d3eaee" id="r_ada50f4b0ea5132545b377f2183d3eaee"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ada50f4b0ea5132545b377f2183d3eaee">end_</a> = nullptr</td></tr>
<tr class="separator:ada50f4b0ea5132545b377f2183d3eaee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6196c273198dc41c0f5707aeb48ea8bb" id="r_a6196c273198dc41c0f5707aeb48ea8bb"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6196c273198dc41c0f5707aeb48ea8bb">allocatedEnd_</a> = nullptr</td></tr>
<tr class="separator:a6196c273198dc41c0f5707aeb48ea8bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-static-attribs" name="pri-static-attribs"></a>
Static Private Attributes</h2></td></tr>
<tr class="memitem:a75d65e4896f1eb9318a5ee8cd486e375" id="r_a75d65e4896f1eb9318a5ee8cd486e375"><td class="memItemLeft" align="right" valign="top">static constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a75d65e4896f1eb9318a5ee8cd486e375">CanZeroInitialize</a> = std::is_trivially_default_constructible_v&lt;T&gt;</td></tr>
<tr class="separator:a75d65e4896f1eb9318a5ee8cd486e375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae29f469fab34698cfc83c55e0100d9c1" id="r_ae29f469fab34698cfc83c55e0100d9c1"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae29f469fab34698cfc83c55e0100d9c1">ElementSize</a> = sizeof( T )</td></tr>
<tr class="separator:ae29f469fab34698cfc83c55e0100d9c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ade0cdd95963c1a217ff58e41243d78a8" name="ade0cdd95963c1a217ff58e41243d78a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade0cdd95963c1a217ff58e41243d78a8">&#9670;&#160;</a></span>const_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::const_iterator = ConstIteratorT</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2ccd2936df81761428cce2b4a9225839" name="a2ccd2936df81761428cce2b4a9225839"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ccd2936df81761428cce2b4a9225839">&#9670;&#160;</a></span>const_pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::const_pointer = const T*</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a272a50ea88a45ac82d6c2ca0a48b5e1b" name="a272a50ea88a45ac82d6c2ca0a48b5e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">&#9670;&#160;</a></span>const_reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::const_reference = const T&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4059ec082bedd5db7709b29c010a053d" name="a4059ec082bedd5db7709b29c010a053d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4059ec082bedd5db7709b29c010a053d">&#9670;&#160;</a></span>const_reverse_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::const_reverse_iterator = std::reverse_iterator&lt;<a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a54aa9178314227d441276b6ec4d8a0ea" name="a54aa9178314227d441276b6ec4d8a0ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54aa9178314227d441276b6ec4d8a0ea">&#9670;&#160;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::difference_type = <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a42f0cd3c6591607713644eea77e8fed9">SSizeT</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a74c136faa5eb244c95d619bb12bb866a" name="a74c136faa5eb244c95d619bb12bb866a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74c136faa5eb244c95d619bb12bb866a">&#9670;&#160;</a></span>iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::iterator = IteratorT</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a57e0c115f98fb052185075efb096ee1e" name="a57e0c115f98fb052185075efb096ee1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57e0c115f98fb052185075efb096ee1e">&#9670;&#160;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::pointer = T*</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a60c6173b770205f17cc93bf4fac745c4" name="a60c6173b770205f17cc93bf4fac745c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60c6173b770205f17cc93bf4fac745c4">&#9670;&#160;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reference = T&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2a903e21b7db2042b0c997439ec4423d" name="a2a903e21b7db2042b0c997439ec4423d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a903e21b7db2042b0c997439ec4423d">&#9670;&#160;</a></span>reverse_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reverse_iterator = std::reverse_iterator&lt;<a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a11e30cb7262870362a393a4120c9eb" name="a5a11e30cb7262870362a393a4120c9eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a11e30cb7262870362a393a4120c9eb">&#9670;&#160;</a></span>size_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::size_type = <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a42f0cd3c6591607713644eea77e8fed9">SSizeT</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abd685626c82e6cb72fc08016c90b71cd" name="abd685626c82e6cb72fc08016c90b71cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd685626c82e6cb72fc08016c90b71cd">&#9670;&#160;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::value_type = T</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a82757abb1bf0f3fe66c100c604e75e9f" name="a82757abb1bf0f3fe66c100c604e75e9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82757abb1bf0f3fe66c100c604e75e9f">&#9670;&#160;</a></span>VectorBase() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a840bc310b8e0e85687f7eb0a87c375" name="a5a840bc310b8e0e85687f7eb0a87c375"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a840bc310b8e0e85687f7eb0a87c375">&#9670;&#160;</a></span>VectorBase() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="#abd685626c82e6cb72fc08016c90b71cd">value_type</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>val</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a142c0bf9508f97abddbd15a0669ab5df" name="a142c0bf9508f97abddbd15a0669ab5df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a142c0bf9508f97abddbd15a0669ab5df">&#9670;&#160;</a></span>VectorBase() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>count</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad35ce1bc198572eb76e5e92235ed9509" name="ad35ce1bc198572eb76e5e92235ed9509"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad35ce1bc198572eb76e5e92235ed9509">&#9670;&#160;</a></span>VectorBase() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<div class="memtemplate">
template&lt;typename It &gt; <br />
requires <a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml#a30ba5d9765bf4143d8820765b98dea5b">IsIterator_v</a>&lt;It&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramtype">It</td>          <td class="paramname"><span class="paramname"><em>first</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">It</td>          <td class="paramname"><span class="paramname"><em>last</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a327cbfb04bf670dcc90beed99b5b98c4" name="a327cbfb04bf670dcc90beed99b5b98c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a327cbfb04bf670dcc90beed99b5b98c4">&#9670;&#160;</a></span>VectorBase() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;</td>          <td class="paramname"><span class="paramname"><em>values</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af3e70eea46725b4e1ee9ad3036908dd2" name="af3e70eea46725b4e1ee9ad3036908dd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3e70eea46725b4e1ee9ad3036908dd2">&#9670;&#160;</a></span>VectorBase() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a331faf1987318aefad286bca42653d7b" name="a331faf1987318aefad286bca42653d7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a331faf1987318aefad286bca42653d7b">&#9670;&#160;</a></span>VectorBase() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::VectorBase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab250f88c3bce29da37857b61d40d64c3" name="ab250f88c3bce29da37857b61d40d64c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab250f88c3bce29da37857b61d40d64c3">&#9670;&#160;</a></span>~VectorBase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::~<a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a931fb886bda070b02aca8a91c4c669ec" name="a931fb886bda070b02aca8a91c4c669ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a931fb886bda070b02aca8a91c4c669ec">&#9670;&#160;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base_1_1_data_ptr.xhtml">DataPtr</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::Allocate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>requiredCapacity</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a08a4b77b0b91b5b275f606c00c8c2cc0" name="a08a4b77b0b91b5b275f606c00c8c2cc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08a4b77b0b91b5b275f606c00c8c2cc0">&#9670;&#160;</a></span>Assign()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::Assign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a093dfc39186b9f2d1ca021c119ddb054" name="a093dfc39186b9f2d1ca021c119ddb054"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a093dfc39186b9f2d1ca021c119ddb054">&#9670;&#160;</a></span>back() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::back </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a29c2591bd69b379cfb163ab55c2f851a" name="a29c2591bd69b379cfb163ab55c2f851a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29c2591bd69b379cfb163ab55c2f851a">&#9670;&#160;</a></span>back() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::back </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a87c7f1096f601cba513b2e029503c30a" name="a87c7f1096f601cba513b2e029503c30a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87c7f1096f601cba513b2e029503c30a">&#9670;&#160;</a></span>begin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::begin </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a925c7cc84896800198dd72e748b1af77" name="a925c7cc84896800198dd72e748b1af77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a925c7cc84896800198dd72e748b1af77">&#9670;&#160;</a></span>begin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::begin </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abd669ffff5e1811bbd3051f005d4ccd0" name="abd669ffff5e1811bbd3051f005d4ccd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd669ffff5e1811bbd3051f005d4ccd0">&#9670;&#160;</a></span>capacity()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::capacity </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6bb32c8a098edf6ccd08a0754201cda7" name="a6bb32c8a098edf6ccd08a0754201cda7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb32c8a098edf6ccd08a0754201cda7">&#9670;&#160;</a></span>CapacityForSize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::CapacityForSize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>sz</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">private</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5eb4c3f396b10dcd140cfe7295282e70" name="a5eb4c3f396b10dcd140cfe7295282e70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5eb4c3f396b10dcd140cfe7295282e70">&#9670;&#160;</a></span>cbegin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c7fbf2c5f363d396048e4887ca35811" name="a5c7fbf2c5f363d396048e4887ca35811"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c7fbf2c5f363d396048e4887ca35811">&#9670;&#160;</a></span>cend()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::cend </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a435ebcc70fcb917fb6194b27cf9f796e" name="a435ebcc70fcb917fb6194b27cf9f796e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a435ebcc70fcb917fb6194b27cf9f796e">&#9670;&#160;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::clear </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a343c365e637611e514b055f1bde41dae" name="a343c365e637611e514b055f1bde41dae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a343c365e637611e514b055f1bde41dae">&#9670;&#160;</a></span>contains()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::contains </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a35cca87748c4858222d4d6fc091a31ae" name="a35cca87748c4858222d4d6fc091a31ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35cca87748c4858222d4d6fc091a31ae">&#9670;&#160;</a></span>crbegin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6a5c27410c1f40626e044ec45f8a4eb4" name="a6a5c27410c1f40626e044ec45f8a4eb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a5c27410c1f40626e044ec45f8a4eb4">&#9670;&#160;</a></span>crend()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::crend </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5880776ab2c65b77e8688bfe6c0e82b9" name="a5880776ab2c65b77e8688bfe6c0e82b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5880776ab2c65b77e8688bfe6c0e82b9">&#9670;&#160;</a></span>data() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a2ccd2936df81761428cce2b4a9225839">const_pointer</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::data </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1daa8b819d433824038c404ad3df0e5f" name="a1daa8b819d433824038c404ad3df0e5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1daa8b819d433824038c404ad3df0e5f">&#9670;&#160;</a></span>data() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a57e0c115f98fb052185075efb096ee1e">pointer</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::data </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a78ac62aa35ef7913fbfe27d24e8d1c12" name="a78ac62aa35ef7913fbfe27d24e8d1c12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78ac62aa35ef7913fbfe27d24e8d1c12">&#9670;&#160;</a></span>emplace()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...</td>          <td class="paramname"><span class="paramname"><em>args</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad0ee8672efbc83a0361aeebbd15a103f" name="ad0ee8672efbc83a0361aeebbd15a103f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0ee8672efbc83a0361aeebbd15a103f">&#9670;&#160;</a></span>emplace_back()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<div class="memtemplate">
template&lt;typename ... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::emplace_back </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...</td>          <td class="paramname"><span class="paramname"><em>args</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a537fd1e56ecc37d781c9a8a7d9d491c6" name="a537fd1e56ecc37d781c9a8a7d9d491c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a537fd1e56ecc37d781c9a8a7d9d491c6">&#9670;&#160;</a></span>emplace_front()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<div class="memtemplate">
template&lt;typename ... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::emplace_front </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...</td>          <td class="paramname"><span class="paramname"><em>args</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0431a7c664226c54db677a793cdccfac" name="a0431a7c664226c54db677a793cdccfac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0431a7c664226c54db677a793cdccfac">&#9670;&#160;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::empty </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a884278bda317b654be604419f1a7f1af" name="a884278bda317b654be604419f1a7f1af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a884278bda317b654be604419f1a7f1af">&#9670;&#160;</a></span>end() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::end </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ef2fea326483b5cf7a5e40b1fd1a691" name="a9ef2fea326483b5cf7a5e40b1fd1a691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ef2fea326483b5cf7a5e40b1fd1a691">&#9670;&#160;</a></span>end() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::end </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a62fc66b446deb1e769e2c602d87e80d8" name="a62fc66b446deb1e769e2c602d87e80d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62fc66b446deb1e769e2c602d87e80d8">&#9670;&#160;</a></span>Equals()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::Equals </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aaf8805f086f64a12a533588be3554272" name="aaf8805f086f64a12a533588be3554272"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf8805f086f64a12a533588be3554272">&#9670;&#160;</a></span>erase() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7dca75be6ff6f1e53421deff5e856bca" name="a7dca75be6ff6f1e53421deff5e856bca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dca75be6ff6f1e53421deff5e856bca">&#9670;&#160;</a></span>erase() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>itLast</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5b12cc28b0e11f74b3ff266066c7a132" name="a5b12cc28b0e11f74b3ff266066c7a132"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b12cc28b0e11f74b3ff266066c7a132">&#9670;&#160;</a></span>expand() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::expand </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>offset</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>requiredCapacity</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae0548cff4f0d4422a8b51157308847b5" name="ae0548cff4f0d4422a8b51157308847b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0548cff4f0d4422a8b51157308847b5">&#9670;&#160;</a></span>expand() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::expand </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>uninitializedStart</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>uninitializedEnd</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>requiredCapacity</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7c1246118afeed4a78b9ab79d34f7e97" name="a7c1246118afeed4a78b9ab79d34f7e97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c1246118afeed4a78b9ab79d34f7e97">&#9670;&#160;</a></span>find() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab484794026cf7256e0f6af39eebd66d8" name="ab484794026cf7256e0f6af39eebd66d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab484794026cf7256e0f6af39eebd66d8">&#9670;&#160;</a></span>find() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a71c95d3a132a7c9ce7336da9daf48286" name="a71c95d3a132a7c9ce7336da9daf48286"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71c95d3a132a7c9ce7336da9daf48286">&#9670;&#160;</a></span>find_erase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::find_erase </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab0b185f961757690543c9ecab723accf" name="ab0b185f961757690543c9ecab723accf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0b185f961757690543c9ecab723accf">&#9670;&#160;</a></span>Free()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::Free </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptr</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a457c2a523fa6a1479f26080c8cfd6eac" name="a457c2a523fa6a1479f26080c8cfd6eac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a457c2a523fa6a1479f26080c8cfd6eac">&#9670;&#160;</a></span>front() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::front </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aebe8178f1131130a79ac9698e235d3a4" name="aebe8178f1131130a79ac9698e235d3a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebe8178f1131130a79ac9698e235d3a4">&#9670;&#160;</a></span>front() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::front </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac07a4538bceebb6f939bd9d4da55c47c" name="ac07a4538bceebb6f939bd9d4da55c47c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac07a4538bceebb6f939bd9d4da55c47c">&#9670;&#160;</a></span>IndexOf() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::IndexOf </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptr</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5802db0d7487e7bb7faed2adbb77cfa2" name="a5802db0d7487e7bb7faed2adbb77cfa2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5802db0d7487e7bb7faed2adbb77cfa2">&#9670;&#160;</a></span>IndexOf() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::IndexOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3df2c4339c74e0256b81a3c2b5e3ac12" name="a3df2c4339c74e0256b81a3c2b5e3ac12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3df2c4339c74e0256b81a3c2b5e3ac12">&#9670;&#160;</a></span>insert() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0468097f186919701653e58d02e0e688" name="a0468097f186919701653e58d02e0e688"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0468097f186919701653e58d02e0e688">&#9670;&#160;</a></span>insert() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad0ded8533bc40c55f1cb6339eb7c79cb" name="ad0ded8533bc40c55f1cb6339eb7c79cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0ded8533bc40c55f1cb6339eb7c79cb">&#9670;&#160;</a></span>max_size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::max_size </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aac539da6355b70868ad1c897c6d9b565" name="aac539da6355b70868ad1c897c6d9b565"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac539da6355b70868ad1c897c6d9b565">&#9670;&#160;</a></span>MoveToBack()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::MoveToBack </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3cc4bf4254fde0facbf9329f61a65251" name="a3cc4bf4254fde0facbf9329f61a65251"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cc4bf4254fde0facbf9329f61a65251">&#9670;&#160;</a></span>MoveToFront()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::MoveToFront </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>it</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0c3087d47d263198ed21a637776e6bb1" name="a0c3087d47d263198ed21a637776e6bb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c3087d47d263198ed21a637776e6bb1">&#9670;&#160;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa06e7587072776a6d8b25f79b4a2fa28" name="aa06e7587072776a6d8b25f79b4a2fa28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa06e7587072776a6d8b25f79b4a2fa28">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab9e2afe6d77f35e7e4e8fb4c590f5095" name="ab9e2afe6d77f35e7e4e8fb4c590f5095"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9e2afe6d77f35e7e4e8fb4c590f5095">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a63d0cfb0ec888386e6285dff7f4c8cf2" name="a63d0cfb0ec888386e6285dff7f4c8cf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63d0cfb0ec888386e6285dff7f4c8cf2">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab1b99255a29c9eaf7578af1ae6902550" name="ab1b99255a29c9eaf7578af1ae6902550"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1b99255a29c9eaf7578af1ae6902550">&#9670;&#160;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a272a50ea88a45ac82d6c2ca0a48b5e1b">const_reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>i</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abf57b9a06bd5f177819fd02c3c3ada3d" name="abf57b9a06bd5f177819fd02c3c3ada3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf57b9a06bd5f177819fd02c3c3ada3d">&#9670;&#160;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a60c6173b770205f17cc93bf4fac745c4">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>i</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a35cfb392ed86585f279a041366d78951" name="a35cfb392ed86585f279a041366d78951"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35cfb392ed86585f279a041366d78951">&#9670;&#160;</a></span>pop_back()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::pop_back </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a412aee6f47ff94d16c2e95ecd25fc3d4" name="a412aee6f47ff94d16c2e95ecd25fc3d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a412aee6f47ff94d16c2e95ecd25fc3d4">&#9670;&#160;</a></span>push_back() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af8cb141034535d200eda09a6987d1d29" name="af8cb141034535d200eda09a6987d1d29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8cb141034535d200eda09a6987d1d29">&#9670;&#160;</a></span>push_back() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a86f887e45113cd31a9d861d7b9db02b1" name="a86f887e45113cd31a9d861d7b9db02b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86f887e45113cd31a9d861d7b9db02b1">&#9670;&#160;</a></span>push_front() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::push_front </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3b2b0317291e9ede185078dbac6e46de" name="a3b2b0317291e9ede185078dbac6e46de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b2b0317291e9ede185078dbac6e46de">&#9670;&#160;</a></span>push_front() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::push_front </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0f58fa88a9c4d2b3ea0d526b51c3d734" name="a0f58fa88a9c4d2b3ea0d526b51c3d734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f58fa88a9c4d2b3ea0d526b51c3d734">&#9670;&#160;</a></span>rbegin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a311d65ec1d633e62aedbf0fa3ce095dd" name="a311d65ec1d633e62aedbf0fa3ce095dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a311d65ec1d633e62aedbf0fa3ce095dd">&#9670;&#160;</a></span>rbegin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a2a903e21b7db2042b0c997439ec4423d">reverse_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afb641b501c2fe4af34355edc50c319c1" name="afb641b501c2fe4af34355edc50c319c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb641b501c2fe4af34355edc50c319c1">&#9670;&#160;</a></span>rend() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a4059ec082bedd5db7709b29c010a053d">const_reverse_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::rend </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acb5839d81b13b6e5c183a48986aa6414" name="acb5839d81b13b6e5c183a48986aa6414"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb5839d81b13b6e5c183a48986aa6414">&#9670;&#160;</a></span>rend() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a2a903e21b7db2042b0c997439ec4423d">reverse_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::rend </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="add6169c45571f15f875e35340e1efcdd" name="add6169c45571f15f875e35340e1efcdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add6169c45571f15f875e35340e1efcdd">&#9670;&#160;</a></span>reserve()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>requiredCapacity</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad307d3af88f2cee59a8afb07f8d67532" name="ad307d3af88f2cee59a8afb07f8d67532"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad307d3af88f2cee59a8afb07f8d67532">&#9670;&#160;</a></span>resize() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::resize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>newSize</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a74603c0b49d2e4c424fdde8786244824" name="a74603c0b49d2e4c424fdde8786244824"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74603c0b49d2e4c424fdde8786244824">&#9670;&#160;</a></span>resize() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::resize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>newSize</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1bfe9456a6946f4aa9bd0bde68a86bf3" name="a1bfe9456a6946f4aa9bd0bde68a86bf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bfe9456a6946f4aa9bd0bde68a86bf3">&#9670;&#160;</a></span>reverse_find() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reverse_find </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1bf3a5d55a65719d09317c3243a73e0f" name="a1bf3a5d55a65719d09317c3243a73e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bf3a5d55a65719d09317c3243a73e0f">&#9670;&#160;</a></span>reverse_find() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reverse_find </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a705ee0b90e2f92769ca31918cb17ce9c" name="a705ee0b90e2f92769ca31918cb17ce9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a705ee0b90e2f92769ca31918cb17ce9c">&#9670;&#160;</a></span>reverse_find() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a74c136faa5eb244c95d619bb12bb866a">iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reverse_find </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>itLast</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af61f4bad06163ba1cfb23aedfb19f8d9" name="af61f4bad06163ba1cfb23aedfb19f8d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af61f4bad06163ba1cfb23aedfb19f8d9">&#9670;&#160;</a></span>reverse_find() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::reverse_find </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>v</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="#ade0cdd95963c1a217ff58e41243d78a8">const_iterator</a></td>          <td class="paramname"><span class="paramname"><em>itLast</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a063621bfc07808faeb65cb728f59d564" name="a063621bfc07808faeb65cb728f59d564"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a063621bfc07808faeb65cb728f59d564">&#9670;&#160;</a></span>shrink()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::shrink </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a></td>          <td class="paramname"><span class="paramname"><em>newSize</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac3e5ee0bf1385084ad7beffe9ab9dae4" name="ac3e5ee0bf1385084ad7beffe9ab9dae4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3e5ee0bf1385084ad7beffe9ab9dae4">&#9670;&#160;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::size </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a9b69ea4d58429361836985b7d2d97a" name="a5a9b69ea4d58429361836985b7d2d97a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a9b69ea4d58429361836985b7d2d97a">&#9670;&#160;</a></span>size_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a5a11e30cb7262870362a393a4120c9eb">size_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::size_in_bytes </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a66a48c5444715e16acd83b1a7bd3744a" name="a66a48c5444715e16acd83b1a7bd3744a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66a48c5444715e16acd83b1a7bd3744a">&#9670;&#160;</a></span>swap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a6196c273198dc41c0f5707aeb48ea8bb" name="a6196c273198dc41c0f5707aeb48ea8bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6196c273198dc41c0f5707aeb48ea8bb">&#9670;&#160;</a></span>allocatedEnd_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::allocatedEnd_ = nullptr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a75d65e4896f1eb9318a5ee8cd486e375" name="a75d65e4896f1eb9318a5ee8cd486e375"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75d65e4896f1eb9318a5ee8cd486e375">&#9670;&#160;</a></span>CanZeroInitialize</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::CanZeroInitialize = std::is_trivially_default_constructible_v&lt;T&gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a51b39bfd05042213e3bf437f44f91b90" name="a51b39bfd05042213e3bf437f44f91b90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51b39bfd05042213e3bf437f44f91b90">&#9670;&#160;</a></span>data_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base_1_1_data_ptr.xhtml">DataPtr</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::data_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae29f469fab34698cfc83c55e0100d9c1" name="ae29f469fab34698cfc83c55e0100d9c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae29f469fab34698cfc83c55e0100d9c1">&#9670;&#160;</a></span>ElementSize</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::ElementSize = sizeof( T )</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ada50f4b0ea5132545b377f2183d3eaee" name="ada50f4b0ea5132545b377f2183d3eaee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada50f4b0ea5132545b377f2183d3eaee">&#9670;&#160;</a></span>end_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename IteratorT , typename ConstIteratorT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">Harlinn::Common::Core::VectorBase</a>&lt; T, IteratorT, ConstIteratorT &gt;::end_ = nullptr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_c_c_vector_8h.xhtml">HCCVector.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_vector_base.xhtml">VectorBase</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>

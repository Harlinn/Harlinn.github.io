<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Harlinn.Windows: Harlinn::Common::Core::Bits&lt; bitCount &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Harlinn.Windows<span id="projectnumber">&#160;0.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="class_harlinn_1_1_common_1_1_core_1_1_bits-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Harlinn::Common::Core::Bits&lt; bitCount &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A type that holds a fixed number of bits.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;HCCBits.h&gt;</code></p>
<div class="dynheader">
Collaboration diagram for Harlinn::Common::Core::Bits&lt; bitCount &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_harlinn_1_1_common_1_1_core_1_1_bits__coll__graph.svg" width="168" height="256"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits_1_1reference.xhtml">reference</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a8f9dfc15e665186589cee6b45103f668" id="r_a8f9dfc15e665186589cee6b45103f668"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> = typename <a class="el" href="struct_harlinn_1_1_common_1_1_core_1_1_bit_mask.xhtml">BitMask</a>&lt;<a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a>&gt;::type</td></tr>
<tr class="separator:a8f9dfc15e665186589cee6b45103f668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a892eb94caaeb7e1a9fdfe0ac07390642" id="r_a892eb94caaeb7e1a9fdfe0ac07390642"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a892eb94caaeb7e1a9fdfe0ac07390642">value_type</a> = bool</td></tr>
<tr class="separator:a892eb94caaeb7e1a9fdfe0ac07390642"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6093ed76f140586a0e42907aa46d45c5" id="r_a6093ed76f140586a0e42907aa46d45c5"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6093ed76f140586a0e42907aa46d45c5">Bits</a> () noexcept=default</td></tr>
<tr class="separator:a6093ed76f140586a0e42907aa46d45c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e8bc95431fc8ed25427328ca8a10971" id="r_a6e8bc95431fc8ed25427328ca8a10971"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6e8bc95431fc8ed25427328ca8a10971">Bits</a> (<a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> value) noexcept</td></tr>
<tr class="separator:a6e8bc95431fc8ed25427328ca8a10971"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5051564bcb29affb47191ed28e4057b" id="r_af5051564bcb29affb47191ed28e4057b"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af5051564bcb29affb47191ed28e4057b">size</a> () const noexcept</td></tr>
<tr class="separator:af5051564bcb29affb47191ed28e4057b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ac4556cd81906b78f790c3a28ed00ae" id="r_a9ac4556cd81906b78f790c3a28ed00ae"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9ac4556cd81906b78f790c3a28ed00ae">Value</a> () const noexcept</td></tr>
<tr class="separator:a9ac4556cd81906b78f790c3a28ed00ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3b0cd99b281a2bdd1d15a49747a81c8" id="r_ad3b0cd99b281a2bdd1d15a49747a81c8"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits_1_1reference.xhtml">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad3b0cd99b281a2bdd1d15a49747a81c8">operator[]</a> (size_t index) noexcept</td></tr>
<tr class="separator:ad3b0cd99b281a2bdd1d15a49747a81c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1eaa329a00dcbc9d923d565a62155df" id="r_ae1eaa329a00dcbc9d923d565a62155df"><td class="memItemLeft" align="right" valign="top">constexpr bool __forceinline&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae1eaa329a00dcbc9d923d565a62155df">operator[]</a> (size_t index) const noexcept</td></tr>
<tr class="separator:ae1eaa329a00dcbc9d923d565a62155df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73ebf3574a7e4218fd37b0bf2c6b8c8c" id="r_a73ebf3574a7e4218fd37b0bf2c6b8c8c"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a73ebf3574a7e4218fd37b0bf2c6b8c8c">operator bool</a> () const noexcept</td></tr>
<tr class="separator:a73ebf3574a7e4218fd37b0bf2c6b8c8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95cd2b71e83989c582094a9c41d9b164" id="r_a95cd2b71e83989c582094a9c41d9b164"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a95cd2b71e83989c582094a9c41d9b164">operator&lt;=&gt;</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;other) const noexcept=default</td></tr>
<tr class="separator:a95cd2b71e83989c582094a9c41d9b164"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2575da927136028ca865e293c23cd03e" id="r_a2575da927136028ca865e293c23cd03e"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2575da927136028ca865e293c23cd03e">operator~</a> () const noexcept</td></tr>
<tr class="separator:a2575da927136028ca865e293c23cd03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9417145d70303c198af935a8ba31897" id="r_ad9417145d70303c198af935a8ba31897"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad9417145d70303c198af935a8ba31897">operator|=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;other) noexcept</td></tr>
<tr class="separator:ad9417145d70303c198af935a8ba31897"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b66f1a195b976eb58161bc997fc0a8a" id="r_a3b66f1a195b976eb58161bc997fc0a8a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3b66f1a195b976eb58161bc997fc0a8a">operator&amp;=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;other) noexcept</td></tr>
<tr class="separator:a3b66f1a195b976eb58161bc997fc0a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5430e02cdca96a0f5b471bc6ec4cbf7d" id="r_a5430e02cdca96a0f5b471bc6ec4cbf7d"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5430e02cdca96a0f5b471bc6ec4cbf7d">operator^=</a> (const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;other) noexcept</td></tr>
<tr class="separator:a5430e02cdca96a0f5b471bc6ec4cbf7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d9ac0a79364ea06352edc453748ba64" id="r_a5d9ac0a79364ea06352edc453748ba64"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_integral_v&lt;T&gt;</td></tr>
<tr class="memitem:a5d9ac0a79364ea06352edc453748ba64"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5d9ac0a79364ea06352edc453748ba64">operator&lt;&lt;=</a> (const T &amp;val) noexcept</td></tr>
<tr class="separator:a5d9ac0a79364ea06352edc453748ba64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63841ead3ce62757c972a9fe3c5964d8" id="r_a63841ead3ce62757c972a9fe3c5964d8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; <br />
requires std::is_integral_v&lt;T&gt;</td></tr>
<tr class="memitem:a63841ead3ce62757c972a9fe3c5964d8"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a63841ead3ce62757c972a9fe3c5964d8">operator&gt;&gt;=</a> (const T &amp;val) noexcept</td></tr>
<tr class="separator:a63841ead3ce62757c972a9fe3c5964d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb3934df9f1c6ae0b32a9c190e47367" id="r_a6eb3934df9f1c6ae0b32a9c190e47367"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6eb3934df9f1c6ae0b32a9c190e47367">reverse</a> () noexcept</td></tr>
<tr class="separator:a6eb3934df9f1c6ae0b32a9c190e47367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9863fda14f54cdd29e5daa9bf92702cc" id="r_a9863fda14f54cdd29e5daa9bf92702cc"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9863fda14f54cdd29e5daa9bf92702cc">reversed</a> () const noexcept</td></tr>
<tr class="separator:a9863fda14f54cdd29e5daa9bf92702cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46c0d7927e1b8e96898951dac9035141" id="r_a46c0d7927e1b8e96898951dac9035141"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a46c0d7927e1b8e96898951dac9035141">flip</a> () noexcept</td></tr>
<tr class="separator:a46c0d7927e1b8e96898951dac9035141"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35944a4973c271a5f020ce0e341cfbf7" id="r_a35944a4973c271a5f020ce0e341cfbf7"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a35944a4973c271a5f020ce0e341cfbf7">flipped</a> () const noexcept</td></tr>
<tr class="separator:a35944a4973c271a5f020ce0e341cfbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41eb41999148c91f665227816c479a3b" id="r_a41eb41999148c91f665227816c479a3b"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a41eb41999148c91f665227816c479a3b">all</a> () const noexcept</td></tr>
<tr class="separator:a41eb41999148c91f665227816c479a3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c6dac5e49bec995942258c4adbe7ff5" id="r_a5c6dac5e49bec995942258c4adbe7ff5"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5c6dac5e49bec995942258c4adbe7ff5">any</a> () const noexcept</td></tr>
<tr class="separator:a5c6dac5e49bec995942258c4adbe7ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2746e00661729256e242107ab57f4cd0" id="r_a2746e00661729256e242107ab57f4cd0"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2746e00661729256e242107ab57f4cd0">none</a> () const noexcept</td></tr>
<tr class="separator:a2746e00661729256e242107ab57f4cd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff629a5b9ba46f5e936eef4b4dc9e779" id="r_aff629a5b9ba46f5e936eef4b4dc9e779"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aff629a5b9ba46f5e936eef4b4dc9e779">test</a> (size_t index) const noexcept</td></tr>
<tr class="separator:aff629a5b9ba46f5e936eef4b4dc9e779"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3914cfe8b45b56111bafb8155c6da873" id="r_a3914cfe8b45b56111bafb8155c6da873"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a3914cfe8b45b56111bafb8155c6da873"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a3914cfe8b45b56111bafb8155c6da873">test</a> () const noexcept</td></tr>
<tr class="separator:a3914cfe8b45b56111bafb8155c6da873"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6e082b7612c2c8d340dc04337f0017" id="r_ade6e082b7612c2c8d340dc04337f0017"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ade6e082b7612c2c8d340dc04337f0017">count</a> () const noexcept</td></tr>
<tr class="separator:ade6e082b7612c2c8d340dc04337f0017"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ac8d2f20eca26d0fb926774a628d16b" id="r_a2ac8d2f20eca26d0fb926774a628d16b"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2ac8d2f20eca26d0fb926774a628d16b">set</a> () noexcept</td></tr>
<tr class="separator:a2ac8d2f20eca26d0fb926774a628d16b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55e19a608b5082c7872fa6ed1fe8830e" id="r_a55e19a608b5082c7872fa6ed1fe8830e"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a55e19a608b5082c7872fa6ed1fe8830e">set</a> (size_t index) noexcept</td></tr>
<tr class="separator:a55e19a608b5082c7872fa6ed1fe8830e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a523df3b81ad54676ed62c4bfffac45f0" id="r_a523df3b81ad54676ed62c4bfffac45f0"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a523df3b81ad54676ed62c4bfffac45f0">set</a> (size_t index, bool val) noexcept</td></tr>
<tr class="separator:a523df3b81ad54676ed62c4bfffac45f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac754e10f649af5478a76cbd882aaa22a" id="r_ac754e10f649af5478a76cbd882aaa22a"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac754e10f649af5478a76cbd882aaa22a">reset</a> () noexcept</td></tr>
<tr class="separator:ac754e10f649af5478a76cbd882aaa22a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cd61b6b4fc077b4cac523111bde2ddf" id="r_a4cd61b6b4fc077b4cac523111bde2ddf"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4cd61b6b4fc077b4cac523111bde2ddf">reset</a> (size_t index) noexcept</td></tr>
<tr class="separator:a4cd61b6b4fc077b4cac523111bde2ddf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:ad73c1e9472822694a84cf4616b467515" id="r_ad73c1e9472822694a84cf4616b467515"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a> = bitCount</td></tr>
<tr class="separator:ad73c1e9472822694a84cf4616b467515"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a865adf59c081b10c66f017a9f803ad1c" id="r_a865adf59c081b10c66f017a9f803ad1c"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a865adf59c081b10c66f017a9f803ad1c">Mask</a> = <a class="el" href="struct_harlinn_1_1_common_1_1_core_1_1_bit_mask.xhtml">BitMask</a>&lt;<a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a>&gt;::value</td></tr>
<tr class="separator:a865adf59c081b10c66f017a9f803ad1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5879be6224c414c230811154aaf566bc" id="r_a5879be6224c414c230811154aaf566bc"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5879be6224c414c230811154aaf566bc">BytesPerWord</a> = sizeof( <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> )</td></tr>
<tr class="separator:a5879be6224c414c230811154aaf566bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ee91240314e2ab64893881c229948b2" id="r_a5ee91240314e2ab64893881c229948b2"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5ee91240314e2ab64893881c229948b2">BitsPerByte</a> = CHAR_BIT</td></tr>
<tr class="separator:a5ee91240314e2ab64893881c229948b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e31fdba92754b781c5cd3dfb1de1e2f" id="r_a9e31fdba92754b781c5cd3dfb1de1e2f"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9e31fdba92754b781c5cd3dfb1de1e2f">BitsPerWord</a> = sizeof( <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> ) * <a class="el" href="#a5ee91240314e2ab64893881c229948b2">BitsPerByte</a></td></tr>
<tr class="separator:a9e31fdba92754b781c5cd3dfb1de1e2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a8b1a7fceb1bf6fdddb12a5638a0fdb" id="r_a5a8b1a7fceb1bf6fdddb12a5638a0fdb"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5a8b1a7fceb1bf6fdddb12a5638a0fdb">UnusedBits</a> = <a class="el" href="#a9e31fdba92754b781c5cd3dfb1de1e2f">BitsPerWord</a> - <a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a></td></tr>
<tr class="separator:a5a8b1a7fceb1bf6fdddb12a5638a0fdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7406ec2924e93df29f2571ad5ba9a6b1" id="r_a7406ec2924e93df29f2571ad5ba9a6b1"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7406ec2924e93df29f2571ad5ba9a6b1">One</a> = static_cast&lt;<a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a>&gt;( 1 )</td></tr>
<tr class="separator:a7406ec2924e93df29f2571ad5ba9a6b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:ac195634a372fb2f291dccde5ce772c97" id="r_ac195634a372fb2f291dccde5ce772c97"><td class="memItemLeft" align="right" valign="top"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac195634a372fb2f291dccde5ce772c97">value_</a> = 0</td></tr>
<tr class="separator:ac195634a372fb2f291dccde5ce772c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;size_t bitCount&gt;<br />
class Harlinn::Common::Core::Bits&lt; bitCount &gt;</div><p>A type that holds a fixed number of bits. </p>
<p>This template was intentionally designed for a little-endian architecture. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a892eb94caaeb7e1a9fdfe0ac07390642" name="a892eb94caaeb7e1a9fdfe0ac07390642"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a892eb94caaeb7e1a9fdfe0ac07390642">&#9670;&#160;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::value_type = bool</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8f9dfc15e665186589cee6b45103f668" name="a8f9dfc15e665186589cee6b45103f668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f9dfc15e665186589cee6b45103f668">&#9670;&#160;</a></span>word_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::word_type = typename <a class="el" href="struct_harlinn_1_1_common_1_1_core_1_1_bit_mask.xhtml">BitMask</a>&lt;<a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a>&gt;::type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a6093ed76f140586a0e42907aa46d45c5" name="a6093ed76f140586a0e42907aa46d45c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6093ed76f140586a0e42907aa46d45c5">&#9670;&#160;</a></span>Bits() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::Bits </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e8bc95431fc8ed25427328ca8a10971" name="a6e8bc95431fc8ed25427328ca8a10971"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e8bc95431fc8ed25427328ca8a10971">&#9670;&#160;</a></span>Bits() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::Bits </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a41eb41999148c91f665227816c479a3b" name="a41eb41999148c91f665227816c479a3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41eb41999148c91f665227816c479a3b">&#9670;&#160;</a></span>all()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::all </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c6dac5e49bec995942258c4adbe7ff5" name="a5c6dac5e49bec995942258c4adbe7ff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c6dac5e49bec995942258c4adbe7ff5">&#9670;&#160;</a></span>any()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::any </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ade6e082b7612c2c8d340dc04337f0017" name="ade6e082b7612c2c8d340dc04337f0017"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade6e082b7612c2c8d340dc04337f0017">&#9670;&#160;</a></span>count()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::count </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a46c0d7927e1b8e96898951dac9035141" name="a46c0d7927e1b8e96898951dac9035141"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46c0d7927e1b8e96898951dac9035141">&#9670;&#160;</a></span>flip()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::flip </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a35944a4973c271a5f020ce0e341cfbf7" name="a35944a4973c271a5f020ce0e341cfbf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35944a4973c271a5f020ce0e341cfbf7">&#9670;&#160;</a></span>flipped()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::flipped </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2746e00661729256e242107ab57f4cd0" name="a2746e00661729256e242107ab57f4cd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2746e00661729256e242107ab57f4cd0">&#9670;&#160;</a></span>none()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::none </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a73ebf3574a7e4218fd37b0bf2c6b8c8c" name="a73ebf3574a7e4218fd37b0bf2c6b8c8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73ebf3574a7e4218fd37b0bf2c6b8c8c">&#9670;&#160;</a></span>operator bool()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator bool </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3b66f1a195b976eb58161bc997fc0a8a" name="a3b66f1a195b976eb58161bc997fc0a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b66f1a195b976eb58161bc997fc0a8a">&#9670;&#160;</a></span>operator&amp;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator&amp;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&lt; bitCount &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d9ac0a79364ea06352edc453748ba64" name="a5d9ac0a79364ea06352edc453748ba64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d9ac0a79364ea06352edc453748ba64">&#9670;&#160;</a></span>operator&lt;&lt;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires std::is_integral_v&lt;T&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator&lt;&lt;= </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>val</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a95cd2b71e83989c582094a9c41d9b164" name="a95cd2b71e83989c582094a9c41d9b164"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95cd2b71e83989c582094a9c41d9b164">&#9670;&#160;</a></span>operator&lt;=&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator&lt;=&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&lt; bitCount &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a63841ead3ce62757c972a9fe3c5964d8" name="a63841ead3ce62757c972a9fe3c5964d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63841ead3ce62757c972a9fe3c5964d8">&#9670;&#160;</a></span>operator&gt;&gt;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; <br />
requires std::is_integral_v&lt;T&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator&gt;&gt;= </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>val</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae1eaa329a00dcbc9d923d565a62155df" name="ae1eaa329a00dcbc9d923d565a62155df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1eaa329a00dcbc9d923d565a62155df">&#9670;&#160;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool __forceinline <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad3b0cd99b281a2bdd1d15a49747a81c8" name="ad3b0cd99b281a2bdd1d15a49747a81c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3b0cd99b281a2bdd1d15a49747a81c8">&#9670;&#160;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits_1_1reference.xhtml">reference</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5430e02cdca96a0f5b471bc6ec4cbf7d" name="a5430e02cdca96a0f5b471bc6ec4cbf7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5430e02cdca96a0f5b471bc6ec4cbf7d">&#9670;&#160;</a></span>operator^=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator^= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&lt; bitCount &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad9417145d70303c198af935a8ba31897" name="ad9417145d70303c198af935a8ba31897"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9417145d70303c198af935a8ba31897">&#9670;&#160;</a></span>operator|=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> &amp; <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator|= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a>&lt; bitCount &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2575da927136028ca865e293c23cd03e" name="a2575da927136028ca865e293c23cd03e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2575da927136028ca865e293c23cd03e">&#9670;&#160;</a></span>operator~()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::operator~ </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac754e10f649af5478a76cbd882aaa22a" name="ac754e10f649af5478a76cbd882aaa22a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac754e10f649af5478a76cbd882aaa22a">&#9670;&#160;</a></span>reset() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::reset </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4cd61b6b4fc077b4cac523111bde2ddf" name="a4cd61b6b4fc077b4cac523111bde2ddf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cd61b6b4fc077b4cac523111bde2ddf">&#9670;&#160;</a></span>reset() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::reset </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6eb3934df9f1c6ae0b32a9c190e47367" name="a6eb3934df9f1c6ae0b32a9c190e47367"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6eb3934df9f1c6ae0b32a9c190e47367">&#9670;&#160;</a></span>reverse()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::reverse </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9863fda14f54cdd29e5daa9bf92702cc" name="a9863fda14f54cdd29e5daa9bf92702cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9863fda14f54cdd29e5daa9bf92702cc">&#9670;&#160;</a></span>reversed()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::reversed </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2ac8d2f20eca26d0fb926774a628d16b" name="a2ac8d2f20eca26d0fb926774a628d16b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ac8d2f20eca26d0fb926774a628d16b">&#9670;&#160;</a></span>set() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::set </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a55e19a608b5082c7872fa6ed1fe8830e" name="a55e19a608b5082c7872fa6ed1fe8830e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55e19a608b5082c7872fa6ed1fe8830e">&#9670;&#160;</a></span>set() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::set </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a523df3b81ad54676ed62c4bfffac45f0" name="a523df3b81ad54676ed62c4bfffac45f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a523df3b81ad54676ed62c4bfffac45f0">&#9670;&#160;</a></span>set() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::set </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>val</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af5051564bcb29affb47191ed28e4057b" name="af5051564bcb29affb47191ed28e4057b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5051564bcb29affb47191ed28e4057b">&#9670;&#160;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::size </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3914cfe8b45b56111bafb8155c6da873" name="a3914cfe8b45b56111bafb8155c6da873"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3914cfe8b45b56111bafb8155c6da873">&#9670;&#160;</a></span>test() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<div class="memtemplate">
template&lt;size_t N&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::test </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aff629a5b9ba46f5e936eef4b4dc9e779" name="aff629a5b9ba46f5e936eef4b4dc9e779"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff629a5b9ba46f5e936eef4b4dc9e779">&#9670;&#160;</a></span>test() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::test </td>
          <td>(</td>
          <td class="paramtype">size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ac4556cd81906b78f790c3a28ed00ae" name="a9ac4556cd81906b78f790c3a28ed00ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ac4556cd81906b78f790c3a28ed00ae">&#9670;&#160;</a></span>Value()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::Value </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a5ee91240314e2ab64893881c229948b2" name="a5ee91240314e2ab64893881c229948b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ee91240314e2ab64893881c229948b2">&#9670;&#160;</a></span>BitsPerByte</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::BitsPerByte = CHAR_BIT</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9e31fdba92754b781c5cd3dfb1de1e2f" name="a9e31fdba92754b781c5cd3dfb1de1e2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e31fdba92754b781c5cd3dfb1de1e2f">&#9670;&#160;</a></span>BitsPerWord</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::BitsPerWord = sizeof( <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> ) * <a class="el" href="#a5ee91240314e2ab64893881c229948b2">BitsPerByte</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5879be6224c414c230811154aaf566bc" name="a5879be6224c414c230811154aaf566bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5879be6224c414c230811154aaf566bc">&#9670;&#160;</a></span>BytesPerWord</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::BytesPerWord = sizeof( <a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> )</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a865adf59c081b10c66f017a9f803ad1c" name="a865adf59c081b10c66f017a9f803ad1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a865adf59c081b10c66f017a9f803ad1c">&#9670;&#160;</a></span>Mask</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::Mask = <a class="el" href="struct_harlinn_1_1_common_1_1_core_1_1_bit_mask.xhtml">BitMask</a>&lt;<a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a>&gt;::value</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7406ec2924e93df29f2571ad5ba9a6b1" name="a7406ec2924e93df29f2571ad5ba9a6b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7406ec2924e93df29f2571ad5ba9a6b1">&#9670;&#160;</a></span>One</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::One = static_cast&lt;<a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a>&gt;( 1 )</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad73c1e9472822694a84cf4616b467515" name="ad73c1e9472822694a84cf4616b467515"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad73c1e9472822694a84cf4616b467515">&#9670;&#160;</a></span>Size</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::Size = bitCount</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a8b1a7fceb1bf6fdddb12a5638a0fdb" name="a5a8b1a7fceb1bf6fdddb12a5638a0fdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a8b1a7fceb1bf6fdddb12a5638a0fdb">&#9670;&#160;</a></span>UnusedBits</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::UnusedBits = <a class="el" href="#a9e31fdba92754b781c5cd3dfb1de1e2f">BitsPerWord</a> - <a class="el" href="#ad73c1e9472822694a84cf4616b467515">Size</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac195634a372fb2f291dccde5ce772c97" name="ac195634a372fb2f291dccde5ce772c97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac195634a372fb2f291dccde5ce772c97">&#9670;&#160;</a></span>value_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t bitCount&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a8f9dfc15e665186589cee6b45103f668">word_type</a> <a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Harlinn::Common::Core::Bits</a>&lt; bitCount &gt;::value_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_h_c_c_bits_8h.xhtml">HCCBits.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_harlinn.xhtml">Harlinn</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common.xhtml">Common</a></li><li class="navelem"><a class="el" href="namespace_harlinn_1_1_common_1_1_core.xhtml">Core</a></li><li class="navelem"><a class="el" href="class_harlinn_1_1_common_1_1_core_1_1_bits.xhtml">Bits</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
